{
    "version": "https://jsonfeed.org/version/1",
    "title": "年没怀念der博客",
    "subtitle": "",
    "icon": "http://example.com/images/favicon.ico",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2021/12/09/%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2/",
            "url": "http://example.com/2021/12/09/%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2/",
            "title": "网络地址转换",
            "date_published": "2021-12-09T02:48:35.000Z",
            "content_html": "<h3 id=\"网络地址转换\"><a class=\"anchor\" href=\"#网络地址转换\">#</a> 网络地址转换</h3>\n<p>目的：解决 ip 稀缺</p>\n<p>三个专用地址块</p>\n<p><img data-src=\"https://s2.loli.net/2021/12/09/15aVHB4QMLxdjTC.png\" alt=\"image-20211118100015197\" /></p>\n<p>原理：本地网络中的所有计算机在访问 Internet 时使用同一个 IP 地址<br />\n，within the local network, computers use private addresses for<br />\nrouting intramural traffic 在本地网络中，计算机使用专用地址<br />\n进行路由。对于目的地址是专用地址的数据报，路由器一律<br />\n不予转发。</p>\n<p>本质：通过端口号区分主机</p>\n<h3 id=\"ipv6\"><a class=\"anchor\" href=\"#ipv6\">#</a> IPV6</h3>\n<p>同样是为了改变缺少 ip 地址的问题</p>\n<p>源 ip:128 位</p>\n<p>目的 ip:128 位</p>\n<p><img data-src=\"https://s2.loli.net/2021/12/09/CaiYJWqQs4EG1UB.png\" alt=\"image-20211118111114068\" /></p>\n<h3 id=\"隧道技术\"><a class=\"anchor\" href=\"#隧道技术\">#</a> 隧道技术</h3>\n<p>解决 ipv4 和 ipv6 共存</p>\n<p>ipv6 作为 ipv4 的 payload (数据) 发送</p>\n<p><img data-src=\"https://s2.loli.net/2021/12/09/PxaInA3sEKMHGpF.png\" alt=\"image-20211118111549533\" /></p>\n",
            "tags": [
                "大三",
                "计算机网络",
                "网络地址"
            ]
        },
        {
            "id": "http://example.com/2021/12/09/%E7%BD%91%E7%BB%9C%E5%B1%82/",
            "url": "http://example.com/2021/12/09/%E7%BD%91%E7%BB%9C%E5%B1%82/",
            "title": "网络层",
            "date_published": "2021-12-09T02:48:15.000Z",
            "content_html": "<h1 id=\"网络层-控制平面\"><a class=\"anchor\" href=\"#网络层-控制平面\">#</a> 网络层 - 控制平面</h1>\n<h2 id=\"路由算法\"><a class=\"anchor\" href=\"#路由算法\">#</a> 路由算法</h2>\n<h6 id=\"产生路由表的算法\"><a class=\"anchor\" href=\"#产生路由表的算法\">#</a> 产生路由表的算法</h6>\n<h3 id=\"图论抽象\"><a class=\"anchor\" href=\"#图论抽象\">#</a> 图论抽象</h3>\n<p>Graph: G = <strong>(N,E)</strong></p>\n<p><strong>N</strong> = set of routers = {u, v, w, x, y, z} 节点是<strong>路由器</strong></p>\n<p><strong>E</strong> = set of links ={(u,v), (u,x), (v,x), (v,w), (x,w), (x,y), (w,y), (w,z), (y,z) }  边是<strong>物理链路</strong></p>\n<p>链路开销 Cost of link：时延、费用或拥塞等级 路径开销 Cost of path：c (x1 , x2 , x3 ,…, xp) = c (x1 ,x2 ) + c (x2 ,x3 ) + … +  c (xp-1 ,xp )</p>\n<p><strong>路由算法</strong>：找到开销最小的路径 (路由器序列)</p>\n<p><strong>分散式</strong>算法 -- 只知道和部分路径，通过和邻居交换信息</p>\n<p>典型就是下面这个算法</p>\n<h3 id=\"距离向量路由算法\"><a class=\"anchor\" href=\"#距离向量路由算法\">#</a> 距离向量路由算法</h3>\n<h4 id=\"描述\"><a class=\"anchor\" href=\"#描述\">#</a> 描述</h4>\n<ol>\n<li>\n<p>节点 x 维护距离向量</p>\n<p>Dx=[dx (y): yєN ]<br />\n(如果 y 不是 x 的邻居节点，则 dx (y)=∞, 否则 dx (y)= c (x,y))</p>\n</li>\n<li>\n<p>每个节点周期性向其邻居节点发送它自己的 距离向量，节点 x 保存其邻居节点的距离向量<br />\n Dv = [dv (y): y є N ]</p>\n</li>\n<li>\n<p>n 当节点 x 接收到来自邻居的 新距离向量，它使用 B-F 方程更新自己的 DV :<br />\nDx (y) ← minv {c(x,v) + Dv (y)} for each node y ∊ N<br />\nBellman-Ford 方程：</p>\n<ol>\n<li>定义<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>d</mi><mi>x</mi></msub></mrow><annotation encoding=\"application/x-tex\">d_x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> (y) = 从 x 到 y 的最小开销路径的开销，<br />\nc (x,v) = 从 x 到邻居节点 v 的链路的开销</li>\n<li c(x,v)=\"\" +=\"\" dv=\"\" (y)=\"\">则 dx (y) = minv</li>\n<li>取值最小的节点对应最短路径中的<strong>下一跳</strong> (只有一个地址)➜ 转发表</li>\n</ol>\n</li>\n</ol>\n<p>​\t示例<br />\n &lt; img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zMi5sb2xpLm5ldC8yMDIxLzEyLzA5L0hoSUNHVWFrcWZ0MnptMS5wbmc=\">https://s2.loli.net/2021/12/09/HhICGUakqft2zm1.png</span>&quot; alt=&quot;image-20211122134953146&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<h3 id=\"链路状态路由算法\"><a class=\"anchor\" href=\"#链路状态路由算法\">#</a> 链路状态路由算法・</h3>\n<ol>\n<li>\n<p>Discover its neighbors, learn their network address. <strong>发现邻居，学习它们的网络地址</strong></p>\n</li>\n<li>\n<p>Measure the delay or cost to each of its neighbors. <strong>测量到每一个邻居的时延或开销</strong></p>\n</li>\n<li>\n<p>Construct a packet (link state packet)telling all it has  just learned. <strong>构造一个分组 (链路状态分组) 来通 告其学习到的所有信息</strong></p>\n</li>\n<li>\n<p>Send this packet to all other routers.  <strong>向所有路由器发送该分组</strong></p>\n</li>\n<li>\n<p>Compute the shortest path to every other router.  <strong>计算到其他路由器的最短路径</strong><br />\n使用 Dijkstra 算法计算最短路径<br />\n &lt; img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zMi5sb2xpLm5ldC8yMDIxLzEyLzA5L21DZEY0RzJ3Tzd2eHBVVy5wbmc=\">https://s2.loli.net/2021/12/09/mCdF4G2wO7vxpUW.png</span>&quot; alt=&quot;image-20211122143134224&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n</li>\n</ol>\n<h2 id=\"路由协议\"><a class=\"anchor\" href=\"#路由协议\">#</a> 路由协议</h2>\n<p>受到分组压力，单位需求的影响，产生了 as (自治系统)</p>\n<p>系统内可以用之前的算法，系统外 --? 自治系统间专门的路由协议</p>\n<h3 id=\"openshortestpathfirst路由协议\"><a class=\"anchor\" href=\"#openshortestpathfirst路由协议\">#</a> O (pen) S (hortest) P (ath) F (irst) 路由协议</h3>\n<h5 id=\"自治系统内路由-开放最短路径优先\"><a class=\"anchor\" href=\"#自治系统内路由-开放最短路径优先\">#</a> 自治系统内路由 - 开放最短路径优先</h5>\n<h6 id=\"使用的算法是链路状态算法\"><a class=\"anchor\" href=\"#使用的算法是链路状态算法\">#</a> 使用的算法是<strong>链路状态算法</strong></h6>\n<p>OSPF 的特点</p>\n<ol>\n<li>安全性 -- 报文经过签名鉴别</li>\n<li>使用多条开销相同的路径</li>\n<li>对每条链路，为不同的服务类型设置多种开销度量</li>\n<li>集成的单播和多播支持</li>\n</ol>\n<h5 id=\"层次ospf\"><a class=\"anchor\" href=\"#层次ospf\">#</a> 层次 ospf</h5>\n<p>自治系统内进一步再分</p>\n<h3 id=\"bgp路由协议border-gateway-protocol\"><a class=\"anchor\" href=\"#bgp路由协议border-gateway-protocol\">#</a> BGP 路由协议 (border gateway protocol)</h3>\n<h5 id=\"-自治系统间路由\"><a class=\"anchor\" href=\"#-自治系统间路由\">#</a> - 自治系统间路由</h5>\n<p>算法 - 距离向量算法 (改名 --- 路径向量算法)</p>\n<ol>\n<li>eBGP: Obtain subnet reachability information from</li>\n</ol>\n<p>neighboring ASes. 从相邻 AS 获得子网可达性信息</p>\n<ol start=\"2\">\n<li>iBGP: Propagate reachability information to all AS-internal</li>\n</ol>\n<p>routers. 向 AS 内部的所有路由器传播可达性信息</p>\n<ol start=\"3\">\n<li>Determine “good” routes to subnets based on reachability</li>\n</ol>\n<p>information and policy. 根据可达性信息和策略，决定到子网</p>\n<p>的 “好” 路由</p>\n<h2 id=\"icmp-the-internet-control\"><a class=\"anchor\" href=\"#icmp-the-internet-control\">#</a> •ICMP-The Internet Control</h2>\n<p>差错报告 -- 不可达网络 \\ 主机 \\ 端口 \\ 协议</p>\n<p>回声请求</p>\n<p>trace route</p>\n<p>源主机从 ttl=1, 一点点开始发送更大的 ttl, 目的端口号设置为一个不可能到达的端口，</p>\n<p>当 ttl 超时时，该路由器发送一个 ICMP 报文到源主机，这样会获取路径上路由器的信息</p>\n<p>到达目的主机后，会返回一个端口不可达报文，探测结束</p>\n<h2 id=\"message-protocol\"><a class=\"anchor\" href=\"#message-protocol\">#</a> Message Protocol</h2>\n<h2 id=\"网络管理snmp协议\"><a class=\"anchor\" href=\"#网络管理snmp协议\">#</a> 网络管理 ——SNMP 协议</h2>\n",
            "tags": [
                "大三",
                "计算机网络",
                "网络层"
            ]
        },
        {
            "id": "http://example.com/2021/12/09/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/",
            "url": "http://example.com/2021/12/09/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/",
            "title": "数据链路层",
            "date_published": "2021-12-09T02:48:01.000Z",
            "content_html": "<h1 id=\"12_2_数据链路层\"><a class=\"anchor\" href=\"#12_2_数据链路层\">#</a> 12_2_数据链路层</h1>\n<h2 id=\"1-数据链路层的基本功能\"><a class=\"anchor\" href=\"#1-数据链路层的基本功能\">#</a> 1. 数据链路层的基本功能</h2>\n<p><strong>&lt;u&gt; 将数据报从一个节点经过一条链路传输到相邻节点 &lt;/u&gt;</strong></p>\n<ol>\n<li>\n<p>组帧：将数据报封装进帧，加上首部和尾部</p>\n</li>\n<li>\n<p>链路接入：如果共享媒体，控制信道接入，使用帧首部中的 “MAC” 地址标识源和目的地</p>\n</li>\n<li>\n<p>相邻节点间的可靠交付，</p>\n</li>\n<li>\n<p>检错</p>\n</li>\n<li>\n<p>纠错：接收方识别并纠正比特差错，而不需要重传</p>\n</li>\n</ol>\n<p>它放在哪？适配器 (网卡), 和主机系统总线相连</p>\n<h2 id=\"2差错控制\"><a class=\"anchor\" href=\"#2差错控制\">#</a> 2. 差错控制</h2>\n<p><strong>通过通信信道接收的数据与发送的数据不一致的现象称为传输差错 (简称差错)。</strong></p>\n<h3 id=\"21检错编码\"><a class=\"anchor\" href=\"#21检错编码\">#</a> 2.1 检错编码</h3>\n<h4 id=\"211单比特奇偶校验\"><a class=\"anchor\" href=\"#211单比特奇偶校验\">#</a> 2.1.1 单比特奇偶校验</h4>\n<p>奇偶校验码是一种通过增加冗余位使得码字中 “1” 的个数恒为奇数或偶数的编码方法</p>\n<p><img data-src=\"https://s2.loli.net/2021/12/09/JEV1Ht24Sz6iWuk.png\" alt=\"image-20211202102617007\" /></p>\n<p>能力：能够检测单 (奇数) 个比特差错</p>\n<h4 id=\"212internetchecksum-udp里讲过\"><a class=\"anchor\" href=\"#212internetchecksum-udp里讲过\">#</a> 2.1.2InternetChecksum--UDP 里讲过</h4>\n<h4 id=\"213循环冗余校验\"><a class=\"anchor\" href=\"#213循环冗余校验\">#</a> 2.1.3 循环冗余校验</h4>\n<p>原始数据：D</p>\n<p>校验位：长度 r,</p>\n<p>原始数据后补上 r 位 0,</p>\n<p>Generator: G:r+1 的长度</p>\n<p><img data-src=\"https://s2.loli.net/2021/12/09/ofx3QTMktbhvgzR.png\" alt=\"image-20211202103409058\" /></p>\n<p>D 不断异或 G (其实是求余数), 最后剩下的为校验位</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zMi5sb2xpLm5ldC8yMDIxLzEyLzA5L0VzSUgxOVlLaGJTWFpxNy5wbmc=\">https://s2.loli.net/2021/12/09/EsIH19YKhbSXZq7.png</span>&quot; alt=&quot;image-20211202103258900&quot; style=&quot;zoom:33%;&quot; /&gt;</p>\n<p>检测能力</p>\n<p><img data-src=\"https://s2.loli.net/2021/12/09/QD8Eu6FTqJRkfwx.png\" alt=\"image-20211202103444659\" /></p>\n<h4 id=\"214二维奇偶校验\"><a class=\"anchor\" href=\"#214二维奇偶校验\">#</a> 2.1.4 二维奇偶校验</h4>\n<p>二维奇偶校验能够检测并纠正单比特差错</p>\n<p><img data-src=\"https://s2.loli.net/2021/12/09/dsNAQDYEWB54bO6.png\" alt=\"image-20211202103521291\" /></p>\n<h3 id=\"22纠错编码\"><a class=\"anchor\" href=\"#22纠错编码\">#</a> 2.2 纠错编码</h3>\n<h2 id=\"3介质访问控制\"><a class=\"anchor\" href=\"#3介质访问控制\">#</a> 3. 介质访问控制</h2>\n<p>点对点 / 广播</p>\n<h3 id=\"31信道划分\"><a class=\"anchor\" href=\"#31信道划分\">#</a> 3.1 信道划分</h3>\n<p>将信道划分为较小的 “片” (时隙，频率，编码)</p>\n<p>为节点分配专用的片</p>\n<h4 id=\"311频分多路复用\"><a class=\"anchor\" href=\"#311频分多路复用\">#</a> 3.1.1 频分多路复用</h4>\n<h4 id=\"322时分多路复用\"><a class=\"anchor\" href=\"#322时分多路复用\">#</a> 3.2.2 时分多路复用、</h4>\n<h4 id=\"313波分多路复用\"><a class=\"anchor\" href=\"#313波分多路复用\">#</a> 3.1.3 波分多路复用</h4>\n<h4 id=\"314码分多路访问\"><a class=\"anchor\" href=\"#314码分多路访问\">#</a> 3.1.4 码分多路访问</h4>\n<h3 id=\"32随机访问\"><a class=\"anchor\" href=\"#32随机访问\">#</a> 3.2 随机访问</h3>\n<p>不划分信道，允许冲突</p>\n<p>从 “冲突” 中恢复</p>\n<h4 id=\"321aloha协议-csma协议\"><a class=\"anchor\" href=\"#321aloha协议-csma协议\">#</a> 3.2.1ALOHA 协议、CSMA 协议、</h4>\n<p><img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211202111307619.png\" alt=\"image-20211202111307619\" /></p>\n<p>传播时延的冲突:</p>\n<p>传播时延：传输距离 / 光速</p>\n<p><img data-src=\"https://s2.loli.net/2021/12/09/oRzjkmdAZTFytSf.png\" alt=\"image-20211202111802943\" /></p>\n<p>端到端往返时延 2t 称为争用期，或冲突窗口</p>\n<h4 id=\"322csmacd协议\"><a class=\"anchor\" href=\"#322csmacd协议\">#</a> 3.2.2CSMA/CD 协议</h4>\n<p>需要在发送完帧之前就能收到自己发送出去的数据，即帧的传输时延至少是数据在总线中的传播时延的 2 倍</p>\n<p><em><em>最小帧长 = 传播时延</em> 2 <em>数据传输速率</em></em></p>\n<p>例如，以太网的冲突窗口长度为 51.2µs，数据传输速</p>\n<p>率为 10Mbps，51.2µs 可以发送 512bit（64B）数据，因</p>\n<p>此，64B 是以太网的最短帧长度；</p>\n<h4 id=\"csmaca协议\"><a class=\"anchor\" href=\"#csmaca协议\">#</a> 、CSMA/CA 协议</h4>\n<h3 id=\"33轮流协议\"><a class=\"anchor\" href=\"#33轮流协议\">#</a> 3.3 轮流协议</h3>\n<h4 id=\"331令牌传递协议\"><a class=\"anchor\" href=\"#331令牌传递协议\">#</a> 3.3.1 令牌传递协议</h4>\n<h4 id=\"332轮询协议\"><a class=\"anchor\" href=\"#332轮询协议\">#</a> 3.3.2 轮询协议</h4>\n<h2 id=\"4局域网\"><a class=\"anchor\" href=\"#4局域网\">#</a> 4. 局域网</h2>\n<h3 id=\"41局域网的基本概念与体系结构\"><a class=\"anchor\" href=\"#41局域网的基本概念与体系结构\">#</a> 4.1 局域网的基本概念与体系结构</h3>\n<h3 id=\"42局域网寻址与arp协议\"><a class=\"anchor\" href=\"#42局域网寻址与arp协议\">#</a> 4.2 局域网寻址与 ARP 协议</h3>\n<h3 id=\"43以太网与ieee-8023\"><a class=\"anchor\" href=\"#43以太网与ieee-8023\">#</a> 4.3 以太网与 IEEE 802.3</h3>\n<h5 id=\"431以太网拓扑结构\"><a class=\"anchor\" href=\"#431以太网拓扑结构\">#</a> 4.3.1 以太网拓扑结构</h5>\n<p>90 年代前：总线型拓扑 (单冲突域)</p>\n<p>现在星形 (中心是交换机，节点之间不冲突，不需要 CSMA)</p>\n<p><img data-src=\"https://s2.loli.net/2021/12/09/MDJZpHrGhb3BewT.png\" alt=\"image-20211209100351905\" /></p>\n<p>4.3.2 以太网帧结构</p>\n<p>...</p>\n<p>4.3.3 以太网属性</p>\n<p>•connectionless: no handshaking between sending and receiving NICs</p>\n<p>连接之间没有握手</p>\n<p>•unreliable: receiving NIC doesn't send ACKs or NAKs to sending NIC</p>\n<p>就是说，如果没收到就直接扔了，不发消息</p>\n<p>以太网的 MAC Control</p>\n<p>CMSA/CD + 指数回避 (用来防止连续冲突)</p>\n<h3 id=\"44无线局域网ieee-80211\"><a class=\"anchor\" href=\"#44无线局域网ieee-80211\">#</a> 4.4 无线局域网 (IEEE 802.11)</h3>\n<p>4.4.1 典型结构</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zMi5sb2xpLm5ldC8yMDIxLzEyLzA5LzZTRTkxbU1OQlZwcmdBaC5wbmc=\">https://s2.loli.net/2021/12/09/6SE91mMNBVprgAh.png</span>&quot; alt=&quot;image-20211209102241124&quot; style=&quot;zoom:33%;&quot; /&gt;</p>\n<p>4.4.2 冲突控制</p>\n<p>CSMA/C(ollision)A(voidance)</p>\n<p>允许发送端预订信道</p>\n<ul>\n<li>发送端发送请求帧到 AP</li>\n<li>AP 广播允许发送 (CTS) 的回复</li>\n<li>所有结点收到 CTS, 发送端发送</li>\n</ul>\n<h2 id=\"5数据链路层设备\"><a class=\"anchor\" href=\"#5数据链路层设备\">#</a> 5. 数据链路层设备</h2>\n<h3 id=\"51局域网交换机\"><a class=\"anchor\" href=\"#51局域网交换机\">#</a> 5.1 局域网交换机</h3>\n<p>查看进入的 MAC 地址，然后转发给出链路</p>\n<p>**&lt;u&gt; 透明 &lt;/u&gt;<strong> 因此在转发的时候分组里</strong> &lt;u&gt; 不会 &lt;/u&gt;** 有交换机的物理地址</p>\n<p>&lt;u&gt;<strong> 自学习</strong> &lt;/u&gt;:</p>\n<p>收到对应接口分组后记录对应接口 MAC 地址在自己对应接口上</p>\n<p>如果发现目的接口没有，会洪泛 (将分组分发到所有接口上，等待回复)</p>\n<p>5.2 冲突域 vs 广播域</p>\n<p>冲突域</p>\n<p>当两个设备在同时发送分组的时候会冲突</p>\n<p>下面每个圈都是冲突域</p>\n<p><img data-src=\"https://s2.loli.net/2021/12/09/PYFwpzouJ9VhBre.png\" alt=\"image-20211209105458295\" /></p>\n<p>广播</p>\n<p>通过广播能发到的一堆设备</p>\n<p><img data-src=\"https://s2.loli.net/2021/12/09/l7OfskCEuRYMqb6.png\" alt=\"image-20211209105941059\" /></p>\n<p>虚拟局域网 (为了防止过多的广播信息引起不便)</p>\n<p>虚拟局域网 VLAN 是由一些局域网网段构成的与物理位置无关的逻辑组</p>\n<p>每一个 VLAN 的帧都有一个明确的标识符，指明发送这个帧的工作站是属于哪一个 VLAN。(在以太网帧中插入一个 4 字节的标识符，称为 VLAN 标记)</p>\n<p><img data-src=\"https://s2.loli.net/2021/12/09/ier7sUByQbkouxL.png\" alt=\"image-20211209110309425\" /></p>\n",
            "tags": [
                "大三",
                "计算机网络",
                "计网"
            ]
        },
        {
            "id": "http://example.com/2021/12/07/%E5%A4%8D%E4%B9%A0/",
            "url": "http://example.com/2021/12/07/%E5%A4%8D%E4%B9%A0/",
            "title": "21/12/6 软件体系结构复习",
            "date_published": "2021-12-07T14:09:47.000Z",
            "content_html": "<h1 id=\"复习\"><a class=\"anchor\" href=\"#复习\">#</a> 复习</h1>\n<h2 id=\"1基本概念\"><a class=\"anchor\" href=\"#1基本概念\">#</a> 1. 基本概念</h2>\n<h3 id=\"软件体系结构\"><a class=\"anchor\" href=\"#软件体系结构\">#</a> 软件体系结构</h3>\n<p>系统的基本组织结构，包括系统构成要素，这些构成要素之间以及与环境之间的关系，系统设计及演化时所应遵循的原则</p>\n<h3 id=\"什么设计模式\"><a class=\"anchor\" href=\"#什么设计模式\">#</a> 什么设计模式？</h3>\n<h6 id=\"是一套被反复使用多数人知晓的经过分类编目的代码设计经验的总结\"><a class=\"anchor\" href=\"#是一套被反复使用多数人知晓的经过分类编目的代码设计经验的总结\">#</a> 是一套被反复使用，多数人知晓的，经过分类编目的，代码设计经验的总结.</h6>\n<h3 id=\"为什么要用设计模式\"><a class=\"anchor\" href=\"#为什么要用设计模式\">#</a> 为什么要用设计模式？</h3>\n<p>为了 &lt;u&gt; 可重用代码 &lt;/u&gt;, 让代码更容易 &lt; u &gt; 被他人理解 &lt;/u&gt;, 保证 &lt; u &gt; 代码可靠性 &lt;/u&gt;</p>\n<h3 id=\"非功能需求有哪些含义是什么\"><a class=\"anchor\" href=\"#非功能需求有哪些含义是什么\">#</a> 非功能需求有哪些？，含义是什么？</h3>\n<ol>\n<li>\n<p>性能</p>\n</li>\n<li>\n<p>可扩展性 / 伸缩性</p>\n</li>\n<li>\n<p>可维护性</p>\n</li>\n<li>\n<p>可用性</p>\n</li>\n<li>\n<p>安全性</p>\n</li>\n<li>\n<p>业务质量<br />\n成本，周期，投入的人力，需要的资源</p>\n</li>\n<li>\n<p>性能需求：用户在软件响应速度，结果精度，运行时资源消耗量等方面的要求</p>\n</li>\n<li>\n<p>可靠性需求：用户在软件失效的频率，严重程度，易恢复性，以及故障可预测性等方面的要求</p>\n</li>\n<li>\n<p>易用性要求：用户要求在界面的易用性，美观性，以及对面向用户的文档和培训资料等方面的要求</p>\n</li>\n<li>\n<p>安全性需求：用户在身份认证，授权控制，私密性等方面的要求</p>\n</li>\n<li>\n<p>运行环境约束：用户对软件系统运行环境的要求</p>\n</li>\n<li>\n<p>外部接口：用户对待开发的软件系统与其他软件系统或硬件设备之间的接口的要求</p>\n</li>\n<li>\n<p>可保障性要求：用户在软件可配置性，可扩展性，可维护性，可移植性方面的要求</p>\n</li>\n</ol>\n<h3 id=\"编程的三个层次\"><a class=\"anchor\" href=\"#编程的三个层次\">#</a> 编程的三个层次？</h3>\n<p>针对实现编程</p>\n<p>Dog d = new Dog();</p>\n<p>d.bark();</p>\n<p>针对接口 / 超类型编程</p>\n<p>Animal animal = new Dog();</p>\n<p>animal.makeSound();</p>\n<p>运行时才指定具体实现的对象</p>\n<p>a=getAnimal();</p>\n<p>a.makeSound();</p>\n<h3 id=\"设计模式的三大原则\"><a class=\"anchor\" href=\"#设计模式的三大原则\">#</a> 设计模式的三大原则</h3>\n<h6 id=\"单一职责\"><a class=\"anchor\" href=\"#单一职责\">#</a> 单一职责</h6>\n<p>一个类只负责一个功能领域中相应的职责，</p>\n<h6 id=\"依赖倒置\"><a class=\"anchor\" href=\"#依赖倒置\">#</a> 依赖倒置</h6>\n<p>针对接口编程，而非针对实现编程</p>\n<p>即程序中所有的依赖关系都是终止与抽象类或者直接接口.</p>\n<h6 id=\"开闭原则\"><a class=\"anchor\" href=\"#开闭原则\">#</a> 开闭原则</h6>\n<p>对拓展开放，对修改关闭</p>\n<h6 id=\"面向对象的三大原则\"><a class=\"anchor\" href=\"#面向对象的三大原则\">#</a> 面向对象的三大原则</h6>\n<h2 id=\"软件体系结构-2\"><a class=\"anchor\" href=\"#软件体系结构-2\">#</a> 软件体系结构</h2>\n<h3 id=\"分层风格\"><a class=\"anchor\" href=\"#分层风格\">#</a> 分层风格</h3>\n<p>指将软件设计成层次结构，每个层为其上层服务，同时又是其下层的客户，不允许隔层调用</p>\n<p>优点</p>\n<ol>\n<li>层次结构 支持基于随着层次不断增加而不断抽象的设计。能将一个复杂的问题分一系列从初等的与硬件相关的功能到可以被用户使用的高级功能.</li>\n<li>支持更新。每层只和两个层交互，因此，在接口不变的前提下，可以单独修改或更换某一层的某些组件而不影响其他层.</li>\n<li>支持复用.</li>\n</ol>\n<p>缺点</p>\n<ol>\n<li>不是什么系统都容易被组织成层次结构</li>\n<li>有时层次结构的逻辑上的较高层级和较低层级会有比较紧密的耦合</li>\n<li>正确的层次抽象往往可能很困难.</li>\n</ol>\n<h3 id=\"管道-过滤器风格\"><a class=\"anchor\" href=\"#管道-过滤器风格\">#</a> 管道 - 过滤器风格</h3>\n<p>每个过滤器都有一组输入和输出，组件读入输入数据流，经过数据处理，然后产生输出数据流.</p>\n<p>系统由负责运送数据的管道和负责对数据进行处理的过滤器组成</p>\n<p>优点</p>\n<ol>\n<li>高内聚低耦合</li>\n<li>允许设计者将整个系统的输入 / 输出行为看做是多个过滤器行为的简单合成</li>\n<li>支持软件重用</li>\n<li>系统维护和增强系统性能简单</li>\n<li>允许对一些如吞吐量，死锁等属性的分析</li>\n<li>支持并发</li>\n</ol>\n<p>缺点</p>\n<ol>\n<li>导致进程称为批处理结构</li>\n<li>不适合处理交互应用</li>\n<li>因为每个过滤器上都增加了解析和合成数据的工作，因此系统性能下滑，</li>\n</ol>\n<h3 id=\"主程序-子程序风格\"><a class=\"anchor\" href=\"#主程序-子程序风格\">#</a> 主程序 - 子程序风格</h3>\n<p>采取分而治之策略，将一个复杂的问题分解为多个独立的字问题</p>\n<h5 id=\"自顶向下功能化设计思想结构化设计\"><a class=\"anchor\" href=\"#自顶向下功能化设计思想结构化设计\">#</a> 自顶向下功能化设计思想 (结构化设计)</h5>\n<p>从功能需求出发，将一个整体问题分解为多个子问题，然后将子问题划分为几个更小的子问题，直到不可划分为止</p>\n<h6 id=\"优点\"><a class=\"anchor\" href=\"#优点\">#</a> 优点</h6>\n<ol>\n<li>逻辑设计与物理设计分开</li>\n<li>开发过程中形成一套规范化的文档，以便后期修改和维护</li>\n</ol>\n<p>适用于组织相对稳定，业务处理过程规范，需求明确且在一定时期内不会发生大的变化的大型复杂系统的开发.</p>\n<p>缺点：开发周期长，系统难以适应环境的变化及开发过程复杂繁琐</p>\n<p>功能演化困难，显示中的系统功能不容易描述，功能化设计丢掉了数据与数据结构，产生的可复用代码少.</p>\n<h3 id=\"面向对象软件体系结构\"><a class=\"anchor\" href=\"#面向对象软件体系结构\">#</a> 面向对象软件体系结构</h3>\n<p>系统看做由一些对象的集合构成，消息从一个对象发送到另外一个对象。每个对象都有其相关的功能</p>\n<p>对象是一个具有状态和行为的实体。一个对象存储它的状态在域中，面向对象设计隐藏对象的内部状态，并且要求所有对象之间的交互都通过该对象的方法，这叫做数据封装，是面向对象编程的基本原则.</p>\n<p>面向对象设计的特点</p>\n<ol>\n<li>封装性，限制对特定信息的访问</li>\n<li>继承性，共享同一个功能定义</li>\n<li>动态绑定性：在程序运行前，不知道创建哪个类的对象，运行时才动态生成</li>\n<li>复用和可维护性：因为封装与局部化</li>\n<li>系统功能通过对象服务表示：对象的接口提供了一系列的方法.</li>\n<li>共享数据区域被取消</li>\n<li>对象可以是分布的。通过函数或者方法调用互相交互.</li>\n<li>对象是对现实世界的抽象并且可以自己管理自己.</li>\n</ol>\n<p>优缺点</p>\n<p>优点:</p>\n<ol>\n<li>容易维护</li>\n<li>可复用性好</li>\n<li>映射现实世界</li>\n<li>容易对一个系统进行剖分</li>\n</ol>\n<p>缺点</p>\n<ol>\n<li>占用欧冠内存较大。因为每个新被创建的对象都必须占用一块内存，而面向对象程序中，往往有大量对象被创建</li>\n<li>一个对象要和另外一个对象交互，该对象必须知道另外一个对象的身份，包括对象名，方法名和参数类型等.</li>\n</ol>\n<h3 id=\"基于共享数据的事件风格\"><a class=\"anchor\" href=\"#基于共享数据的事件风格\">#</a> 基于共享数据的事件风格</h3>\n<ol>\n<li>系统中的每个组件可以注册一种事件</li>\n<li>当一个组件要发布事件时，该组件可以广播一个或多个事件到事件空间</li>\n<li>每当一个事件被广播了，系统将负责自动调用那些已经注册了该事件的组件或者过程，被调用的组件将运行.</li>\n</ol>\n<h2 id=\"2设计模式\"><a class=\"anchor\" href=\"#2设计模式\">#</a> 2. 设计模式</h2>\n<h3 id=\"mvc模式\"><a class=\"anchor\" href=\"#mvc模式\">#</a> mvc 模式</h3>\n<p>model 包含核心数据和功能，独立于输入行为和输出表示</p>\n<p>View 将模型中的数据显示给用户</p>\n<p>Controller 处理用户输入，如果用户通过一个 view 的 controller 改变了 model, 其他 controller 必须反映出该改变，即当数据发生变化的时候，model 负责同志所有的 view, 告诉他们数据已经改变了.(观察者模式，model 对象是被观察者，controller 是观察者)</p>\n<h4 id=\"优缺点\"><a class=\"anchor\" href=\"#优缺点\">#</a> 优缺点</h4>\n<p>优点</p>\n<ol>\n<li>对于同一个模型，可以有不同的视图和控制器，一遍提供给用户不同类型的用户图形界面</li>\n<li>改变 - 传播机制保证了模型在改变的同时自动刷新所有的视图</li>\n<li>mvc 体系结构的设计使的改变图形界面非常容易，适合业务逻辑较少改变，而图形界面需要经常改变的应用</li>\n<li>全部的核心数据和核心功能都包含在模型中，很容易对核心的应用进行测试</li>\n<li>可拓展性比较好</li>\n</ol>\n<h3 id=\"命令模式\"><a class=\"anchor\" href=\"#命令模式\">#</a> 命令模式</h3>\n<p>三个部件</p>\n<p>客户程序</p>\n<p>调用者程序</p>\n<p>被调用者程序</p>\n<p>解除调用者类与被调用者类的耦合 -- 为响应客户新请求的行动创建一个抽象</p>\n<p>client 对象负责初始化 Command 对象，并且提供将来要调用的方法的全部信息</p>\n<p>Invoker 决定什么时候调用所要调用的方法</p>\n<p>receiver 是含有索要调用方法的代码的实例</p>\n<h3 id=\"3期末复习\"><a class=\"anchor\" href=\"#3期末复习\">#</a> 3. 期末复习</h3>\n",
            "tags": [
                "大三",
                "软件",
                "软件体系结构"
            ]
        },
        {
            "id": "http://example.com/2021/12/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",
            "url": "http://example.com/2021/12/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",
            "title": "21/12/6 软件体系结构复习-设计模式",
            "date_published": "2021-12-07T14:09:47.000Z",
            "content_html": "<h3 id=\"策略模式\"><a class=\"anchor\" href=\"#策略模式\">#</a> 策略模式</h3>\n<h6 id=\"基本原则责任分离高内聚低耦合\"><a class=\"anchor\" href=\"#基本原则责任分离高内聚低耦合\">#</a> 基本原则：责任分离 + 高内聚低耦合</h6>\n<h4 id=\"各部分组成及说明\"><a class=\"anchor\" href=\"#各部分组成及说明\">#</a> 各部分组成及说明</h4>\n<ol>\n<li>strategy: 定义了一个共同的接口，所有的具体算法类实现这个接口。换进该类 context 调用这个接口调用具体的算法类</li>\n<li>ConcreteStragety 封装了具体的算法，实现统一个几口</li>\n<li>Context 环境类。用于配置一个具体的算法策略对象，维持一个策略接口类型的参考，并且可以定义一个让接口 Strategy 的具体对象访问的接口 (可省略)</li>\n</ol>\n<h4 id=\"使用策略模式的情况\"><a class=\"anchor\" href=\"#使用策略模式的情况\">#</a> 使用策略模式的情况</h4>\n<ol>\n<li>当有多个行为上不同但是相关的类存在.</li>\n<li>当某个算法使用用户不该知道的数据时，使用策略模式可以将算法实现细节隐藏起来.</li>\n<li>当一个类有多种行为，这些行为以大块的条件语句实现时，可以将这些条件块移入他们自己的 Strategy 类中</li>\n</ol>\n<h5 id=\"使用策略模式的出发点\"><a class=\"anchor\" href=\"#使用策略模式的出发点\">#</a> 使用策略模式的出发点</h5>\n<ol>\n<li>将一组相关的算法封装为各个策略分支，从而将策略分支相关的代码隐藏起来</li>\n<li>提升程序的可拓展性</li>\n</ol>\n<h4 id=\"优点\"><a class=\"anchor\" href=\"#优点\">#</a> 优点</h4>\n<ol>\n<li>得到一系列可服用的算法，这些算法继承一个共同的抽象类，因此公有的功能可以放到超类中</li>\n<li>将不同算法封装在不同的策略子类中，使逻辑更加清晰，各个算法可以独立地变化</li>\n<li>是功能改变或拓展变得更容易</li>\n</ol>\n<h2 id=\"创建型模式\"><a class=\"anchor\" href=\"#创建型模式\">#</a> 创建型模式</h2>\n<h3 id=\"工厂模式\"><a class=\"anchor\" href=\"#工厂模式\">#</a> 工厂模式</h3>\n<h4 id=\"简单工厂\"><a class=\"anchor\" href=\"#简单工厂\">#</a> 简单工厂</h4>\n<p><img data-src=\"https://img-blog.csdn.net/20180609213904662\" alt=\"img\" /></p>\n<h5 id=\"各组成部分的功能\"><a class=\"anchor\" href=\"#各组成部分的功能\">#</a> 各组成部分的功能</h5>\n<ol>\n<li>Creater 核心，包含应用程序锁需要的业务逻辑。同时负责委托工厂生产对象</li>\n<li>Product 接口 / 抽象类 是具体子类的超类 / 接口</li>\n<li>ConcreteProduct 实现 Product 接口 / 继承 Product 抽象类</li>\n</ol>\n<h5 id=\"优点-2\"><a class=\"anchor\" href=\"#优点-2\">#</a> 优点</h5>\n<ol>\n<li>\n<p>工厂方法包含从一个类的结构中选择初始类的业务逻辑</p>\n</li>\n<li>\n<p>客户类不直接创建产品类的对象，值作为对象的消费者</p>\n</li>\n<li>\n<p>实现了责任分离</p>\n</li>\n<li>\n<p>如果有新产品子类加入，不必修改客户类 (前提是客户类不用新产品)</p>\n</li>\n<li>\n<p>因为 1, 所以客户类不需要繁杂的逻辑判断</p>\n</li>\n</ol>\n<h5 id=\"缺点\"><a class=\"anchor\" href=\"#缺点\">#</a> 缺点</h5>\n<ol>\n<li>增加产品类时，要修改工厂类</li>\n<li>因为工厂类的工厂方法是静态的，所以工厂类中的方法不能被继承，因此只能承载一个单独的类群，而不是一个有多层结构的类</li>\n</ol>\n<h6 id=\"为了解决简单工厂的缺点-工厂方法\"><a class=\"anchor\" href=\"#为了解决简单工厂的缺点-工厂方法\">#</a> 为了解决简单工厂的缺点 --- 工厂方法</h6>\n<h4 id=\"工厂方法\"><a class=\"anchor\" href=\"#工厂方法\">#</a> 工厂方法</h4>\n<h6 id=\"核心思想将简单工厂中单一的工厂类改写成一个层次类\"><a class=\"anchor\" href=\"#核心思想将简单工厂中单一的工厂类改写成一个层次类\">#</a> 核心思想：将简单工厂中单一的工厂类改写成一个层次类</h6>\n<p>&lt;img src=&quot;C:\\Users\\www13\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211114142203065.png&quot; alt=&quot;image-20211114142203065&quot; style=&quot;zoom: 50%;&quot; /&gt;</p>\n<h5 id=\"类图解释\"><a class=\"anchor\" href=\"#类图解释\">#</a> 类图解释</h5>\n<p>Creater: 接口，含有一个 factory 方法，然后可以用和产品类相同的结构产生创建者类结构，其中包含 CreaterA 和 CreaterB</p>\n<p>CreaterA/B: 负责创建对应的 ProductA 和 ProductB 的对象</p>\n<h5 id=\"和简单工厂的相同之处\"><a class=\"anchor\" href=\"#和简单工厂的相同之处\">#</a> 和简单工厂的相同之处</h5>\n<ol>\n<li>方法模式一样，工厂方法也返回一个属于父类 Product 类型的对象，客户不必知道返回对象的具体类型</li>\n</ol>\n<h5 id=\"和简单工厂的区别\"><a class=\"anchor\" href=\"#和简单工厂的区别\">#</a> 和简单工厂的区别</h5>\n<ol>\n<li>中心不同。工厂方法的中心是抽象工厂类 / 接口，而简单工厂方法的中心是一个实的工厂类<br />\n在简单工厂的工厂方法是静态的，而工厂方法是动态的</li>\n<li>简单工厂方法不支持开闭原则。而工厂方法支持.<br />\n 简单工厂增加产品类：在工厂类中也应增加条件语句<br />\n工厂方法增加产品类：在 Product 类的结构体重增加一个实体，在工厂类层次结构体中增加一个相应的能产生该新产品对象的实类</li>\n<li>工厂方法工厂类不必包含创建对象的逻辑判断</li>\n</ol>\n<h5 id=\"使用工厂方法的情况\"><a class=\"anchor\" href=\"#使用工厂方法的情况\">#</a> 使用工厂方法的情况</h5>\n<ol>\n<li>创建某些类的对象的逻辑比较复杂，并且有很多条件分支</li>\n<li>一个类不能准确预知它要创建一个层次类中哪个子类的对象</li>\n<li>一个类使用子类决定要创建的对象</li>\n<li>需要封装创建类的对象的逻辑，使这些逻辑局部化</li>\n</ol>\n<h4 id=\"抽象工厂模式\"><a class=\"anchor\" href=\"#抽象工厂模式\">#</a> 抽象工厂模式</h4>\n<h5 id=\"类图\"><a class=\"anchor\" href=\"#类图\">#</a> 类图</h5>\n<p><img data-src=\"G:%5CApp%5CQQ%5CQQ_Chat_File%5C1335894629%5CFileRecv%5CMobileFile%5CIMG_20211114_144057_edit_205109997971306.jpg\" alt=\"IMG_20211114_144057_edit_205109997971306\" /></p>\n<h5 id=\"抽象工厂模式中包含\"><a class=\"anchor\" href=\"#抽象工厂模式中包含\">#</a> 抽象工厂模式中包含</h5>\n<ol>\n<li>一系列互相有关联的产品类，(有相同的结构)</li>\n<li>一系列实的工厂类，实现由抽象工厂提供的接口。他们各自生产一组相关的产品类对象</li>\n</ol>\n<h6 id=\"当客户对象要从一个相关的产品组中创建一个对象而没有必要知道到底创建哪个对象时使用抽象工厂\"><a class=\"anchor\" href=\"#当客户对象要从一个相关的产品组中创建一个对象而没有必要知道到底创建哪个对象时使用抽象工厂\">#</a> 当客户对象要从一个相关的产品组中创建一个对象，而没有必要知道到底创建哪个对象时使用抽象工厂</h6>\n<h6 id=\"抽象工厂方法不符合开闭原则-增加一个新产品层次类则必须在每个工厂实类中增加方法\"><a class=\"anchor\" href=\"#抽象工厂方法不符合开闭原则-增加一个新产品层次类则必须在每个工厂实类中增加方法\">#</a> 抽象工厂方法不符合开闭原则 -- 增加一个新产品层次类，则必须在每个工厂实类中增加方法</h6>\n<h3 id=\"装饰者模式\"><a class=\"anchor\" href=\"#装饰者模式\">#</a> 装饰者模式</h3>\n<p>提供一个比继承更加灵活的方案</p>\n<p>类图</p>\n<p><img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211114145247937.png\" alt=\"image-20211114145247937\" /></p>\n<h3 id=\"访问者模式\"><a class=\"anchor\" href=\"#访问者模式\">#</a> 访问者模式</h3>\n<h6 id=\"解决问题-对一个已经完成设计与diamante编写的类的层次结构进行功能修改或增加新功能\"><a class=\"anchor\" href=\"#解决问题-对一个已经完成设计与diamante编写的类的层次结构进行功能修改或增加新功能\">#</a> 解决问题 -- 对一个已经完成设计与 diamante 编写的类的层次结构进行功能修改或增加新功能</h6>\n<p><img data-src=\"G:%5CApp%5CQQ%5CQQ_Chat_File%5C1335894629%5CFileRecv%5CMobileFile%5CIMG_20211114_150707.jpg\" alt=\"IMG_20211114_150707\" /></p>\n<h4 id=\"类图解释-2\"><a class=\"anchor\" href=\"#类图解释-2\">#</a> 类图解释</h4>\n<ol>\n<li>\n<p>VIsitor: 为每个 element 的类声明了一个访问操作</p>\n</li>\n<li>\n<p>concreteVisitor: 实现 Visitor 声明的运算</p>\n</li>\n<li>\n<p>Element: 定义了一些基本的方法，包含提供基本数据的方法.<br />\n 重要的是，它的子类必须定义一个接收者方法，为被访问者对象和访问者对象之间提供接口</p>\n</li>\n<li>\n<p>ConcreteElement : 具体的 Element 的子类</p>\n</li>\n<li>\n<p>ObjectStructure 提供一个高层接口，允许访问者访问 Element 的子类., 提供一个访问列表</p>\n</li>\n</ol>\n<h4 id=\"使用访问者模式的情况\"><a class=\"anchor\" href=\"#使用访问者模式的情况\">#</a> 使用访问者模式的情况</h4>\n<ol>\n<li>当一个对象的结构中，包含有多种类型的具有不同接口的对象，且用户要在这些对象上进行依赖于具体的类的运算</li>\n<li>当有多个不同的并且互不相关的运算将作用域这些对象上，且用户不希望这些运算混淆这些类时</li>\n<li>当对象的数据类型很少改变，但需要经常改变操作或增加新操作的情况下.</li>\n</ol>\n<h2 id=\"状态模式\"><a class=\"anchor\" href=\"#状态模式\">#</a> 状态模式</h2>\n<p>将不同状态下的行为封装在不同的类中，每个类代表一个状态</p>\n<p>使用场景:</p>\n<p>当一个类依赖于状态，那么程序员在描述该对象的类中通常会使用很多条件语句，<br />\n 这时，使用状态模式可以有效消除条件语句并使得状态转换非常清楚</p>\n<h6 id=\"gang-of-four的定义\"><a class=\"anchor\" href=\"#gang-of-four的定义\">#</a> GANG OF FOUR 的定义:</h6>\n<h6 id=\"允许一个对象在其内部状态改变时改变其行为这个对象看起来似乎修改了它的类\"><a class=\"anchor\" href=\"#允许一个对象在其内部状态改变时改变其行为这个对象看起来似乎修改了它的类\">#</a> 允许一个对象在其内部状态改变时，改变其行为。这个对象看起来似乎修改了它的类</h6>\n<h6 id=\"类图-2\"><a class=\"anchor\" href=\"#类图-2\">#</a> 类图</h6>\n<p><img data-src=\"G:%5CApp%5CQQ%5CQQ_Chat_File%5C1335894629%5CFileRecv%5CMobileFile%5CIMG_20211121_185300.jpg\" alt=\"IMG_20211121_185300\" /></p>\n<p>各组件描述:</p>\n<p>Context: 定义了和客户程序的接口，它保持了一个 ConcreteState 的代表现在状态的<strong>实例</strong></p>\n<p>State: 状态接口，子类封装各个状态下行为<br />\n ConcreteState:State 的子类</p>\n<p>使用状态模式的情况</p>\n<ol>\n<li>对象的行为依赖于状态，对象再运行时改变状态</li>\n<li>操作有大量依赖于状态的条件语句</li>\n</ol>\n<p>优点</p>\n<ol>\n<li>容易添加新的状态 (因为封装在子类),</li>\n<li>状态迁移很明确</li>\n</ol>\n<h2 id=\"桥接模式\"><a class=\"anchor\" href=\"#桥接模式\">#</a> 桥接模式</h2>\n<h6 id=\"将对象的继承转为对象的组合\"><a class=\"anchor\" href=\"#将对象的继承转为对象的组合\">#</a> 将对象的继承转为对象的组合</h6>\n<h5 id=\"将一个软件设计的抽象部分和实现部分分离使它们都可以独立地变化\"><a class=\"anchor\" href=\"#将一个软件设计的抽象部分和实现部分分离使它们都可以独立地变化\">#</a> 将一个软件设计的抽象部分和实现部分分离，使它们都可以独立地变化.</h5>\n<p>类图<img data-src=\"G:%5CApp%5CQQ%5CQQ_Chat_File%5C1335894629%5CFileRecv%5CMobileFile%5CIMG_20211121_192040.jpg\" alt=\"IMG_20211121_192040\" /></p>\n<p>各部分解释</p>\n<ol>\n<li>Abstraction 接口，定义抽象部分的接口，为吃 Implementor 对象的一个参考</li>\n<li>RefinedAbstraction, 继承或者实现 Abstraction</li>\n<li>Implementor: 定义 Implementation 类的接口，接口形式可以不和 Abstraction 界面严格对应</li>\n<li>ConcreteImplementor: 实现 Implementor 接口</li>\n</ol>\n<p>优点</p>\n<ol>\n<li>分离接口和实现部分，</li>\n<li>提高了可扩展性</li>\n<li>实现了细节对客户的透明</li>\n</ol>\n<h2 id=\"适配器模式\"><a class=\"anchor\" href=\"#适配器模式\">#</a> 适配器模式</h2>\n<p>目的：解决接口不一致</p>\n<p>分为类适配器模式和对象适配器模式</p>\n<p>类图</p>\n<p><img data-src=\"G:%5CApp%5CQQ%5CQQ_Chat_File%5C1335894629%5CFileRecv%5CMobileFile%5CIMG_20211121_193024_edit_222571278535829.jpg\" alt=\"IMG_20211121_193024_edit_222571278535829\" /></p>\n<p>类适配器：写一个 target 接口声明所有需要的方法，写一个 adaptor 类继承 adapee 类，并且实现接口 target</p>\n<p>对象适配器：写一个 target 接口声明所有需要的方法，采用聚合的方法来实现 adaptee 类中的方法</p>\n<p>使用适配器模式的情况</p>\n<ol>\n<li>想要使用现有的类，但现有类的接口不符合需求</li>\n<li>当需要通过创建一个可服用的类，是的本来接口不相容且无关的类结合在一起工作时</li>\n<li>在设计中需要改变多个子类接口，在作用相同但名称不同的类或方法之间进行适配时.</li>\n</ol>\n<h3 id=\"mvc\"><a class=\"anchor\" href=\"#mvc\">#</a> MVC</h3>\n<ul>\n<li>视图：管理作为位图展示到屏幕上的图形和文字输出；</li>\n<li>控制器：翻译用户的输入并依照用户的输入操作模型和视图；</li>\n<li>模型：管理应用的行为和数据，响应数据请求（经常来自视图）和更新状态的指令（经常来自控制器）；</li>\n</ul>\n<p>如果用户通过一个 View 的 Controller 改变了 Model, 所有其他的 View 都必须反映出该改变.</p>\n<p>当数据发生变化的时候，Model 负责通知所有的 View, 告诉他们数据已经改变了</p>\n",
            "tags": [
                "大三",
                "软件",
                "软件体系结构"
            ]
        },
        {
            "id": "http://example.com/2021/12/07/android%E4%B8%8E%E8%85%BE%E8%AE%AF%E4%BA%91mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5-windows/",
            "url": "http://example.com/2021/12/07/android%E4%B8%8E%E8%85%BE%E8%AE%AF%E4%BA%91mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5-windows/",
            "title": "未继续_android与腾讯云mysql数据库连接_windows",
            "date_published": "2021-12-07T13:54:50.000Z",
            "content_html": "<p>第一步</p>\n<blockquote>\n<p>购买一个腾讯云服务</p>\n<p><img data-src=\"https://s2.loli.net/2021/12/07/u7yYjh39kGZfp8X.png\" alt=\"image-20211207215535055\" /></p>\n<p>然后初始化 (请记住密码)</p>\n<p><img data-src=\"https://s2.loli.net/2021/12/07/UlmbJ9cSR8NHkAe.png\" alt=\"image-20211207221439709\" /></p>\n<p>开启外网地址 (不然怎么连</p>\n<p><img data-src=\"https://s2.loli.net/2021/12/07/Tijutps6K3ZB1wg.png\" alt=\"image-20211207222027892\" /></p>\n</blockquote>\n<p>第二步，下载 androidstudio</p>\n<p><img data-src=\"https://s2.loli.net/2021/12/07/aAXyWbjZR6c2uht.png\" alt=\"image-20211207215837466\" /></p>\n<p>第三步，下载对应数据库版本的 jdbc, 我的腾讯云是 mysql8</p>\n<blockquote>\n<p>jdbc 位置是</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubXlzcWwuY29tL3Byb2R1Y3RzL2Nvbm5lY3Rvci8=\">MySQL :: MySQL Connectors</span></p>\n<p>打开之后长这样，下载 JDBC</p>\n<p><img data-src=\"https://s2.loli.net/2021/12/07/UnWrX4BHD5PFTpR.png\" alt=\"image-20211207215936667\" /></p>\n<p>这儿选 platform independent, 然后点第二个下载</p>\n<p><img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211207220401699.png\" alt=\"image-20211207220401699\" /></p>\n<p>解压之后能看到这个东西</p>\n<p><img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211207220521395.png\" alt=\"image-20211207220521395\" /></p>\n<ol start=\"4\">\n<li>把上面那玩意引入 android</li>\n</ol>\n<p>首先在 project 底下的 app 文件夹的子目录找到 libs 文件夹，把那个 jdbc 的 jar 包拖进去</p>\n<p><img data-src=\"https://s2.loli.net/2021/12/07/Qupag1AD3JFYfB6.png\" alt=\"image-20211207221048176\" /></p>\n<p>如果没有，把左上角的这个调成 ProjectFiles 看看，还没有就自己新建一个</p>\n<p><img data-src=\"https://s2.loli.net/2021/12/07/kJ6CrM37XSUsbQI.png\" alt=\"image-20211207221113280\" /></p>\n<p>右键它，选择 add as library</p>\n<p><img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211207221300723.png\" alt=\"image-20211207221300723\" /></p>\n</blockquote>\n",
            "tags": [
                "大三",
                "失败",
                "android"
            ]
        },
        {
            "id": "http://example.com/2021/12/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0/",
            "url": "http://example.com/2021/12/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0/",
            "title": "计算机网络复习",
            "date_published": "2021-12-07T05:10:23.000Z",
            "content_html": "<ol>\n<li>在内存中开辟一个虚拟磁盘空间作为文件存储器，在其上实现一个简单的单用户文件系统。在退出这个简单的文件系统时，将该虚拟文件系统保存到磁盘上，以便下次再将它恢复到内存的虚拟磁盘空间中。</li>\n<li>提供以下操作：</li>\n</ol>\n<ul>\n<li>\n<p>new：建立一个新的简单文件系统；</p>\n</li>\n<li>\n<p>sfs：打开一个简单文件系统；</p>\n</li>\n<li>\n<p>exit：退出打开的简单文件系统；</p>\n</li>\n<li>\n<p>mkdir：创建子目录；</p>\n</li>\n<li>\n<p>rmdir：删除子目录；</p>\n</li>\n<li>\n<p>ls：显示目录；</p>\n</li>\n<li>\n<p>cd：更改当前目录；</p>\n</li>\n<li>\n<p>create：创建文件；</p>\n</li>\n<li>\n<p>open：打开文件；</p>\n</li>\n<li>\n<p>close：关闭文件；</p>\n</li>\n<li>\n<p>read：读文件；</p>\n</li>\n<li>\n<p>write：写文件；</p>\n</li>\n<li>\n<p>delete：删除文件。</p>\n<p>\\3. 打包提交以下材料：实验报告（含处理流程）、源文件、可执行文件、使用说明。文件命名：学号 + 姓名 + 实验 4</p>\n</li>\n</ul>\n",
            "tags": [
                "大三",
                "计算机网络",
                "计算机网络"
            ]
        },
        {
            "id": "http://example.com/2021/12/07/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/",
            "url": "http://example.com/2021/12/07/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/",
            "title": "更新日志",
            "date_published": "2021-12-07T04:51:32.000Z",
            "content_html": "<h3 id=\"2021126\"><a class=\"anchor\" href=\"#2021126\">#</a> 2021/12/6</h3>\n<blockquote>\n<p>创建站</p>\n<p>链接评论服务</p>\n<p>更新域名 <span class=\"exturl\" data-url=\"aHR0cDovL25pYW5tZWlodWFpbmlhbi5jb20=\">nianmeihuainian.com</span></p>\n<p>更改主题</p>\n</blockquote>\n<h3 id=\"2021127\"><a class=\"anchor\" href=\"#2021127\">#</a> 2021/12/7</h3>\n<blockquote>\n<p>评论区恢复</p>\n<p>修改打赏图</p>\n<p>修改主题图片</p>\n<p>修复搜索功能</p>\n</blockquote>\n",
            "tags": [
                "log"
            ]
        },
        {
            "id": "http://example.com/2021/12/07/%E5%A4%96%E8%AE%BE/",
            "url": "http://example.com/2021/12/07/%E5%A4%96%E8%AE%BE/",
            "title": "21/12/7 设备管理",
            "date_published": "2021-12-07T00:43:00.000Z",
            "content_html": "<h1 id=\"设备管理\"><a class=\"anchor\" href=\"#设备管理\">#</a> 设备管理</h1>\n<h2 id=\"1-控制器\"><a class=\"anchor\" href=\"#1-控制器\">#</a> 1. 控制器</h2>\n<h6 id=\"控制器的任务是在外设与内存之间完成比特流与字节块之间的转换\"><a class=\"anchor\" href=\"#控制器的任务是在外设与内存之间完成比特流与字节块之间的转换\">#</a> 控制器的任务是在外设与内存之间完成比特流与字节块之间的转换</h6>\n<h3 id=\"11寄存器\"><a class=\"anchor\" href=\"#11寄存器\">#</a> 1.1 寄存器</h3>\n<p>每个控制器有几个寄存器，操作系统可以往里写东西</p>\n<h3 id=\"12数据缓冲区\"><a class=\"anchor\" href=\"#12数据缓冲区\">#</a> 1.2 数据缓冲区</h3>\n<p>有些控制器上有，用于大数据传输</p>\n<h4 id=\"121磁盘控制器\"><a class=\"anchor\" href=\"#121磁盘控制器\">#</a> 1.2.1 磁盘控制器</h4>\n<p>将位流组装为字节存入缓冲区中，形成字节为单位的块</p>\n<h2 id=\"2控制方式\"><a class=\"anchor\" href=\"#2控制方式\">#</a> 2. 控制方式</h2>\n<h4 id=\"21-程序直接控制\"><a class=\"anchor\" href=\"#21-程序直接控制\">#</a> 2.1 程序直接控制</h4>\n<p>cpu 控制全过程</p>\n<p>效率低下 (CPU 一直在等)</p>\n<h4 id=\"22中断控制\"><a class=\"anchor\" href=\"#22中断控制\">#</a> 2.2 中断控制</h4>\n<p>cpu 发送指令，去干别的，等 io 设备准备好，利用中断通知 cpu</p>\n<h4 id=\"23-dma方式适合高速大量的外设\"><a class=\"anchor\" href=\"#23-dma方式适合高速大量的外设\">#</a> 2.3 DMA 方式 (适合高速大量的外设)</h4>\n<p>cpu 启动指令 -&gt;DMA 控制器 -&gt;(data)-&gt; 启动外设</p>\n<p>整个数据的传输都是在 DMA 控制下进行的</p>\n<h4 id=\"24通道控制方式\"><a class=\"anchor\" href=\"#24通道控制方式\">#</a> 2.4 通道控制方式</h4>\n<p>cpu 连接多个通道，通道连接多个控制器，再连接外部设备</p>\n<p>imgtest</p>\n<h2 id=\"3设备io子系统\"><a class=\"anchor\" href=\"#3设备io子系统\">#</a> 3. 设备 I/o 子系统</h2>\n<p>申请设备</p>\n<p>将数据写入设备</p>\n<p>从设备读取数据</p>\n<p>释放设备</p>\n<h4 id=\"分时式共享使用设备\"><a class=\"anchor\" href=\"#分时式共享使用设备\">#</a> 分时式共享使用设备</h4>\n<p>以一次 IO 为单位分时使用设备</p>\n<h4 id=\"spooling方式使用外设\"><a class=\"anchor\" href=\"#spooling方式使用外设\">#</a> SPOOLING 方式使用外设</h4>\n<p>利用磁盘上的输入输出并模拟高速外设</p>\n<h3 id=\"io的组成\"><a class=\"anchor\" href=\"#io的组成\">#</a> IO 的组成</h3>\n<p>I.O 交通管制程序</p>\n<p>调度程序</p>\n<p>设备处理程序</p>\n<h6 id=\"基本思想分层构建较低层为较高层服务使较高层独立于硬件为用户提供统一接口\"><a class=\"anchor\" href=\"#基本思想分层构建较低层为较高层服务使较高层独立于硬件为用户提供统一接口\">#</a> 基本思想：分层构建，较低层为较高层服务，使较高层独立于硬件，为用户提供统一接口</h6>\n<h4 id=\"io设计目标\"><a class=\"anchor\" href=\"#io设计目标\">#</a> I/O 设计目标</h4>\n<blockquote>\n<p><strong>设备独立性</strong> -- 使软硬件相对独立，给上层软件更好的可移植性</p>\n<p><strong>设备统一命名</strong> - 每种设备都是有名称的，如何命名以方便系统管理和用户使用是一个重要的问题</p>\n<p>采取预先设计的，统一的逻辑名称</p>\n<p><strong>出错处理</strong>：数据尽可能在接近硬件层处理，仅当低层无能为力时，才将错误上交</p>\n<p><strong>缓冲技术</strong>：设法使数据的到达率和离去率匹配，提高系统的吞吐量</p>\n<p><strong>设备的分配</strong>：共享设备和独占设备的分配问题</p>\n</blockquote>\n",
            "tags": [
                "大三",
                "操作系统",
                "操作系统"
            ]
        },
        {
            "id": "http://example.com/2021/12/07/%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/",
            "url": "http://example.com/2021/12/07/%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/",
            "title": "21/12/7 存储管理-操作系统",
            "date_published": "2021-12-07T00:43:00.000Z",
            "content_html": "<h1 id=\"存储管理\"><a class=\"anchor\" href=\"#存储管理\">#</a> 存储管理</h1>\n<h4 id=\"地址访问保护机制\"><a class=\"anchor\" href=\"#地址访问保护机制\">#</a> 地址访问保护机制</h4>\n<ol>\n<li>\n<h5 id=\"上下界寄存器和地址检查机制\"><a class=\"anchor\" href=\"#上下界寄存器和地址检查机制\">#</a> 上下界寄存器和地址检查机制</h5>\n</li>\n</ol>\n<p>​\t\t作业拥有上下界，执行访存指令时，判断是否越界</p>\n<p>​\t\t要求：作业程序是<strong>绝对地址</strong>或<strong>静态可浮动</strong></p>\n<h5 id=\"2-基址寄存器-长度寄存器和动态地址转换机制\"><a class=\"anchor\" href=\"#2-基址寄存器-长度寄存器和动态地址转换机制\">#</a> 2. 基址寄存器、长度寄存器和动态地址转换机制</h5>\n<p>​\t\t<strong>当作业被调度运行时，将作业所占内存基址及长度送基址、长度寄存器，在用户态每次执行访存指令时，先看访问地址是否小于长度，然后 + 基址进行访存。用户程序代码是</strong>动态浮动的</p>\n<h2 id=\"可变分区\"><a class=\"anchor\" href=\"#可变分区\">#</a> 可变分区</h2>\n<h6 id=\"思想预先不划分内存当作业需要时向系统申请系统从其中挖出一块给该作业\"><a class=\"anchor\" href=\"#思想预先不划分内存当作业需要时向系统申请系统从其中挖出一块给该作业\">#</a> 思想:<strong> 预先不划分内存，当作业需要时向系统申请，系统从其中挖出一块给该作业</strong></h6>\n<p>Q:&lt;u&gt; 空闲区域如何管理 &lt;/u&gt;?</p>\n<h3 id=\"多道连续可变分区法\"><a class=\"anchor\" href=\"#多道连续可变分区法\">#</a> <strong>多道连续可变分区法</strong></h3>\n<h5 id=\"特点多道连续不固定划分内存\"><a class=\"anchor\" href=\"#特点多道连续不固定划分内存\">#</a> 特点：多道，连续，不固定划分内存</h5>\n<h5 id=\"管理方法\"><a class=\"anchor\" href=\"#管理方法\">#</a> 管理方法</h5>\n<p><strong>系统设置一个空闲块队列，初始状态时队列中只有一个连续的空闲块。作业到达后，以</strong>某种策略分配空间。作业撤离时，将释放的空间加入空闲队列。</p>\n<h5 id=\"释放方法\"><a class=\"anchor\" href=\"#释放方法\">#</a> 释放方法</h5>\n<p>相邻合并，否则插入</p>\n<h5 id=\"例一\"><a class=\"anchor\" href=\"#例一\">#</a> 例一</h5>\n<p>进入执行顺序：(1,2,3)-&gt;(4)-&gt;(5)</p>\n<p><img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211112134311512.png\" alt=\"image-20211112134311512\" /></p>\n<h4 id=\"分配方法\"><a class=\"anchor\" href=\"#分配方法\">#</a> 分配方法</h4>\n<ol>\n<li>首次满足法 从头到尾找，找到的第一个满足它的空间就给它</li>\n<li>最佳满足法 从队列中找一个最接近的空闲队列给它</li>\n<li>最大满足法 每次找最大的空间给最新创建的进程</li>\n</ol>\n<h4 id=\"可用空间管理\"><a class=\"anchor\" href=\"#可用空间管理\">#</a> 可用空间管理</h4>\n<h5 id=\"紧致机制-将已有的进程挪到一起腾出大块的连续空间\"><a class=\"anchor\" href=\"#紧致机制-将已有的进程挪到一起腾出大块的连续空间\">#</a> 紧致机制 -- 将已有的进程挪到一起，腾出大块的连续空间</h5>\n<h5 id=\"可再定位式分区-浮动分区分配\"><a class=\"anchor\" href=\"#可再定位式分区-浮动分区分配\">#</a> 可再定位式分区 -- 浮动分区分配</h5>\n<h2 id=\"页式存储管理\"><a class=\"anchor\" href=\"#页式存储管理\">#</a> 页式存储管理</h2>\n<h6 id=\"解决作业不连续存放的问题\"><a class=\"anchor\" href=\"#解决作业不连续存放的问题\">#</a> 解决作业不连续存放的问题</h6>\n<p><strong>特点：</strong> <strong>作业</strong> <strong>(进程)</strong> <strong>分成页面，内存也划分成页面，将作业</strong> **(进程 **) <strong>页面不连续地分布到内存页面</strong></p>\n<p><img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211112140406228.png\" alt=\"image-20211112140406228\" /></p>\n<h5 id=\"基本原理\"><a class=\"anchor\" href=\"#基本原理\">#</a> 基本原理</h5>\n<p><img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211112140441074.png\" alt=\"image-20211112140441074\" /></p>\n<p><img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211112141149243.png\" alt=\"image-20211112141149243\" /></p>\n<p><strong>分页逻辑地址</strong> <strong>= P (页号).d (</strong>  <strong>页内位移</strong> ** ) **</p>\n<p><strong>分页物理地址</strong> <strong>= f(<strong><strong>页帧号</strong></strong>).d (<strong><strong>同上</strong></strong>)</strong></p>\n<p><strong>P =</strong> <strong>线性逻辑地址</strong> <strong>/</strong> <strong>页面大小；</strong></p>\n<p><strong>d =</strong> <strong>线性逻辑地址</strong> **- P***<strong> 页面大小。</strong></p>\n<h6 id=\"为什么是2的k次幂\"><a class=\"anchor\" href=\"#为什么是2的k次幂\">#</a> 为什么是 2 的 k 次幂？</h6>\n<p>将乘除法转成移位运算</p>\n<p><strong>为了取出一个数据，系统需要访问内存几次？</strong>-- 两次：1. 取页表，2. 取数据</p>\n<h3 id=\"快表\"><a class=\"anchor\" href=\"#快表\">#</a> 快表</h3>\n<p>由一组联想寄存器 (TLB, Translation Lookaside Buffer) 组成。</p>\n<p><strong>联想寄存器：一种按内容进行并行查找的快速寄存器，访问速度比主存快得多</strong></p>\n<p><img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211112142834494.png\" alt=\"image-20211112142834494\" /></p>\n<h6 id=\"使用bitmap数组空闲页帧链管理可用页帧\"><a class=\"anchor\" href=\"#使用bitmap数组空闲页帧链管理可用页帧\">#</a> 使用 bitmap 数组 / 空闲页帧链管理可用页帧</h6>\n<h5 id=\"共享\"><a class=\"anchor\" href=\"#共享\">#</a> 共享</h5>\n<p><strong>通过页表可以使几个逻辑空间指向同一个物理空间，实现程序共享。</strong></p>\n<h5 id=\"越界保护\"><a class=\"anchor\" href=\"#越界保护\">#</a> 越界保护</h5>\n<p>设置页表长度寄存器，查页表前，检查页号是否越界</p>\n<h5 id=\"访问保护\"><a class=\"anchor\" href=\"#访问保护\">#</a> 访问保护</h5>\n<p><strong>在每个页表项中增设一存储保护域，用于说明对该页的访问权限，每一个对该页存储的访问都首先要比照是否满足该页访问权限的说明，满足则访问，否则报异常。</strong></p>\n<h3 id=\"ø优点\"><a class=\"anchor\" href=\"#ø优点\">#</a> Ø<strong> 优点</strong></h3>\n<p>ü<strong> 没有外碎片，每个内碎片不超过页大小。</strong></p>\n<p>ü<strong> 程序不必连续存放。</strong></p>\n<h3 id=\"ø主要缺点\"><a class=\"anchor\" href=\"#ø主要缺点\">#</a> Ø<strong> 主要缺点：</strong></h3>\n<p>ü<strong> 程序要一次全部装入内存才能执行。</strong></p>\n<p>ü<strong> 采用动态地址变换机构会增加计算机的成本和降低处理机的速度。</strong></p>\n<p>ü<strong> 各种数据结构</strong> (页表，空闲页表) 要占用一定的内存空间，而且系统要花费一定的时间来建立和管理这些表格。</p>\n<p>ü<strong> 依然存在内碎片。</strong></p>\n<h2 id=\"段式存储管理\"><a class=\"anchor\" href=\"#段式存储管理\">#</a> 段式存储管理</h2>\n<h4 id=\"特点按作业的自然段将其逻辑空间分成若干段作业以段为单位分配内存\"><a class=\"anchor\" href=\"#特点按作业的自然段将其逻辑空间分成若干段作业以段为单位分配内存\">#</a> 特点:<strong> 按作业的自然段将其逻辑空间分成若干段，作业以段为单位分配内存。</strong></h4>\n<p>Ø<strong> 用户作业逻辑空间为二维空间，由若干自然段组成。</strong></p>\n<p>Ø 逻辑地址：段号段内偏移，记作 S,d。编译及装配时把所有地址记成 (S,d) 的形式。</p>\n<p>Ø <strong>物理内存空间管理：与多道可变划分法一样，系统以段为单位分配物理内存。</strong></p>\n<p><img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211112144254340.png\" alt=\"image-20211112144254340\" /></p>\n<p><img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211112144844677.png\" alt=\"image-20211112144844677\" /></p>\n<h3 id=\"段页式管理\"><a class=\"anchor\" href=\"#段页式管理\">#</a> 段页式管理</h3>\n<p>特点：<strong>将作业分成若干段，每段用页式管理实现内存分配</strong></p>\n<p><strong>为了获得一条指令或者数据，需要访问内存几次？</strong>--3 次，段表，页表，数据</p>\n<h2 id=\"内存扩充技术\"><a class=\"anchor\" href=\"#内存扩充技术\">#</a> 内存扩充技术</h2>\n<h6 id=\"借助大容量的辅存实现内存的扩充\"><a class=\"anchor\" href=\"#借助大容量的辅存实现内存的扩充\">#</a> 借助大容量的辅存实现内存的扩充</h6>\n<h3 id=\"覆盖技术\"><a class=\"anchor\" href=\"#覆盖技术\">#</a> 覆盖技术</h3>\n<p>** 将用户空间划分成一个固定区和多个覆盖区。主程序放固定区，依次调用的子程序则放在同一个覆盖区。**<strong> 操作系统提供覆盖系统调用函数，由用户编程序显式调用</strong></p>\n<p>相当于时间换空间</p>\n<h3 id=\"交换技术\"><a class=\"anchor\" href=\"#交换技术\">#</a> 交换技术</h3>\n<p>将处于等待状态 (等 I/O 结束) 或就绪 (等 CPU) 状态的作业从主存换出到辅存，把将要执行的进程移入主存。</p>\n<p>优点:</p>\n<p>提高并发性</p>\n<p>缺点:</p>\n<p>换入换出增加处理机开销</p>\n<p>程序换入时存在重定位问题</p>\n<h6 id=\"和覆盖技术对比\"><a class=\"anchor\" href=\"#和覆盖技术对比\">#</a> 和覆盖技术对比</h6>\n<p><img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211116081410386.png\" alt=\"image-20211116081410386\" /></p>\n<h3 id=\"虚拟存储技术\"><a class=\"anchor\" href=\"#虚拟存储技术\">#</a> 虚拟存储技术</h3>\n<h4 id=\"基础\"><a class=\"anchor\" href=\"#基础\">#</a> 基础</h4>\n<p>程序中不是每一条指令都会在程序的一次运行过程中执行到。<br />\n错误处理子程序<br />\n条件语句 (if...else...)<br />\n 程序中有的指令可能只执行一次<br />\n程序的初始化部分<br />\n程序执行的局部性原理：在一段时间内，作业一般不会执行到所有程序的指令，也不会存取绝大部分数据，执行的代码和要存取的数据往往集中在某些区域中 (例如一个循环、一个数组)。</p>\n<h5 id=\"目的提供用户进程一个巨大的虚拟存储空间\"><a class=\"anchor\" href=\"#目的提供用户进程一个巨大的虚拟存储空间\">#</a> 目的：提供用户进程一个巨大的虚拟存储空间</h5>\n<h5 id=\"手段利用外存磁盘实现此虚空间\"><a class=\"anchor\" href=\"#手段利用外存磁盘实现此虚空间\">#</a> 手段：利用外存 (磁盘) 实现此虚空间。</h5>\n<h4 id=\"基本思想\"><a class=\"anchor\" href=\"#基本思想\">#</a> <strong>基本思想</strong></h4>\n<p>系统为进程提供一个比物理内存大得多的虚拟存储空间，虚拟空间大小不受物理内存大小的限制。</p>\n<p>虚拟空间的容量由系统的有效地址长度决定。假设地址长度为 32，按字节寻址，则虚拟存储空间大小为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>32</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^{32}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span> 个字节。</p>\n<h4 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> <strong>原理</strong></h4>\n<p>在程序装入时，不必一次将其全部读入到内存，而只需将<strong>当前需要执行的某些区域</strong>读入到内存，然后程序开始执行。在程序执行过程中，如果<strong>需执行的指令或访问的数据尚未在内存</strong>，则由处理器<strong>通知操作系统将相应的区域调入内存</strong>，然后继续执行。</p>\n<h4 id=\"分类\"><a class=\"anchor\" href=\"#分类\">#</a> 分类</h4>\n<h5 id=\"虚拟页式\"><a class=\"anchor\" href=\"#虚拟页式\">#</a> 虚拟页式</h5>\n<h6 id=\"页表增加外存标识位和外存地址项\"><a class=\"anchor\" href=\"#页表增加外存标识位和外存地址项\">#</a> 页表增加外存标识位和外存地址项</h6>\n<p><strong>当内存中没有空闲页面时，如果还要调入一个新页，如何处理？</strong></p>\n<p>​\t淘汰掉一个内存中的页 (淘汰策略)</p>\n<h6 id=\"交换区\"><a class=\"anchor\" href=\"#交换区\">#</a> 交换区</h6>\n<p>用来回写<strong>数据初始值和初值为 0 的工作区</strong></p>\n<p><strong>页表项结构</strong></p>\n<p><img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211116083233571.png\" alt=\"image-20211116083233571\" /></p>\n<p>合法位：置上表示该页在内存。<br />\n修改位：置上表示该页被修改过，在释放或淘汰时应写<br />\n回外存。<br />\n页类型：零页时：表示该页在分配物理页帧时应清 0 页帧<br />\n空间；回写 swap 区页时：表示回写 swap 区。<br />\n保护码：R、W、E 保护说明。<br />\n外存块号：该页所在外存的块号。<br />\n页 帧 号：当合法位置上时代表该页所在内存的页帧号。</p>\n<h6 id=\"缺页处理\"><a class=\"anchor\" href=\"#缺页处理\">#</a> 缺页处理</h6>\n<p>根据发生页故障的虚地址得到页表项；<br />\n申请一个可用的页帧 (根据所采用的替换策略可能需要引起淘汰某一页);<br />\n 检查页类型，若为零页，则将页帧清 0，将页帧号填入页表项的页帧号一栏，置合法位为 1。若非零页，则调用 I/O 子系统将外存块号所指的数据读到可用页帧，将页帧号填入页表项中，合法位置 1，结束。</p>\n<h6 id=\"页淘汰\"><a class=\"anchor\" href=\"#页淘汰\">#</a> 页淘汰</h6>\n<p>查 P 页表项的修改位，若未修改，则清 0 合法位，将页帧送回空闲页帧队列。<br />\n若已修改，则检查类型栏。<br />\n若是零页或回写 swap 区页（代表还没有分配交换区空间），则申请一块 swap 区空间，将 P 的外存块号置上并清除页类型。<br />\n调用 I/0 子系统将页帧上的数据写到外存块号所指的外存空间。清 0 合法位，将页帧送回空闲页帧队列。</p>\n<h3 id=\"页面置换策略\"><a class=\"anchor\" href=\"#页面置换策略\">#</a> 页面置换策略</h3>\n<h6 id=\"出发点-把未来不再使用的或者短时期内较少使用的页面调出\"><a class=\"anchor\" href=\"#出发点-把未来不再使用的或者短时期内较少使用的页面调出\">#</a> 出发点： 把未来不再使用的或者短时期内较少使用的页面调出</h6>\n<p>基本概念</p>\n<h6 id=\"驻留集进程的合法页集合\"><a class=\"anchor\" href=\"#驻留集进程的合法页集合\">#</a> 驻留集：进程的合法页集合</h6>\n<h6 id=\"访问串进程访问虚拟空间的地址踪迹\"><a class=\"anchor\" href=\"#访问串进程访问虚拟空间的地址踪迹\">#</a> 访问串：进程访问虚拟空间的地址踪迹</h6>\n<p>举例：某进程依次访问如下地址，0100，0432，0101，0612，0102，0103，…<br />\n 页式虚存管理以页为基本单位，只需页号即可。设页面大小为 100，上述访问串可简化为 1，4，1，6，1，1，…</p>\n<h4 id=\"驻留集大小固定的局部置换策略\"><a class=\"anchor\" href=\"#驻留集大小固定的局部置换策略\">#</a> 驻留集大小固定的局部置换策略</h4>\n<h5 id=\"fifo先进先出\"><a class=\"anchor\" href=\"#fifo先进先出\">#</a> FIFO（先进先出）</h5>\n<p>替换最早进入的页</p>\n<p>效果奇差</p>\n<p>有<strong> Belady 奇异</strong> <strong>指置换策略不满足随着驻留集的增大，页故障数一定减少的规律。</strong></p>\n<h5 id=\"opt最佳算法\"><a class=\"anchor\" href=\"#opt最佳算法\">#</a> OPT（最佳算法）</h5>\n<p>需要预先知道整个访问串的序列（因此不可实现）</p>\n<p>理论最优</p>\n<h5 id=\"lru最近最少使用\"><a class=\"anchor\" href=\"#lru最近最少使用\">#</a> LRU（最近最少使用）</h5>\n<p><strong>淘汰上次使用距当前最远的页</strong></p>\n<p>栈算法</p>\n<p>LRU 策略中，当驻留集大小为 m 时，S（m，t）中保持着最近使用过的 m 个页帧；当驻留集大小为 m+1 时，S（m+1，t）中保持着最近使用过的 m+1 个页帧。故 S（m，t）属于 S（m+1，t），LRU 策略是栈算法。</p>\n<h5 id=\"clock\"><a class=\"anchor\" href=\"#clock\">#</a> CLOCK</h5>\n<p>基于 LRU 的思想<br />\n硬件在页面被访问时设置页表项中的访问位<br />\n随着表针的移动，淘汰访问位是 0 的页面，或清除页面的访问位。<br />\n实用的页面置换算法</p>\n<h5 id=\"nru最近未使用\"><a class=\"anchor\" href=\"#nru最近未使用\">#</a> NRU (最近未使用)</h5>\n<p>为页帧在页表项中增加一位使用位，硬件每访存一次即将对应页的使用位置 1，操作系统页面管理程序定时将所有使用位清 0。淘汰时任选一个使用位为 0 (表示 OS 清 0 周期内没被使用过）的页。<br />\n操作系统选择淘汰页时，尽量避免选被修改过的页。因此，选择淘汰页次序：</p>\n<h4 id=\"驻留集大小可变的全局置换策略\"><a class=\"anchor\" href=\"#驻留集大小可变的全局置换策略\">#</a> 驻留集大小可变的全局置换策略</h4>\n<h5 id=\"ws\"><a class=\"anchor\" href=\"#ws\">#</a> WS</h5>\n<p>若驻留集中某页有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">△</mi></mrow><annotation encoding=\"application/x-tex\">\\triangle</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">△</span></span></span></span> 个访问间隔没被访问则将其淘汰 (正是因为这个特性，才是动态的)</p>\n<h6 id=\"实现\"><a class=\"anchor\" href=\"#实现\">#</a> 实现:</h6>\n<p>每一页面设一计数器，每访存一次，将所有其他页计数器 + 1, 所访存的计数器清零，淘汰计数器等于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">△</mi></mrow><annotation encoding=\"application/x-tex\">\\triangle</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">△</span></span></span></span> 的页面</p>\n<h5 id=\"实际上开销太大没有用\"><a class=\"anchor\" href=\"#实际上开销太大没有用\">#</a> 实际上：开销太大，没有用</h5>\n<h5 id=\"sws\"><a class=\"anchor\" href=\"#sws\">#</a> SWS</h5>\n<p>定时检查计时器，淘汰计时器值大于等于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">△</mi></mrow><annotation encoding=\"application/x-tex\">\\triangle</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">△</span></span></span></span> 的页面 (当前时钟值 - 页表时钟值)&gt;<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">△</mi></mrow><annotation encoding=\"application/x-tex\">\\triangle</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">△</span></span></span></span> 的页面)</p>\n<h5 id=\"硬件消耗还是很大\"><a class=\"anchor\" href=\"#硬件消耗还是很大\">#</a> 硬件消耗还是很大</h5>\n<h3 id=\"置换策略选择\"><a class=\"anchor\" href=\"#置换策略选择\">#</a> 置换策略选择</h3>\n<p>动态驻留集 sws + 淘汰页数据延迟清除</p>\n<p>设立两个队列：自由链表和修改链表。<br />\n定时做页淘汰（SWS）：淘汰时不立即抹去页中数据，根据页面修改否挂入自由链 / 修改链，修改链过长或自由链过短时，回写页面后改挂到自由链中。<br />\n若 paging in 要用空页时，选自由链的第一页帧，这时页中数据被覆盖。<br />\n若在自由链 / 修改链中的页面再次被访问时，则将该页从链中摘除，使该页又能通过页表项访问到。</p>\n<pre><code class=\"language-chinese\"> 某计算机采用二级页表的分页存储管理方式，按字节编址，页大小为2^10 字节，页表项大小为2字节，逻辑地址结构为：\n\n逻辑地址空间大小为2^16页，则表示整个逻辑地址空间的页目录表中包含表项的个数至少是： ?\n</code></pre>\n<p><img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211119140231647.png\" alt=\"image-20211119140231647\" /></p>\n<p>逻辑空间: 2^16 *2^10 =2^26</p>\n<p>页大小为 2^10 页表项大小为 2, 则一页能写 2^9 个页表项</p>\n<p>共 2^16 逻辑页，故需要 2^7 页</p>\n",
            "tags": [
                "大三",
                "操作系统",
                "操作系统,计算机"
            ]
        },
        {
            "id": "http://example.com/2021/12/07/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/",
            "url": "http://example.com/2021/12/07/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/",
            "title": "21/12/7 文件系统-操作系统",
            "date_published": "2021-12-07T00:43:00.000Z",
            "content_html": "<h1 id=\"文件系统\"><a class=\"anchor\" href=\"#文件系统\">#</a> 文件系统</h1>\n<h2 id=\"文件管理\"><a class=\"anchor\" href=\"#文件管理\">#</a> 文件管理</h2>\n<h3 id=\"文件系统的功能\"><a class=\"anchor\" href=\"#文件系统的功能\">#</a> 文件系统的功能</h3>\n<p>支持文件所占存储介质空间的分配 / 回收<br />\n支持文件相对起始数据的逻辑块定位到外存上的物理块<br />\n支持对文件访问的安全检查<br />\n支持对文件的读写访问</p>\n<h3 id=\"文件的结构\"><a class=\"anchor\" href=\"#文件的结构\">#</a> 文件的结构</h3>\n<h5 id=\"逻辑结构文件组织\"><a class=\"anchor\" href=\"#逻辑结构文件组织\">#</a> 逻辑结构 (<strong>文件组织</strong>):</h5>\n<p>用户看到的文件组织形式，和存储：设备无关</p>\n<p>有结构的记录式文件：由一个以上的记录构成</p>\n<p>无结构的流式文件：文件没有结构，由一串字符流构成</p>\n<h5 id=\"物理结构\"><a class=\"anchor\" href=\"#物理结构\">#</a> 物理结构:</h5>\n<p>外存上存放形式，和存储设备特性有很大关系</p>\n<h5 id=\"文件存储器物理特性\"><a class=\"anchor\" href=\"#文件存储器物理特性\">#</a> 文件存储器物理特性:</h5>\n<p>•<strong>磁带</strong></p>\n<p><strong>顺序访问设备→要求文件顺序存放于带上。</strong></p>\n<p>•<strong>磁盘</strong></p>\n<p><strong>直接（随机）访问设备→文件可顺序、链接式或随机（通过类似页表的索引结构访问）存放于设备上</strong></p>\n<h5 id=\"文件系统重要作用之一\"><a class=\"anchor\" href=\"#文件系统重要作用之一\">#</a> 文件系统重要作用 (之一)</h5>\n<p>在用户逻辑文件和物理文件之间建立映射</p>\n<h4 id=\"文件存取方式\"><a class=\"anchor\" href=\"#文件存取方式\">#</a> 文件存取方式</h4>\n<p><strong>读写文件存储器上的一个物理块的方法</strong></p>\n<p><strong>顺序存取：指对文件中的信息按顺序依次读写</strong></p>\n<p><strong>随机存取法:</strong></p>\n<p>​\t\t<strong>直接存取法：允许用户随意存取文件中任意一个物理记录</strong></p>\n<p>​\t\t<strong>按键存取法：根据文件中各记录的某个数据项内容来存取记录的，这种数据项称之为键</strong></p>\n<h4 id=\"几种常见的物理存储方式\"><a class=\"anchor\" href=\"#几种常见的物理存储方式\">#</a> 几种常见的物理存储方式</h4>\n<h5 id=\"1-连续存储顺序结构\"><a class=\"anchor\" href=\"#1-连续存储顺序结构\">#</a> 1.  连续存储 (顺序结构)</h5>\n<p>它将逻辑上连续的文件信息依次存放在编号连续的物理块上。</p>\n<p>l<strong> 优点：</strong></p>\n<p>–<strong>存储方式简单。</strong></p>\n<p>–<strong>对文件记录进行批量存取时，其存取效率较高。</strong></p>\n<p>–<strong>支持定长记录的直接存取，可以通过计算获得存储位置。</strong></p>\n<p>l<strong> 缺点：</strong></p>\n<p>–<strong>不支持随机查找。如果要随机地查找或修改单个记录，此时系统需要逐个地查找诸记录，性能较差，尤其是当文件较大时情况将更为严重。</strong></p>\n<p>–<strong>存在外部碎片。</strong></p>\n<p>–<strong>不便于记录的增加或删除操作。</strong></p>\n<ol start=\"2\">\n<li>\n<p>–<strong>链接结构</strong></p>\n<p>•<strong>将逻辑上连续的文件信息存放在不连续的物理块上，每个物理块设有一个指针指向下一个物理块。</strong></p>\n<p>l<strong> 优点：</strong></p>\n<p>–<strong>提高了磁盘空间利用率，不存在外部碎片问题。</strong></p>\n<p>–<strong>有利于文件插入和删除，及其动态扩充。</strong></p>\n<p>l<strong> 缺点：</strong></p>\n<p>–<strong>仍然不支持随机查找。</strong></p>\n<p>–<strong>由于存储空间可能不连续，带来更多的寻道次数和寻道时间。</strong></p>\n<p>–<strong>需要牺牲一些空间存放链接指针，同时需要维护这些指针，增加了系统开销。</strong></p>\n<p>–<strong>可靠性问题，如指针出错。</strong></p>\n</li>\n<li>\n<p><strong>索引结构</strong><br />\n将逻辑上连续的文件信息 (记录) 存放在不连续的物理块中，系统为每个文件建立一个专用数据结构 —— 索引表，索引表中存放文件的逻辑块号和物理块号的对应关系</p>\n<ol>\n<li>优点：<br />\n既能顺序存取，又能直接存取。<br />\n满足了文件动态增长、插入删除的要求。<br />\n没有外碎片，外存空间利用率较高。<br />\n缺点<br />\n较多的寻道次数和寻道时间。<br />\n索引表本身需要存储空间，同时对索引表的维护会增加系统开销。</li>\n<li>索引表组织方式\n<ol>\n<li><strong>链接文件方式：将多个索引表块按链接文件的方式串联起来</strong></li>\n<li>多重索引方式：将一个大文件的所有索引表（二级索引) 的地址放在另一个索引表（一级索引) 中。\n<ol>\n<li>多重索引优势\n<ol>\n<li>寻址空间较大，相比于链接文件，会大大减少读取对应物理块所需要的读盘次数 (因为要从文件中读取索引项)</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"文件的目录\"><a class=\"anchor\" href=\"#文件的目录\">#</a> 文件的目录</h3>\n<p>OS 观点：文件包含文件控制块和文件体</p>\n<p>文件控制块（FCB）的主要内容：</p>\n<ul>\n<li>\n<blockquote>\n<p>文件名<br />\n创建者<br />\n文件物理位置信息：如索引表<br />\n创建、修改时间、保存时间<br />\n口令：用于对文件访问进行验证<br />\n操作限制：如读、写、执行权限说明</p>\n</blockquote>\n</li>\n</ul>\n<p>文件目录提供的功能：</p>\n<ul>\n<li>\n<blockquote>\n<p><strong>实现 “按名存取”</strong>。用户只须提供文件名，即可对文件进行存取。这是文件系统向用户提供的最基本的服务。<br />\n<strong>提高对目录的检索速度</strong>。合理地组织目录结构，加快对目录的检索速度，从而加快对文件的存取速度。这是在设计一个大、中型文件系统时，所追求的主要目标。<br />\n<strong>实现文件共享</strong>。在多用户系统中，应允许多个用户共享一个文件，以节省大量的存储空间并方便用户。<br />\n<strong>解决文件重名问题</strong>。系统应允许不同用户对不同文件采用相同的名字，以便于用户按照自己的习惯命名和使用文件。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"文件目录结构\"><a class=\"anchor\" href=\"#文件目录结构\">#</a> 文件目录结构</h4>\n<h5 id=\"l一级目录结构\"><a class=\"anchor\" href=\"#l一级目录结构\">#</a> l<strong> 一级目录结构</strong></h5>\n<ul>\n<li>为外存上的全部文件设立一张平面（flat）的目录表，包含所有文件的 FCB。每建立一个新文件即在目录中增加一个 FCB，每当删除一个文件即抹去对应的 FCB，当要访问一个文件时，先按文件名在目录中找到对应的文件 FCB。<br />\n为了快速查找到文件 FCB，可按文件名进行 Hash，或其它快速查找方式</li>\n<li>优点：简单<br />\n缺点：<br />\n1、查找速度慢<br />\n 2、<strong>不允许重名</strong><br />\n 3、不便于实现文件共享</li>\n</ul>\n<h5 id=\"l二级目录结构\"><a class=\"anchor\" href=\"#l二级目录结构\">#</a> l<strong> 二级目录结构</strong></h5>\n<ul>\n<li>设一个主目录 MFD，为系统的每个用户设用户目录 UFD，用户目录是用户所有文件 FCB 的集合，主目录中存放每个用户目录的用户目录名和 UFD 的索引表等（当我们把 UFD 看作是一个文件时，这个文件的内容是用户所有文件 FCB 集合，MFD 中则包含每个 UFD 文件的 FCB</li>\n<li>路径名<br />\n将用户名与文件名连到一起组成路径名。例如：/songhong/test.c</li>\n</ul>\n<h5 id=\"多级目录树形目录结构\"><a class=\"anchor\" href=\"#多级目录树形目录结构\">#</a> 多级目录 —— 树形目录结构</h5>\n<ul>\n<li>\n<p>树状的多级目录结构<br />\n任何一级目录中的 FCB 既可以描述次一级的子目录，又可以描述一个文件</p>\n</li>\n<li>\n<p>特点:</p>\n</li>\n<li>\n<ul>\n<li>\n<blockquote>\n<p>利于文件分类，从文件路径名可看出文件类别。<br />\n查找文件 FCB 耗费时间，要得到文件 FCB，必须从根查起。<br />\n唯一确定文件的路径名太长，故引入当前目录 概念，提供相对于当前目录的相对路径名可加速文件 FCB 的查找，进程控制块存有当前目录信息</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p>访问</p>\n</li>\n<li>\n<blockquote>\n<p>必须指出文件所在路径名：从根目录到该文件的路径上各级目录名的组合。也称为文件全名。<br />\n例如：/usr/lib/man<br />\n 相对路径：设置一个 “当前目录”(也叫 “工作目录”)，此时对于文件的查找是从当前目录中进行的。可以带来两点好处：<br />\n用户使用更加方便<br />\n检索效率更高</p>\n</blockquote>\n</li>\n<li>\n<p>优缺点</p>\n<blockquote>\n<p>l<strong> 树形多级目录结构的优点</strong></p>\n<p>•<strong>提高了检索目录的速度。</strong></p>\n<p>•<strong>较好地解决了重名问题。</strong></p>\n<p>l<strong> 缺点</strong></p>\n<p><strong>不便于用户共享文件</strong></p>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"无环图目录结构\"><a class=\"anchor\" href=\"#无环图目录结构\">#</a> 无环图目录结构</h5>\n<h6 id=\"当一个文件副本可以同时属于两个不同目录类别时即同一个文件有二条路径名或多条路径名时出现无环图目录结构\"><a class=\"anchor\" href=\"#当一个文件副本可以同时属于两个不同目录类别时即同一个文件有二条路径名或多条路径名时出现无环图目录结构\">#</a> 当一个文件副本可以同时属于两个不同目录（类别）时，即同一个文件有二条路径名，或多条路径名时出现无环图目录结构。</h6>\n<h6 id=\"特点\"><a class=\"anchor\" href=\"#特点\">#</a> 特点：</h6>\n<p>方便文件共享，分类。<br />\n两个或多个 FCB 的一致性难保证，因此将 FCB 独立存放，引入带文件 / 目录名和 FCB 指针的目录项</p>\n<p><img data-src=\"https://s2.loli.net/2021/12/07/ADfc3PNnYOdbeiH.png\" alt=\"image-20211130092527762\" /></p>\n<h4 id=\"文件共享\"><a class=\"anchor\" href=\"#文件共享\">#</a> 文件共享</h4>\n<ol>\n<li>\n<h5 id=\"硬链接hard-link\"><a class=\"anchor\" href=\"#硬链接hard-link\">#</a> 硬链接 (hard link)</h5>\n<ol>\n<li>指向同一个索引结点</li>\n</ol>\n</li>\n<li>\n<p>符号链接</p>\n<ol>\n<li>建立符号链文件，该文件内容为要访问文件的路径名</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"文件存储器空间布局与管理\"><a class=\"anchor\" href=\"#文件存储器空间布局与管理\">#</a> 文件存储器空间布局与管理</h2>\n<h4 id=\"空闲区表\"><a class=\"anchor\" href=\"#空闲区表\">#</a> 空闲区表</h4>\n<p><img data-src=\"https://s2.loli.net/2021/12/07/H2of5R3Lx7AGNwm.png\" alt=\"image-20211203133204515\" /></p>\n<h4 id=\"位示图\"><a class=\"anchor\" href=\"#位示图\">#</a> 位示图</h4>\n<p><img data-src=\"https://s2.loli.net/2021/12/07/knsUycY9irLAS1G.png\" alt=\"image-20211203133252860\" /></p>\n<p><img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211203133418295.png\" alt=\"image-20211203133418295\" /></p>\n<h4 id=\"空闲块链\"><a class=\"anchor\" href=\"#空闲块链\">#</a> 空闲块链</h4>\n<p><img data-src=\"https://s2.loli.net/2021/12/07/LH76uxTbrA3FSno.png\" alt=\"image-20211203134255752\" /></p>\n<p><img data-src=\"https://s2.loli.net/2021/12/07/FQnjZpyWuqCd6El.png\" alt=\"image-20211203135715385\" /></p>\n<p><img data-src=\"https://s2.loli.net/2021/12/07/irJzfKHgLs96TBE.png\" alt=\"image-20211203140034820\" /></p>\n",
            "tags": [
                "大三",
                "操作系统",
                "操作系统"
            ]
        },
        {
            "id": "http://example.com/2021/12/06/9.1%20%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%8C%E6%95%B4%E6%80%A7%E6%A6%82%E8%BF%B0/",
            "url": "http://example.com/2021/12/06/9.1%20%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%8C%E6%95%B4%E6%80%A7%E6%A6%82%E8%BF%B0/",
            "title": "21/12/6 Database 数据库完整性概述",
            "date_published": "2021-12-06T14:53:47.000Z",
            "content_html": "<p>9.1 数据库完整性概述</p>\n<p>数据库完整性 -- 数据的正确性，有效性，西安共性</p>\n<p>列级约束</p>\n<p>对属性的数据类型，等的定义</p>\n<p>元祖约束</p>\n<p>元组中各个属性之间的约束关系</p>\n<h4 id=\"实现完整性约束的方法\"><a class=\"anchor\" href=\"#实现完整性约束的方法\">#</a> 实现完整性约束的方法</h4>\n<ol>\n<li>提供定义机制</li>\n<li>提供检查方法</li>\n<li>违约处理</li>\n</ol>\n<h2 id=\"94用户定义的完整性\"><a class=\"anchor\" href=\"#94用户定义的完整性\">#</a> 9.4 用户定义的完整性</h2>\n<h2 id=\"95触发器\"><a class=\"anchor\" href=\"#95触发器\">#</a> 9.5 触发器</h2>\n<p>一类用户定义在关系数据表上的一类由事件驱动的特殊过程，用编程的方法实现复杂的业务规则</p>\n<p>是一种特殊类型的存储过程</p>\n<p>可用触发器完成很多数据库完整性保护的过程</p>\n<ol>\n<li>复杂的业务规则</li>\n<li>比较数据修改前后状态</li>\n</ol>\n<p>SQL:CREATE TRIGER 命令</p>\n<h1 id=\"事务\"><a class=\"anchor\" href=\"#事务\">#</a> 事务</h1>\n<p>原子性：不可分割</p>\n<p>一致性：事务执行结果必须从一个状态转换到另一个状态时保持一致，即若中间出现错误，则将所有操作撤销</p>\n<p>事务应当具有 ACID 性质，<br />\nA 是<strong>原子</strong>性 (atomic)：事务中包含的各项操作必须全部成功执行或者全部不执行。任何一项操作失败，将导致整个事务失败，其他已经执行的任务所作的数据操作都将被撤销，只有所有的操作全部成功，整个事务才算是成功完成。<br />\nC 是<strong>一致性</strong> (consistent)：保证了当事务结束后，系统状态是一致的。那么什么是一致的系统状态？例如，如果银行始终遵循着 &quot;银行账号必须保持正态平衡&quot; 的原则，那么银行系统的状态就是一致的。上面的转账例子中，在取钱的过程中，账户会出现负态平衡，在事务结束之后，系统又回到一致的状态。这样，系统的状态对于客户来说，始终是一致的。<br />\nI 是<strong>隔离</strong>性 (isolated)：使得并发执行的事务，彼此无法看到对方的中间状态。保证了并发执行的事务顺序执行，而不会导致系统状态不一致。<br />\nD 是<strong>持久性</strong> (durable)：保证了事务完成后所作的改动都会被持久化，即使是发生灾难性的失败。可恢复性资源保存了一份事务日志，如果资源发生故障，可以通过日志来将数据重建起来。</p>\n<p>事务应处在下列状态之一</p>\n<p>活动状态</p>\n<p>失败状态：意味着要回滚</p>\n<p>中止状态：数据库已经回滚完毕，恢复到提交前状态</p>\n<p>提交状态：当数据更改完全写入磁盘时，进入提交状态</p>\n<p>10.3.1 事务故障的恢复</p>\n<p>1. 反向扫描日文件日志，查找该事务的更新操作</p>\n<p>2. 对该事务的更新操作执行你操作</p>\n<p>3. 继续反向扫描，直到读到此事务的开始操作</p>\n<p>10.3.2 系统故障恢复</p>\n<p>1.<strong> 正向</strong>扫描日志文件，列出 Redo 队列，Undo 队列</p>\n<h3 id=\"日志\"><a class=\"anchor\" href=\"#日志\">#</a> 日志</h3>\n<p>&lt;u&gt;<strong> 登记两条原则</strong> &lt;/u&gt;</p>\n<p>&lt;u&gt;<strong>1. 登记次序严格按并行事物执行顺序</strong> &lt;/u&gt;</p>\n<p>&lt;u&gt;<strong>2. 先写日志文件，后写数据库</strong> &lt;/u&gt;</p>\n",
            "tags": [
                "大三",
                "数据库",
                "数据库,完整性"
            ]
        },
        {
            "id": "http://example.com/2021/12/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/",
            "url": "http://example.com/2021/12/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/",
            "title": "21/12/6 Database 数据库操作",
            "date_published": "2021-12-06T14:09:47.000Z",
            "content_html": "<h2 id=\"数据库\"><a class=\"anchor\" href=\"#数据库\">#</a> 数据库</h2>\n<p>select</p>\n<p>from</p>\n<p>where</p>\n<p>group by</p>\n<p>having</p>\n<p>order by</p>\n<h5 id=\"insert\"><a class=\"anchor\" href=\"#insert\">#</a> insert</h5>\n<p>指定属性列 -- 不包含的取空</p>\n<p>不指定 - 不能省略任何属性</p>\n",
            "tags": [
                "大三",
                "数据库",
                "数据库"
            ]
        },
        {
            "id": "http://example.com/2021/12/06/%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/",
            "url": "http://example.com/2021/12/06/%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/",
            "title": "21/12/6 Database 查询优化",
            "date_published": "2021-12-06T11:09:47.000Z",
            "content_html": "<h1 id=\"查询优化\"><a class=\"anchor\" href=\"#查询优化\">#</a> 查询优化</h1>\n<h4 id=\"游标\"><a class=\"anchor\" href=\"#游标\">#</a> 游标</h4>\n<h6 id=\"目的-解决集合性操作语言与过程性操作语言的不匹配\"><a class=\"anchor\" href=\"#目的-解决集合性操作语言与过程性操作语言的不匹配\">#</a> 目的 - 解决集合性操作语言与过程性操作语言的不匹配</h6>\n<h6 id=\"原因sql一条语句一般能产生或处理多条记录而主语言一次只能存放一条记录\"><a class=\"anchor\" href=\"#原因sql一条语句一般能产生或处理多条记录而主语言一次只能存放一条记录\">#</a> 原因:sql 一条语句一般能产生或处理多条记录，而主语言一次只能存放一条记录</h6>\n<h6 id=\"是什么是系统为用户开设的一个数据缓冲区存放sql语句的执行结果\"><a class=\"anchor\" href=\"#是什么是系统为用户开设的一个数据缓冲区存放sql语句的执行结果\">#</a> 是什么：是系统为用户开设的一个数据缓冲区，存放 sql 语句的执行结果</h6>\n<p>用户可以用 SQL 语句逐一地从游标中获取记录，并赋给主变量</p>\n<h6 id=\"定义游标-使用declare语句\"><a class=\"anchor\" href=\"#定义游标-使用declare语句\">#</a> 定义游标：使用 Declare 语句</h6>\n<p>EXEC SQL DECLARE &lt;&gt; CURSOR......</p>\n<h6 id=\"打开游标-执行相应的select语句吧所有满足查询条件的记录从指定表取到缓冲区中\"><a class=\"anchor\" href=\"#打开游标-执行相应的select语句吧所有满足查询条件的记录从指定表取到缓冲区中\">#</a> 打开游标 -- 执行相应的 select 语句，吧所有满足查询条件的记录从指定表取到缓冲区中</h6>\n<p>EXEC SQL OPEN &lt;游标名&gt;</p>\n<p>此时游标指针指向查询结果集中第一条记录之前</p>\n<h6 id=\"推动游标\"><a class=\"anchor\" href=\"#推动游标\">#</a> 推动游标</h6>\n<p>使用 FETCH 语句</p>\n<p>EXEC SQL FETCH [[NEXT]]....</p>\n<p>指定方向推动游标指针，然后将缓冲区中的当前记录取出来送至主变量供主语言进一步处理</p>\n<p>要求：主变量与 select 语句中的目标列表达式具有一一对应关系</p>\n<h6 id=\"关闭游标\"><a class=\"anchor\" href=\"#关闭游标\">#</a> 关闭游标</h6>\n<p>CLOSE 语句</p>\n<p>EXEC SQL CLOSE &lt;游标名&gt;</p>\n<h2 id=\"71查询处理过程\"><a class=\"anchor\" href=\"#71查询处理过程\">#</a> 7.1 查询处理过程</h2>\n<h3 id=\"711-查询分析\"><a class=\"anchor\" href=\"#711-查询分析\">#</a> 7.1.1 查询分析</h3>\n<p>对查询语句进行扫描，词法分析和语法分析</p>\n<h3 id=\"712查询检查\"><a class=\"anchor\" href=\"#712查询检查\">#</a> 7.1.2 查询检查</h3>\n<p>根据数据字典中的用户权限和完整性约束定义对用户的存取权限进行检查</p>\n<p>检查通过后将 SQL 查询语句转换成等价的 &lt;u&gt; 关系代数表达式 &lt;/u&gt;</p>\n<h3 id=\"714查询优化\"><a class=\"anchor\" href=\"#714查询优化\">#</a> 7.1.4 查询优化</h3>\n<p>选择一个高效执行的查询处理策略</p>\n<h4 id=\"代数优化-关系代数表达式优化\"><a class=\"anchor\" href=\"#代数优化-关系代数表达式优化\">#</a> 代数优化 - 关系代数表达式优化</h4>\n<h4 id=\"物理优化-存取物理介质及的优化\"><a class=\"anchor\" href=\"#物理优化-存取物理介质及的优化\">#</a> 物理优化 - 存取物理介质及... 的优化</h4>\n<h3 id=\"715查询执行\"><a class=\"anchor\" href=\"#715查询执行\">#</a> 7.1.5 查询执行</h3>\n<p>不用多言</p>\n<h2 id=\"72执行查询操作的基本算法\"><a class=\"anchor\" href=\"#72执行查询操作的基本算法\">#</a> 7.2 执行查询操作的基本算法</h2>\n<h3 id=\"1-选择操作\"><a class=\"anchor\" href=\"#1-选择操作\">#</a> 1. 选择操作</h3>\n<p>顺序扫描 / 二分查找 / 索引 [散列]/ 复合选择</p>\n<p>索引 -- 提供元组指针，间接检索</p>\n<p>B + 树索引：同样是提供元组指针，同时支持顺序集中依次查找</p>\n<p>如是 sdept='cs' and sae&gt;20: 则</p>\n<p>算法一：分别查询，求交集</p>\n<p>算法而：先找到第一个查询的指针，然后在第一个查询的指针基础上进行第二个查询</p>\n<h3 id=\"2连接操作\"><a class=\"anchor\" href=\"#2连接操作\">#</a> 2. 连接操作</h3>\n<h6 id=\"连接操作是查询处理中最耗时的操作之一\"><a class=\"anchor\" href=\"#连接操作是查询处理中最耗时的操作之一\">#</a> 连接操作是查询处理中最耗时的操作之一</h6>\n<p>[例 2]</p>\n<p>SELECT *</p>\n<p>FROM Student,SC</p>\n<p>WHERE Student.Sno=SC.Sno</p>\n<p>[例 2end]</p>\n<ol>\n<li>嵌套循环法<br />\n对外层循环的每一个元组，检测内层循环中的每一个元组，检查两个元组在连接属性上是否相等<br />\n满足，即串接后作为结果输出</li>\n<li>索引链接法<br />\n在输出表上建立属性 Sno 的索引 (如果原来没有)<br />\n 对 student 中每个元组，有 Sno 值通过 Sc........</li>\n<li>排序合并法<br />\n适合连接的诸表已经排好序的情况<br />\n没排序则排序<br />\n取 Student 表中第一个 sno, 然后依次找 sc 表中具有相同 sno 的元组<br />\n扫到 sno 不相同的第一个 sc 元组时，返回 Student 扫描它的下一个元组<br />\n之后循环</li>\n<li>散列连接法<br />\n把连接属性作为散列码，<br />\n 然后划分</li>\n</ol>\n<h3 id=\"3投影操作\"><a class=\"anchor\" href=\"#3投影操作\">#</a> 3. 投影操作</h3>\n<h6 id=\"选取关系的某些列从垂直的方向减小关系的大小\"><a class=\"anchor\" href=\"#选取关系的某些列从垂直的方向减小关系的大小\">#</a> 选取关系的某些列，从垂直的方向减小关系的大小</h6>\n<p>如果投影属性列包括了关系 R 的主键，则操作可言直接执行，操作结果将于 R 中元组个数相同</p>\n<p>否则则需要消除重复元组</p>\n<h3 id=\"4集合运算操作\"><a class=\"anchor\" href=\"#4集合运算操作\">#</a> 4. 集合运算操作</h3>\n<p>并，查，交，笛卡尔积</p>\n<p>并查缴类似排序合并法</p>\n<p>笛卡尔积一般嵌套循环合并</p>\n<h2 id=\"73关系数据库系统的查询优化\"><a class=\"anchor\" href=\"#73关系数据库系统的查询优化\">#</a> 7.3 关系数据库系统的查询优化</h2>\n<p>分布式数据库：总代接 = I/O 代价 +*****</p>\n<h4 id=\"732查询优化实例\"><a class=\"anchor\" href=\"#732查询优化实例\">#</a> 7.3.2 查询优化实例</h4>\n<p>假定学生 - 课程数据库中有 1000 个学生记录，10000 个选课记录</p>\n<p>其中选修二号课程的选课记录为 50 个</p>\n<p>查询选修了 2 号课程的学生姓名</p>\n<h5 id=\"第一种情况\"><a class=\"anchor\" href=\"#第一种情况\">#</a> 第一种情况</h5>\n<h6 id=\"1计算广义笛卡尔积\"><a class=\"anchor\" href=\"#1计算广义笛卡尔积\">#</a> 1. 计算广义笛卡尔积</h6>\n<p>- 把 student 和 sc 的每个元组连接起来的做法</p>\n<h6 id=\"2做选择操作\"><a class=\"anchor\" href=\"#2做选择操作\">#</a> 2. 做选择操作</h6>\n<p>依次读入连接后的元组，按照选择条件选取满足要求的记录</p>\n<h6 id=\"3做投影操作\"><a class=\"anchor\" href=\"#3做投影操作\">#</a> 3. 做投影操作</h6>\n<p>把第二步操作的结果在 Sname 上作投影输出，得到最终输出</p>\n<h5 id=\"第二种情况\"><a class=\"anchor\" href=\"#第二种情况\">#</a> 第二种情况</h5>\n<h6 id=\"1计算自然连接\"><a class=\"anchor\" href=\"#1计算自然连接\">#</a> 1. 计算自然连接</h6>\n<h6 id=\"2读取中间文件块进行选择操作\"><a class=\"anchor\" href=\"#2读取中间文件块进行选择操作\">#</a> 2. 读取中间文件块，进行选择操作</h6>\n<h6 id=\"3投影输出\"><a class=\"anchor\" href=\"#3投影输出\">#</a> 3. 投影输出</h6>\n<h5 id=\"第三种情况\"><a class=\"anchor\" href=\"#第三种情况\">#</a> 第三种情况</h5>\n<h6 id=\"1先对sc表进行选择运算\"><a class=\"anchor\" href=\"#1先对sc表进行选择运算\">#</a> 1. 先对 sc 表进行选择运算</h6>\n<h6 id=\"2读取student表把读入的student元组和内存中收到sc元组做连接\"><a class=\"anchor\" href=\"#2读取student表把读入的student元组和内存中收到sc元组做连接\">#</a> 2. 读取 Student 表，把读入的 student 元组和内存中收到 sc 元组做连接</h6>\n<h6 id=\"3把连接结果投影输出\"><a class=\"anchor\" href=\"#3把连接结果投影输出\">#</a> 3. 把连接结果投影输出</h6>\n<p>假如 SC 表的 Cno 字段 / Student 表上的 Sno 有索引，可加快读取</p>\n<h4 id=\"有选择和连接操作时先做选择操作-代数优化\"><a class=\"anchor\" href=\"#有选择和连接操作时先做选择操作-代数优化\">#</a> 有选择和连接操作时，先做选择操作 -- 代数优化</h4>\n<h4 id=\"选择操作算法有权标扫描和索引扫描两种在第三种情况下索引扫描效果好-物理优化\"><a class=\"anchor\" href=\"#选择操作算法有权标扫描和索引扫描两种在第三种情况下索引扫描效果好-物理优化\">#</a> 选择操作算法有权标扫描和索引扫描两种，在第三种情况下，索引扫描效果好 -- 物理优化</h4>\n<h3 id=\"733-代数优化\"><a class=\"anchor\" href=\"#733-代数优化\">#</a> 7.3.3 代数优化</h3>\n<h4 id=\"关系代数表达式的等价变换规则\"><a class=\"anchor\" href=\"#关系代数表达式的等价变换规则\">#</a> 关系代数表达式的等价变换规则</h4>\n<p>指用相同的关系代替两个表达式中相应的关系所得到的结果是相同的</p>\n<h5 id=\"常用的等价变换规则\"><a class=\"anchor\" href=\"#常用的等价变换规则\">#</a> 常用的等价变换规则</h5>\n<h4 id=\"代数优化策略-通过对关系代数表达式的等价变化来提高查询效率\"><a class=\"anchor\" href=\"#代数优化策略-通过对关系代数表达式的等价变化来提高查询效率\">#</a> 代数优化策略 - 通过对关系代数表达式的等价变化来提高查询效率</h4>\n<h5 id=\"启发式规则\"><a class=\"anchor\" href=\"#启发式规则\">#</a> 启发式规则</h5>\n<ol>\n<li><strong>选择运算尽可能先做，最重要最基本的一条</strong></li>\n<li>把投影运算和选择运算同时进行</li>\n<li>把投影同其前后的双目运算结合起来</li>\n<li>把某些选择同在它前面要执行的笛卡尔积结合起来形成一个连接运算'</li>\n<li>找出公共子表达式</li>\n</ol>\n<h4 id=\"代数优化算法\"><a class=\"anchor\" href=\"#代数优化算法\">#</a> 代数优化算法</h4>\n<p>输入：一个查询树</p>\n<p>输出：优化的查询树</p>\n<h5 id=\"物理优化\"><a class=\"anchor\" href=\"#物理优化\">#</a> 物理优化</h5>\n<p>代数优化改变查询语句中操作的次序和组合，不涉及底层的存取路径</p>\n<p>定义：选择高效合理的操作算法 / 存取路径</p>\n<h6 id=\"基于存取路径的优化\"><a class=\"anchor\" href=\"#基于存取路径的优化\">#</a> 基于存取路径的优化</h6>\n<p>选择操作的启发式规则 --</p>\n<ol>\n<li>\n<p>对于小关系，使用全表顺序扫描，即使有索引</p>\n</li>\n<li>\n<p>对于大关系 --</p>\n<ol>\n<li>对于选择条件是主键 = 值的查询<br />\n选择主键索引</li>\n<li>对于选择条件是非主属性 = 值的查询，且选择列上有索引<br />\n估算查询结果的元组书目 -- 比例小 (10%), 索引，比例大 - 全表</li>\n<li>选择条件是属性上的非等值查询或范围查询，且存在索引<br />\n估算查询结果的元组书目 -- 比例小 (10%), 索引，比例大 - 全表</li>\n<li>对于用 and 连接的合取选择条件<br />\n优先采用组合索引扫描....</li>\n<li>or 连接<br />\n一般全表</li>\n</ol>\n</li>\n</ol>\n<p>连接操作的启发式规则</p>\n<ol>\n<li>两个比哦啊都已经按照连接属性排序<br />\n排序合并法</li>\n<li>一个表在连接属性上有索引<br />\n索引连接法</li>\n<li>都不是 1,2, 而其中一个表比较小<br />\n散列连接法</li>\n<li>可以选用嵌套循环阀，并选择较小的表作为外表</li>\n</ol>\n<h6 id=\"基于代价估算的优化\"><a class=\"anchor\" href=\"#基于代价估算的优化\">#</a> 基于代价估算的优化</h6>\n<h6 id=\"二者结合的优化\"><a class=\"anchor\" href=\"#二者结合的优化\">#</a> 二者结合的优化</h6>\n",
            "tags": [
                "大三",
                "数据库",
                "class3"
            ]
        },
        {
            "id": "http://example.com/2021/12/06/21-12-6-Database-exp-8/",
            "url": "http://example.com/2021/12/06/21-12-6-Database-exp-8/",
            "title": "21/12/6 Database exp 8",
            "date_published": "2021-12-06T11:09:47.000Z",
            "content_html": "<ol>\n<li>\n<h1 id=\"分析系统功能\"><a class=\"anchor\" href=\"#分析系统功能\">#</a> 分析系统功能</h1>\n<ol>\n<li>\n<h2 id=\"er图\"><a class=\"anchor\" href=\"#er图\">#</a> ER 图</h2>\n<p><img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120140233739.png\" alt=\"image-20211120140233739\" /></p>\n</li>\n<li>\n<h2 id=\"关系模型\"><a class=\"anchor\" href=\"#关系模型\">#</a> 关系模型</h2>\n<ol>\n<li>\n<h3 id=\"对象的属性描述\"><a class=\"anchor\" href=\"#对象的属性描述\">#</a> 对象的属性描述</h3>\n<p>客户 (&lt;u&gt; 客户编号 &lt;/u&gt;, 电子邮箱，登录密码，身份证，联系方式，姓名)<br />\n 银行卡 (&lt;u&gt; 卡号 &lt;/u&gt;, 类型，客户编号)<br />\n 理财产品 (&lt;u&gt; 理财产品编号 &lt;/u&gt;, 理财年限，购买金额，产品名称，产品描述)<br />\n 基金 (&lt;u&gt; 基金编号 &lt;/u&gt;, 基金名称，基金类型，风险等级，基金管理者，基金金额)<br />\n 保险 (&lt;u&gt; 保险编号 &lt;/u&gt;, 保险名称，适用人群，保险项目，保险金额，保险年限)<br />\n 资产 (&lt;u&gt; 客户编号 &lt;/u&gt;,&lt;u &gt; 资产编号 &lt;/u&gt;, 状态，购买数量，收益，购买时间)</p>\n</li>\n<li>\n<h3 id=\"对象之间关系描述\"><a class=\"anchor\" href=\"#对象之间关系描述\">#</a> 对象之间关系描述</h3>\n<p>一个客户可以购买多种理财产品<br />\n可以办理多张银行卡<br />\n一个客户可以购买多种保险<br />\n一个客户可以购买多种基金<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120145443968.png\" alt=\"image-20211120145443968\" /></p>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<h2 id=\"物理设计与数据字典\"><a class=\"anchor\" href=\"#物理设计与数据字典\">#</a> 物理设计与数据字典</h2>\n<ol>\n<li>\n<h3 id=\"表及其属性\"><a class=\"anchor\" href=\"#表及其属性\">#</a> 表及其属性</h3>\n<p>client(c_id,c_name,c_mail,c_id_card,c_phone,c_password)<br />\nbank_card(b_id,b_type,b_c_id)<br />\nproperty(p_id,p_c_id,p_i_id,p_status,p_amount,p_get_time,p_income,p_type)<br />\nfund(f_name,f_id,f_type,f_amount,risk_level,f_manager)<br />\ninsurance(i_name,i_id,i_amount,i_person,i_year,i_project)<br />\nf_product(fp_id,fp_name，fp_description，fp_amount，fp_year)</p>\n</li>\n<li>\n<h3 id=\"数据字典\"><a class=\"anchor\" href=\"#数据字典\">#</a> 数据字典</h3>\n<ol>\n<li>\n<h4 id=\"表1-1-client表\"><a class=\"anchor\" href=\"#表1-1-client表\">#</a> 表 1-1 client 表</h4>\n<table>\n<thead>\n<tr>\n<th><strong>字段名称</strong></th>\n<th><strong>字段类型</strong></th>\n<th><strong>约束</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>c_id</td>\n<td>INTEGER</td>\n<td>PRIMARY KEY</td>\n<td>客户编码</td>\n</tr>\n<tr>\n<td>c_name</td>\n<td>VARCHAR(100)</td>\n<td>NOT NULL</td>\n<td>客户名称</td>\n</tr>\n<tr>\n<td>c_mail</td>\n<td>CHAR(30)</td>\n<td>UNIQUE</td>\n<td>客户邮箱</td>\n</tr>\n<tr>\n<td>c_id_card</td>\n<td>CHAR(20)</td>\n<td>UNIQUE NOT NULL</td>\n<td>客户身份证</td>\n</tr>\n<tr>\n<td>c_phone</td>\n<td>CHAR(20)</td>\n<td>UNIQUE NOT NULL</td>\n<td>客户手机号</td>\n</tr>\n<tr>\n<td>c_password</td>\n<td>CHAR(20)</td>\n<td>NOT NULL</td>\n<td>客户登录密码</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<h4 id=\"表1-2bank_card表\"><a class=\"anchor\" href=\"#表1-2bank_card表\">#</a> 表 1-2bank_card 表</h4>\n<table>\n<thead>\n<tr>\n<th><strong>字段名称</strong></th>\n<th><strong>字段类型</strong></th>\n<th><strong>约束</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>b_id</td>\n<td>INTEGER</td>\n<td>PRIMARY KEY</td>\n<td>银行卡号</td>\n</tr>\n<tr>\n<td>b_type</td>\n<td>CHAR(20)</td>\n<td>NOT NULL</td>\n<td>银行卡类型</td>\n</tr>\n<tr>\n<td>b_c_id</td>\n<td>INTERGER</td>\n<td>NOT NULL  &lt;br /&gt;FOREIGNKEY</td>\n<td>客户编号</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<h4 id=\"表1-3-property资产表\"><a class=\"anchor\" href=\"#表1-3-property资产表\">#</a> 表 1-3 property 资产表</h4>\n<table>\n<thead>\n<tr>\n<th><strong>字段名称</strong></th>\n<th><strong>字段类型</strong></th>\n<th><strong>约束</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>p_id</td>\n<td>INTEGER</td>\n<td>PRIMARY KEY</td>\n<td>资产编号</td>\n</tr>\n<tr>\n<td>p_c_id</td>\n<td>INTEGER</td>\n<td>NOT NULL&lt;br /&gt;FOREIGN KEY</td>\n<td>客户编号 &lt;br /&gt; 外键，对应 client 中的 c_id</td>\n</tr>\n<tr>\n<td>p_i_id</td>\n<td>INTEGER</td>\n<td>NOT NULL&lt;br /&gt;FOREIGN KEY</td>\n<td>商品编号，对应三种产品的 id</td>\n</tr>\n<tr>\n<td>p_status</td>\n<td>CHAR(20)</td>\n<td>NOT NULL</td>\n<td>状态</td>\n</tr>\n<tr>\n<td>p_amount</td>\n<td>INTERGER</td>\n<td>NOT NULL</td>\n<td>购买数量</td>\n</tr>\n<tr>\n<td>p_get_time</td>\n<td>DATE</td>\n<td>NOT NULL</td>\n<td>购买时间</td>\n</tr>\n<tr>\n<td>p_income</td>\n<td>INTERGER</td>\n<td></td>\n<td>收益</td>\n</tr>\n<tr>\n<td>p_type</td>\n<td>INTERGER</td>\n<td>NOT NULL</td>\n<td>1 代表是理财产品，2 代表保险，3 代表基金</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<h4 id=\"表1-4-f_products-理财产品表\"><a class=\"anchor\" href=\"#表1-4-f_products-理财产品表\">#</a> 表 1-4 f_products 理财产品表</h4>\n<table>\n<thead>\n<tr>\n<th><strong>字段名称</strong></th>\n<th><strong>字段类型</strong></th>\n<th><strong>约束</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>fp_id</td>\n<td>INTEGER</td>\n<td>PRIMARY KEY</td>\n<td>理财产品编号</td>\n</tr>\n<tr>\n<td>fp_year</td>\n<td>INTEGER</td>\n<td></td>\n<td>理财年限</td>\n</tr>\n<tr>\n<td>fp_amount</td>\n<td>INTERGER</td>\n<td></td>\n<td>购买金额</td>\n</tr>\n<tr>\n<td>fp_name</td>\n<td>VARCHAR(200)</td>\n<td>NOT NULL</td>\n<td>产品名称</td>\n</tr>\n<tr>\n<td>fp_description</td>\n<td>VARCHAR(2000)</td>\n<td>NOT NULL</td>\n<td>产品描述</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<h4 id=\"表1-5-insurance-保险表\"><a class=\"anchor\" href=\"#表1-5-insurance-保险表\">#</a> 表 1-5 insurance 保险表</h4>\n<table>\n<thead>\n<tr>\n<th><strong>字段名称</strong></th>\n<th><strong>字段类型</strong></th>\n<th><strong>约束</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>i_id</td>\n<td>INTEGER</td>\n<td>PRIMARY KEY</td>\n<td>保险编号</td>\n</tr>\n<tr>\n<td>i_name</td>\n<td>VARCHAR(100)</td>\n<td>NOT NULL</td>\n<td>保险名称</td>\n</tr>\n<tr>\n<td>i_person</td>\n<td>CHAR(30)</td>\n<td></td>\n<td>适用人群</td>\n</tr>\n<tr>\n<td>i_project</td>\n<td>VARCHAR(200)</td>\n<td></td>\n<td>保险项目</td>\n</tr>\n<tr>\n<td>i_amount</td>\n<td>INTERGER</td>\n<td></td>\n<td>保险金额</td>\n</tr>\n<tr>\n<td>i_year</td>\n<td>CHAR(20)</td>\n<td>NOT NULL</td>\n<td>保险年限</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<h4 id=\"表1-6-fund基金表\"><a class=\"anchor\" href=\"#表1-6-fund基金表\">#</a> 表 1-6 fund 基金表</h4>\n<table>\n<thead>\n<tr>\n<th><strong>字段名称</strong></th>\n<th><strong>字段类型</strong></th>\n<th><strong>约束</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>f_id</td>\n<td>INTEGER</td>\n<td>PRIMARY KEY</td>\n<td>基金编号</td>\n</tr>\n<tr>\n<td>f_name</td>\n<td>VARCHAR(100)</td>\n<td>NOT NULL</td>\n<td>基金名称</td>\n</tr>\n<tr>\n<td>f_type</td>\n<td>CHAR(30)</td>\n<td></td>\n<td>基金类型</td>\n</tr>\n<tr>\n<td>f_risk</td>\n<td>INTERGER</td>\n<td></td>\n<td>风险等级</td>\n</tr>\n<tr>\n<td>f_manager</td>\n<td>INTERGER</td>\n<td>NOT NULL</td>\n<td>基金管理者</td>\n</tr>\n<tr>\n<td>f_amount</td>\n<td>INTERGER</td>\n<td>NOT NULL</td>\n<td>基金金额</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>创建数据库表</p>\n<ol>\n<li>\n<p>创建 finance 数据库作为项目数据库，数据库编码为 UTF-8。（2 分）</p>\n<ol>\n<li>切换到 omm 用户<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120152854123.png\" alt=\"image-20211120152854123\" /></li>\n<li>启动数据库服务<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120152924367.png\" alt=\"image-20211120152924367\" /></li>\n<li>登入 postres 数据库 (为了在里面创建新的数据库)<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120152949937.png\" alt=\"image-20211120152949937\" /></li>\n<li>创建 finance 数据库，设置编码为 UTF-8<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120153159839.png\" alt=\"image-20211120153159839\" /></li>\n</ol>\n</li>\n<li>\n<p>连接 finance 数据库，创建名为 finance 的 schema，并设置 finance 为当前的 schema。（2 分）</p>\n<ol>\n<li>连接 finance 数据库<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120153222258.png\" alt=\"image-20211120153222258\" /></li>\n<li>创建名为 finance 的 schema，并设置 finance 为当前的 schema<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120153259340.png\" alt=\"image-20211120153259340\" /></li>\n</ol>\n</li>\n<li>\n<p>在 finance 模式下完成金融管理系统中所有数据库对象（数据表）的创建，并完成数据的填充。其中客户数据不少于 20 条，银行卡数据不少于 10 条，其他数据不少于 5 条；（6 分）</p>\n<ol>\n<li>\n<p>数据表创建</p>\n<ol>\n<li>\n<p>客户表创建</p>\n<p><img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120162145657.png\" alt=\"image-20211120162145657\" /></p>\n<p><img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120162136314.png\" alt=\"image-20211120162136314\" /></p>\n</li>\n<li>\n<p>银行卡表创建<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120161519458.png\" alt=\"image-20211120161519458\" /><br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120161510470.png\" alt=\"image-20211120161510470\" /></p>\n</li>\n<li>\n<p>理财产品表创建<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120161622995.png\" alt=\"image-20211120161622995\" /></p>\n<p><img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120161716375.png\" alt=\"image-20211120161716375\" /></p>\n</li>\n<li>\n<p>保险信息表创建</p>\n<p><img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120161636166.png\" alt=\"image-20211120161636166\" /><br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120161724463.png\" alt=\"image-20211120161724463\" /></p>\n</li>\n<li>\n<p>基金信息表创建</p>\n<p><img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120161645388.png\" alt=\"image-20211120161645388\" /></p>\n<p><img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120161745238.png\" alt=\"image-20211120161745238\" /></p>\n</li>\n<li>\n<p>资产信息表创建</p>\n<p><img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120161659959.png\" alt=\"image-20211120161659959\" /></p>\n<p><img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120161759138.png\" alt=\"image-20211120161759138\" /></p>\n</li>\n</ol>\n</li>\n<li>\n<p>添加数据</p>\n<ol>\n<li>\n<p>客户信息添加<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120163251246.png\" alt=\"image-20211120163251246\" /></p>\n</li>\n<li>\n<p>银行卡数据填充<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120163727388.png\" alt=\"image-20211120163727388\" /></p>\n</li>\n<li>\n<p>理财产品填充</p>\n<p>INSERT INTO finance.f_products</p>\n<p>(fp_id  ,fp_year   ,fp_amount  ,fp_name   ,fp_description ) VALUES</p>\n<p>(1    ,2      ,4000000   ,' 储蓄 '   ,' 储蓄理财产品 '),</p>\n<p>(2    ,1      ,3000    ,' 债券 '   ,' 债券是政府、企业、银行等债务人为筹集资金，按照法定程序发行并向债权人承诺于指定日期还本付息的有价证券 '),</p>\n<p>(3    ,1      ,200000   ,' 股票 '   ,' 股份公司为筹集资金而发行给各个股东作为持股凭证并借以取得股息和红利的一种有价证券 '),</p>\n<p>(4    ,3      ,2000    ,' 国债 '   ,' 国家以其信用为基础，按照债的一般原则，通过向社会筹集资金所形成的债权债务关系 '),</p>\n<p>(5    ,2      ,10000    ,' 大宗商品 ' ,' 与大宗商品期货挂钩的理财产品。目前市场上主要以挂钩黄金、石油、农产品的理财产品居多 ')<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120174858479.png\" alt=\"image-20211120174858479\" /></p>\n</li>\n<li>\n<p>保险产品填充</p>\n<p>INSERT INTO finance.insurance(i_name,i_id,i_amount,i_person,i_year,i_project) VALUES</p>\n<p>(' 意外保险 ',3,5000,' 所有人 ',20,' 平安保险 '),</p>\n<p>(' 医疗保险 ',4,2000,' 所有人 ',20,' 平安保险 '),</p>\n<p>(' 健康保险 ',1,2000,' 老年人 ',10,' 平安保险 '),</p>\n<p>(' 人寿保险 ',2,3000,' 老年人 ',10,' 平安保险 '),</p>\n<p>(' 财产损失保险 ',5,1500,' 中年人 ',3,' 平安保险 ');<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120175159475.png\" alt=\"image-20211120175159475\" /></p>\n</li>\n<li>\n<p>基金表格填充</p>\n<p>INSERT INTO finance.fund (f_id,fp_name,f_type,f_risk,f_manager,f_amount) VALUES</p>\n<p>(1,' 股票基金 ',' 股票型 ',3,1,200000),</p>\n<p>(2,' 债券基金 ',' 债券型 ',2,2,3000),</p>\n<p>(3,' 投资基金 ',' 债券型 ',3,2,1000),</p>\n<p>(4,' 国债 ',' 货币型 ',1,4,2000),</p>\n<p>(5,' 期货 ',' 期货型 ',2,5,1500);</p>\n<p><img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120180449122.png\" alt=\"image-20211120180449122\" /></p>\n</li>\n<li>\n<p>资产表格填充</p>\n<p>INSERT INTO finance.property</p>\n<p>(p_id  , p_c_id   ,p_i_id , p_status  , p_amount  ,p_get_time   ,p_income  ,p_type ) VALUES</p>\n<p>(1    ,1      ,1    ,' 可用 '   ,100     ,'2021-11-20'  ,2000    ,1),</p>\n<p>(2    ,1      ,2    ,' 可用 '   ,100     ,'2021-11-21'  ,3020    ,1),</p>\n<p>(3    ,1      ,1    ,' 冻结 '   ,100     ,'2021-11-20'  ,2000    ,2),</p>\n<p>(4    ,1      ,4    ,' 可用 '   ,101     ,'2021-11-10'  ,3000    ,3),</p>\n<p>(5    ,2      ,5    ,' 可用 '   ,100     ,'2021-11-20'  ,2000    ,2)</p>\n<p><img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120181110730.png\" alt=\"image-20211120181110730\" /></p>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>对表添加外键约束，在银行信息表和资产信息表中，都存在每个银行卡必须有一个持卡者、每份资产必须都有一个资产拥有者这样的对应关系。因此针对这种对应关系，创建外键约束。（4 分）</p>\n<p>添加外键约束</p>\n<ol>\n<li>\n<p>信用卡的外键<br />\n ALTER TABLE finance.bank_card ADD CONSTRAINT fk_c_id FOREIGN KEY (b_c_id) REFERENCES finance.client (c_id) ON DELETE CASCADE;<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120182046151.png\" alt=\"image-20211120182046151\" /></p>\n</li>\n<li>\n<p>资产的外键<br />\n ALTER TABLE finance.property ADD CONSTRAINT fk_pro_c_id FOREIGN KEY (p_c_id) REFERENCES finance.client (c_id) ON DELETE CASCADE;<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120182231938.png\" alt=\"image-20211120182231938\" /></p>\n</li>\n</ol>\n</li>\n<li>\n<p>在理财产品表、保险信息表和基金信息表中，都存在金额这个属性，在现实生活中，金额不会存在负数。因此针对表中金额的属性，增加大于 0 的约束条件。（4 分）</p>\n<p>增加大于 0 的约束</p>\n<ol>\n<li>\n<p>f_products 表<br />\n ALTER table finance.f_products ADD CONSTRAINT c_p_mount CHECK (fp_amount&gt;=0);<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120182747860.png\" alt=\"image-20211120182747860\" /></p>\n</li>\n<li>\n<p>fund 表</p>\n<p>ALTER table finance.fund ADD CONSTRAINT c_f_mount CHECK (f_amount &gt;=0);<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120182809449.png\" alt=\"image-20211120182809449\" /></p>\n</li>\n<li>\n<p>insurance 表<br />\n ALTER table finance.insurance ADD CONSTRAINT c_i_mount CHECK (i_amount&gt;=0);<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120182806605.png\" alt=\"image-20211120182806605\" /></p>\n</li>\n</ol>\n</li>\n<li>\n<p>输出：</p>\n<ol>\n<li>\n<p>输出查询所有表的数据字典的查询语句和结果，可以截图或者复制黏贴代码。(基本都在之前有展示，这里对所有的表及 schema 进行了一次查询)<br />\nselect * from pg_tables;<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120183633861.png\" alt=\"image-20211120183633861\" /></p>\n</li>\n<li>\n<p>输出查询所有表的数据的查询语句和结果，可以截图或者复制黏贴代码。</p>\n<ol>\n<li>\n<p>client 表<br />\n select * from finance.client;</p>\n<p><img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120182955194.png\" alt=\"image-20211120182955194\" /></p>\n</li>\n<li>\n<p>bank_card 表<br />\n select * from finance.bank_card;<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120183115059.png\" alt=\"image-20211120183115059\" /></p>\n</li>\n<li>\n<p>fund 表<br />\n select * from finance.fund;<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120183213621.png\" alt=\"image-20211120183213621\" /></p>\n</li>\n<li>\n<p>f_products 表<br />\n select * from finance.f_products;<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120183232153.png\" alt=\"image-20211120183232153\" /></p>\n</li>\n<li>\n<p>insurance 表<br />\n select * from finance.insurance;<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120183242518.png\" alt=\"image-20211120183242518\" /></p>\n</li>\n<li>\n<p>property 表<br />\n select * from finance.property;<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120183254782.png\" alt=\"image-20211120183254782\" /></p>\n</li>\n</ol>\n</li>\n<li>\n<p>输出所有创建约束的语句和创建结果，可以截图或者复制黏贴代码 (这在之前已经放上了)</p>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>对表中的数据进行查询操作</p>\n<ol>\n<li>\n<p>l  至少完成 1 条单表查询和 1 条表查询。（4 分）<br />\n单表查询 -- 查询客户表中所有的客户 id</p>\n<p>select c_id from finance.client;<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120183930730.png\" alt=\"image-20211120183930730\" /></p>\n<p>表查询<br />\n select c_name from finance.client;<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120191355193.png\" alt=\"image-20211120191355193\" /></p>\n</li>\n<li>\n<p>l  至少完成两条聚合查询，例如查询用户表中有多少个用户；查询保险信息表中，保险金额的平均值等。（4 分）<br />\n<strong>查询 property 表的 income 平均值</strong><br />\n select avg (p_income) from finance.property<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120191618236.png\" alt=\"image-20211120191618236\" /><br />\n<strong> 查询用户表中用户总数</strong><br />\n select count (*) from finance.client;<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120191822353.png\" alt=\"image-20211120191822353\" /></p>\n</li>\n<li>\n<p>l  至少完成 3 条连接查询，例如：半连接、反连接、多表查询和子查询。（6 分）</p>\n<ol>\n<li>等值连接查询，查询每个用户及其拥有的资产<br />\n select finance.client.*,finance.property. *<br />\nfrom finance.client,finance.property<br />\nwhere finance.client.c_id=finance.property.p_c_id;<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120192143231.png\" alt=\"image-20211120192143231\" /></li>\n<li>自身连接，在 fund 表中对每一个基金项，查询 manager 和自身 id 相同的基金<br />\n select first.*,second.f_manager<br />\nfrom finance.fund first,finance.fund second<br />\nwhere first.f_id = second.f_manager<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120192923196.png\" alt=\"image-20211120192923196\" /></li>\n<li>子查询，查询和 p_id=3 的资产处于相同状态的资产 (然后发现就它自己冻结着)<br />\nselect * from finance.property<br />\nwhere p_status=<br />\n(select p_status from finance.property where p_id=3);<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120193259515.png\" alt=\"image-20211120193259515\" /></li>\n</ol>\n</li>\n<li>\n<p>至少完成 1 条 ORDER BY 查询。（2 分）<br />\n将资产按照收益逆序输出<br />\n select * from finance.property order by p_income desc;<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120193418297.png\" alt=\"image-20211120193418297\" /></p>\n</li>\n<li>\n<p>至少完成 1 条 GROUP BY……HAVING 查询。（4 分）</p>\n</li>\n<li>\n<p>查询收益在 2000 及以上的资产及其平均收益，将结果按 p_id 分组显示，且只显示平均收益大于 2500 的组<br />\n select *,avg (p_income)   from finance.property<br />\nwhere p_income&gt;=2000</p>\n<p>group by p_id<br />\nhaving avg(p_income)&gt;=2500;<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120194044403.png\" alt=\"image-20211120194044403\" /></p>\n</li>\n<li>\n<p>查询基金，将其按 f_id 分组，且只显示平均数量大于等于 2000 的组<br />\n select *,avg (f_amount) from finance.fund<br />\ngroup by f_id<br />\nhaving avg(f_amount)&gt;=2000;<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120194430725.png\" alt=\"image-20211120194430725\" /></p>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"45-创建视图和索引\"><a class=\"anchor\" href=\"#45-创建视图和索引\">#</a> 4.5 创建视图和索引</h3>\n<ol>\n<li>\n<p>创建一个视图</p>\n<p>查看 client 中属性，除了 c_mail 属性<br />\n create view see_client<br />\nas<br />\nselect c_id,c_name,c_id_card,c_phone,c_password<br />\nfrom finance.client<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120195705769.png\" alt=\"image-20211120195705769\" /></p>\n</li>\n<li>\n<p>修改视图</p>\n<p>修改视图所属 schema<br />\nalter view see_client set schema finance;<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120202011203.png\" alt=\"image-20211120202011203\" /></p>\n</li>\n<li>\n<p>使用视图进行查询<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120202005604.png\" alt=\"image-20211120202005604\" /></p>\n</li>\n<li>\n<p>重命名视图<br />\n alter view finance.see_client<br />\nrename to oh_my_god;<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120202200841.png\" alt=\"image-20211120202200841\" /></p>\n</li>\n<li>\n<p>删除视图<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120202227819.png\" alt=\"image-20211120202227819\" /></p>\n</li>\n<li>\n<p>创建索引<br />\n为客户电话号码创建索引<br />\n CREATE INDEX index_phone on finance.client (c_phone) ;<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120202553719.png\" alt=\"image-20211120202553719\" /></p>\n</li>\n<li>\n<p>重建索引<br />\n对整个客户表重建索引<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120202715402.png\" alt=\"image-20211120202715402\" /></p>\n</li>\n<li>\n<p>重命名索引<br />\n alter index finance.index_phone rename to ind_phone;<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120202831047.png\" alt=\"image-20211120202831047\" /></p>\n</li>\n<li>\n<p>删除索引<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120202849544.png\" alt=\"image-20211120202849544\" /></p>\n</li>\n</ol>\n<h3 id=\"146-数据修改和删除5分\"><a class=\"anchor\" href=\"#146-数据修改和删除5分\">#</a> 1.4.6 数据修改和删除（5 分）</h3>\n<p>任务：</p>\n<p>l  修改数据：至少修改 2 个不同的数据。（3 分）</p>\n<ol>\n<li>\n<p>将 client 表中第 1 个元素的值 c_name 改为 ' 年没怀念'<br />\n 之前的表<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120205008902.png\" alt=\"image-20211120205008902\" /><br />\n 修改语句:<br />\nupdate finance.client<br />\nset c_name=' 年没怀念'<br />\nwhere c_id=1;<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120205223012.png\" alt=\"image-20211120205223012\" /></p>\n<p>修改后表情况<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120205200129.png\" alt=\"image-20211120205200129\" /></p>\n</li>\n<li>\n<p>将 property 中 p_get_time 小于 2021-11-11 00:00:00 的值修改为 2021-11-19 00:00:00</p>\n<p>修改前状态<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120205546236.png\" alt=\"image-20211120205546236\" /><br />\n 修改<br />\n update finance.property<br />\nset p_get_time='2021-11-19'<br />\nwhere p_get_time&lt;'2021-11-11';<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120205628164.png\" alt=\"image-20211120205628164\" /><br />\n 修改后状态<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120205638384.png\" alt=\"image-20211120205638384\" /></p>\n</li>\n</ol>\n<p>l  删除指定数据：至少删除 2 个不同数据表的数据。（2 分）</p>\n<ol>\n<li>\n<p>将 finance.property 中 p_amount=101 的数据删除</p>\n<p>删除前表情况</p>\n<p><img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120205638384.png\" alt=\"image-20211120205638384\" /></p>\n<p>删除<br />\n delete from finance.property where p_amount=101;</p>\n<p><img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120210444230.png\" alt=\"image-20211120210444230\" /></p>\n</li>\n</ol>\n<p>​\t\t删除后表情况<br />\n​\t\t<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120210451058.png\" alt=\"image-20211120210451058\" /></p>\n<ol start=\"2\">\n<li>\n<p>删掉 c_id&gt;20 的用户信息</p>\n<p>删除前表情况</p>\n<p><img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120210652108.png\" alt=\"image-20211120210652108\" /></p>\n<p>删除操作</p>\n<p>delete from finance.client where c_id&gt;20;<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120210705838.png\" alt=\"image-20211120210705838\" /></p>\n</li>\n</ol>\n<p>​\t\t删除后表情况<br />\n​\t\t<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120210710547.png\" alt=\"image-20211120210710547\" /></p>\n<h3 id=\"147-创建新用户6分\"><a class=\"anchor\" href=\"#147-创建新用户6分\">#</a> 1.4.7 创建新用户（6 分）</h3>\n<p>任务：</p>\n<ol>\n<li>\n<p>新用户的创建和授权：创建用户 dbuser，密码为 Gauss#3demo；给用户 dbuser 授予 finance 数据库下银行卡信息表的查询和插入权限，并将 finance 模式的权限也授予 dbuser 用户。（3 分）</p>\n<p>创建用户<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120210919044.png\" alt=\"image-20211120210919044\" /></p>\n<p>给用户 dbuser 授予 finance 数据库下银行卡信息表的查询和插入权限，并将 finance 模式的权限也授予 dbuser 用户<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120210938886.png\" alt=\"image-20211120210938886\" /></p>\n</li>\n<li>\n<p>新用户连接数据库：使用新用户连接 finance 数据库；访问 finance 数据库的银行卡信息表。（2 分）</p>\n<p>新用户连接</p>\n<p><img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120211203343.png\" alt=\"image-20211120211203343\" /><br />\n 新用户访问 finance 数据库的银行卡信息表</p>\n<p><img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120211232019.png\" alt=\"image-20211120211232019\" /></p>\n</li>\n<li>\n<p>删除 finance 模式。（1 分）<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120211528768.png\" alt=\"image-20211120211528768\" /></p>\n</li>\n</ol>\n<h3 id=\"148-使用jdbc连接opengauss数据库\"><a class=\"anchor\" href=\"#148-使用jdbc连接opengauss数据库\">#</a> 1.4.8 使用 jdbc 连接 openGauss 数据库</h3>\n<ol>\n<li>\n<p>创建测试数据库 demo；<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120211928291.png\" alt=\"image-20211120211928291\" /></p>\n</li>\n<li>\n<p>创建名为 demo 的 schema，并设置 demo 为当前的 schema<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120211933670.png\" alt=\"image-20211120211933670\" /><br />\n 设置搜索路径为 demo</p>\n<p>SET search_path TO demo;</p>\n</li>\n<li>\n<p>创建测试表 websites（id,name,url），数据为（'1', 'openGauss', '<span class=\"exturl\" data-url=\"aHR0cHM6Ly9vcGVuZ2F1c3Mub3JnL3poLycpJUVGJUJDJThDKCcy\">https://opengauss.org/zh/')，('2</span>', ' 华为云 ', '<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaHVhd2VpY2xvdWQuY29tLw==\">https://www.huaweicloud.com/</span>'), ('3', 'openEuler', '<span class=\"exturl\" data-url=\"aHR0cHM6Ly9vcGVuZXVsZXIub3JnL3poLw==\">https://openeuler.org/zh/</span>'), ('4', ' 华为 support 中心 ', '<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdXBwb3J0Lmh1YXdlaWNsb3VkLmNvbS8=\">https://support.huaweicloud.com/</span>')。（3 分）<br />\ncreate table websites<br />\n(<br />\nid Integer primary key,<br />\nname varchar(200),<br />\nurl varchar(200)</p>\n<p>);<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120212236363.png\" alt=\"image-20211120212236363\" /><br />\n 插入数据</p>\n<p>INSERT INTO websites (id,name,url) VALUES</p>\n<p>('1', 'openGauss', '<span class=\"exturl\" data-url=\"aHR0cHM6Ly9vcGVuZ2F1c3Mub3JnL3poLw==\">https://opengauss.org/zh/</span>'),</p>\n<p>('2', ' 华为云 ', '<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaHVhd2VpY2xvdWQuY29tLw==\">https://www.huaweicloud.com/</span>'),</p>\n<p>('3', 'openEuler', '<span class=\"exturl\" data-url=\"aHR0cHM6Ly9vcGVuZXVsZXIub3JnL3poLw==\">https://openeuler.org/zh/</span>'),</p>\n<p>('4', ' 华为 support 中心 ', '<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdXBwb3J0Lmh1YXdlaWNsb3VkLmNvbS8=\">https://support.huaweicloud.com/</span>')</p>\n<p><img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120212401022.png\" alt=\"image-20211120212401022\" /></p>\n</li>\n<li>\n<p>查看入站规则是否包括 tcp26000 端口<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120213457003.png\" alt=\"image-20211120213457003\" /></p>\n</li>\n<li>\n<p>查看 java 版本是否为 8<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120213634213.png\" alt=\"image-20211120213634213\" /></p>\n</li>\n<li>\n<p>创建项目，引入 postgres.jar 包<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211206104756935.png\" alt=\"image-20211206104756935\" /></p>\n</li>\n<li>\n<p>写下测试程序如下<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211206104819179.png\" alt=\"image-20211206104819179\" /><br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211206104832554.png\" alt=\"image-20211206104832554\" /></p>\n</li>\n<li>\n<p>结果<br />\n<img data-src=\"C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211206104851481.png\" alt=\"image-20211206104851481\" /></p>\n</li>\n</ol>\n<p>本实验完成</p>\n",
            "tags": [
                "大三",
                "数据库",
                "exp8"
            ]
        },
        {
            "id": "http://example.com/2021/12/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7/",
            "url": "http://example.com/2021/12/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7/",
            "title": "",
            "date_published": "2021-12-06T11:03:26.530Z",
            "content_html": "<h1 id=\"数据库的安全性\"><a href=\"#数据库的安全性\" class=\"headerlink\" title=\"数据库的安全性\"></a>数据库的安全性</h1><h2 id=\"8-4-存取控制\"><a href=\"#8-4-存取控制\" class=\"headerlink\" title=\"8.4 存取控制\"></a>8.4 存取控制</h2><h6 id=\"用户权限定义和合法的权限检查机制一起组成了DBMS的安全子系统\"><a href=\"#用户权限定义和合法的权限检查机制一起组成了DBMS的安全子系统\" class=\"headerlink\" title=\"用户权限定义和合法的权限检查机制一起组成了DBMS的安全子系统\"></a>用户权限定义和合法的权限检查机制一起组成了DBMS的安全子系统</h6><p>常用存取控制方法</p>\n<h4 id=\"自主存取控制\"><a href=\"#自主存取控制\" class=\"headerlink\" title=\"自主存取控制\"></a>自主存取控制</h4><p>灵活</p>\n<p>同一用户对不同的数据对象有不同的…</p>\n<h5 id=\"授权粒度\"><a href=\"#授权粒度\" class=\"headerlink\" title=\"授权粒度\"></a>授权粒度</h5><p>授权的数据对象粒度</p>\n<p>数据库,表,属性列,行…</p>\n<ol>\n<li>实现–GRANT REVOKE</li>\n<li>数据库角色<br>在用户量较大的情况下引入<br>定义:一组与数据库操作有关的角色<br>可以为具有相同权限的用户创建一个角色</li>\n<li>权限传播<br>…</li>\n</ol>\n<h4 id=\"强制存取控制\"><a href=\"#强制存取控制\" class=\"headerlink\" title=\"强制存取控制\"></a>强制存取控制</h4><h5 id=\"主体与客体\"><a href=\"#主体与客体\" class=\"headerlink\" title=\"主体与客体\"></a>主体与客体</h5><h5 id=\"敏感度标记\"><a href=\"#敏感度标记\" class=\"headerlink\" title=\"敏感度标记\"></a>敏感度标记</h5><p>DBMS为每个实例指派一个敏感度标记</p>\n<p>敏感度分为若干级别(绝密..</p>\n<p>主体的敏感度标记称为许可证级别</p>\n<p>客体的称为密级</p>\n<p>MAC机制就是通过对比主体的Label和客体的Label,最终确定主体是否能够存取客体</p>\n<h5 id=\"强制存取控制规则\"><a href=\"#强制存取控制规则\" class=\"headerlink\" title=\"强制存取控制规则\"></a>强制存取控制规则</h5><ol>\n<li>读 主体许可证级别&gt;=客体密级</li>\n<li>写 主体的许可证级别=客体密级</li>\n<li>修正规则*****<ol>\n<li>waiting for write</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"权限-只有具有合法的许可证才能存取\"><a href=\"#权限-只有具有合法的许可证才能存取\" class=\"headerlink\" title=\"权限,只有具有合法的许可证才能存取\"></a>权限,只有具有合法的许可证才能存取</h4><p>每一个用户被授予某一个级别的许可证</p>\n<p>对于任意一个对象,只有具有合法的许可证才能存取</p>\n<h2 id=\"8-5-视图机制\"><a href=\"#8-5-视图机制\" class=\"headerlink\" title=\"8.5 视图机制\"></a>8.5 视图机制</h2>",
            "tags": []
        },
        {
            "id": "http://example.com/2021/12/06/hello-world/",
            "url": "http://example.com/2021/12/06/hello-world/",
            "title": "Hello World",
            "date_published": "2021-12-06T05:18:37.655Z",
            "content_html": "<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n",
            "tags": []
        }
    ]
}