<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>年没怀念der博客</title>
    <subtitle></subtitle>
    <icon>http://example.com/images/favicon.ico</icon>
    <link href="http://example.com" />
    <author>
      <name>nmhn</name>
    </author>
    <updated>2021-12-07T01:29:22.668Z</updated>
    <entry>
        <id>http://example.com/2021/12/07/%E5%A4%96%E8%AE%BE/</id>
        <title></title>
        <link rel="alternate" href="http://example.com/2021/12/07/%E5%A4%96%E8%AE%BE/"/>
        <content type="html">&lt;hr /&gt;
&lt;p&gt;title: 21/12/6 设备管理&lt;br /&gt;
 date: 2021-12-07 08:42:00&lt;br /&gt;
tags: 操作系统，计算机&lt;br /&gt;
 categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[大三，操作系统]&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1 id=&#34;设备管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设备管理&#34;&gt;#&lt;/a&gt; 设备管理&lt;/h1&gt;
&lt;h2 id=&#34;1-控制器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-控制器&#34;&gt;#&lt;/a&gt; 1. 控制器&lt;/h2&gt;
&lt;h6 id=&#34;控制器的任务是在外设与内存之间完成比特流与字节块之间的转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#控制器的任务是在外设与内存之间完成比特流与字节块之间的转换&#34;&gt;#&lt;/a&gt; 控制器的任务是在外设与内存之间完成比特流与字节块之间的转换&lt;/h6&gt;
&lt;h3 id=&#34;11寄存器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11寄存器&#34;&gt;#&lt;/a&gt; 1.1 寄存器&lt;/h3&gt;
&lt;p&gt;每个控制器有几个寄存器，操作系统可以往里写东西&lt;/p&gt;
&lt;h3 id=&#34;12数据缓冲区&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12数据缓冲区&#34;&gt;#&lt;/a&gt; 1.2 数据缓冲区&lt;/h3&gt;
&lt;p&gt;有些控制器上有，用于大数据传输&lt;/p&gt;
&lt;h4 id=&#34;121磁盘控制器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#121磁盘控制器&#34;&gt;#&lt;/a&gt; 1.2.1 磁盘控制器&lt;/h4&gt;
&lt;p&gt;将位流组装为字节存入缓冲区中，形成字节为单位的块&lt;/p&gt;
&lt;h2 id=&#34;2控制方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2控制方式&#34;&gt;#&lt;/a&gt; 2. 控制方式&lt;/h2&gt;
&lt;h4 id=&#34;21-程序直接控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21-程序直接控制&#34;&gt;#&lt;/a&gt; 2.1 程序直接控制&lt;/h4&gt;
&lt;p&gt;cpu 控制全过程&lt;/p&gt;
&lt;p&gt;效率低下 (CPU 一直在等)&lt;/p&gt;
&lt;h4 id=&#34;22中断控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22中断控制&#34;&gt;#&lt;/a&gt; 2.2 中断控制&lt;/h4&gt;
&lt;p&gt;cpu 发送指令，去干别的，等 io 设备准备好，利用中断通知 cpu&lt;/p&gt;
&lt;h4 id=&#34;23-dma方式适合高速大量的外设&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#23-dma方式适合高速大量的外设&#34;&gt;#&lt;/a&gt; 2.3 DMA 方式 (适合高速大量的外设)&lt;/h4&gt;
&lt;p&gt;cpu 启动指令 -&amp;gt;DMA 控制器 -&amp;gt;(data)-&amp;gt; 启动外设&lt;/p&gt;
&lt;p&gt;整个数据的传输都是在 DMA 控制下进行的&lt;/p&gt;
&lt;h4 id=&#34;24通道控制方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#24通道控制方式&#34;&gt;#&lt;/a&gt; 2.4 通道控制方式&lt;/h4&gt;
&lt;p&gt;cpu 连接多个通道，通道连接多个控制器，再连接外部设备&lt;/p&gt;
&lt;p&gt;imgtest&lt;/p&gt;
&lt;h2 id=&#34;3设备io子系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3设备io子系统&#34;&gt;#&lt;/a&gt; 3. 设备 I/o 子系统&lt;/h2&gt;
&lt;p&gt;申请设备&lt;/p&gt;
&lt;p&gt;将数据写入设备&lt;/p&gt;
&lt;p&gt;从设备读取数据&lt;/p&gt;
&lt;p&gt;释放设备&lt;/p&gt;
&lt;h4 id=&#34;分时式共享使用设备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分时式共享使用设备&#34;&gt;#&lt;/a&gt; 分时式共享使用设备&lt;/h4&gt;
&lt;p&gt;以一次 IO 为单位分时使用设备&lt;/p&gt;
&lt;h4 id=&#34;spooling方式使用外设&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spooling方式使用外设&#34;&gt;#&lt;/a&gt; SPOOLING 方式使用外设&lt;/h4&gt;
&lt;p&gt;利用磁盘上的输入输出并模拟高速外设&lt;/p&gt;
&lt;h3 id=&#34;io的组成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#io的组成&#34;&gt;#&lt;/a&gt; IO 的组成&lt;/h3&gt;
&lt;p&gt;I.O 交通管制程序&lt;/p&gt;
&lt;p&gt;调度程序&lt;/p&gt;
&lt;p&gt;设备处理程序&lt;/p&gt;
&lt;h6 id=&#34;基本思想分层构建较低层为较高层服务使较高层独立于硬件为用户提供统一接口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本思想分层构建较低层为较高层服务使较高层独立于硬件为用户提供统一接口&#34;&gt;#&lt;/a&gt; 基本思想：分层构建，较低层为较高层服务，使较高层独立于硬件，为用户提供统一接口&lt;/h6&gt;
&lt;h4 id=&#34;io设计目标&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#io设计目标&#34;&gt;#&lt;/a&gt; I/O 设计目标&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;设备独立性&lt;/strong&gt; -- 使软硬件相对独立，给上层软件更好的可移植性&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;设备统一命名&lt;/strong&gt; - 每种设备都是有名称的，如何命名以方便系统管理和用户使用是一个重要的问题&lt;/p&gt;
&lt;p&gt;采取预先设计的，统一的逻辑名称&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;出错处理&lt;/strong&gt;：数据尽可能在接近硬件层处理，仅当低层无能为力时，才将错误上交&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缓冲技术&lt;/strong&gt;：设法使数据的到达率和离去率匹配，提高系统的吞吐量&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;设备的分配&lt;/strong&gt;：共享设备和独占设备的分配问题&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <updated>2021-12-07T01:29:22.668Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/12/07/%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/</id>
        <title>21/12/7 存储管理-操作系统</title>
        <link rel="alternate" href="http://example.com/2021/12/07/%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/"/>
        <content type="html">&lt;h1 id=&#34;存储管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#存储管理&#34;&gt;#&lt;/a&gt; 存储管理&lt;/h1&gt;
&lt;h4 id=&#34;地址访问保护机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#地址访问保护机制&#34;&gt;#&lt;/a&gt; 地址访问保护机制&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h5 id=&#34;上下界寄存器和地址检查机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#上下界寄存器和地址检查机制&#34;&gt;#&lt;/a&gt; 上下界寄存器和地址检查机制&lt;/h5&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​		作业拥有上下界，执行访存指令时，判断是否越界&lt;/p&gt;
&lt;p&gt;​		要求：作业程序是&lt;strong&gt;绝对地址&lt;/strong&gt;或&lt;strong&gt;静态可浮动&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;2-基址寄存器-长度寄存器和动态地址转换机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-基址寄存器-长度寄存器和动态地址转换机制&#34;&gt;#&lt;/a&gt; 2. 基址寄存器、长度寄存器和动态地址转换机制&lt;/h5&gt;
&lt;p&gt;​		&lt;strong&gt;当作业被调度运行时，将作业所占内存基址及长度送基址、长度寄存器，在用户态每次执行访存指令时，先看访问地址是否小于长度，然后 + 基址进行访存。用户程序代码是&lt;/strong&gt;动态浮动的&lt;/p&gt;
&lt;h2 id=&#34;可变分区&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可变分区&#34;&gt;#&lt;/a&gt; 可变分区&lt;/h2&gt;
&lt;h6 id=&#34;思想预先不划分内存当作业需要时向系统申请系统从其中挖出一块给该作业&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#思想预先不划分内存当作业需要时向系统申请系统从其中挖出一块给该作业&#34;&gt;#&lt;/a&gt; 思想:&lt;strong&gt; 预先不划分内存，当作业需要时向系统申请，系统从其中挖出一块给该作业&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;Q:&amp;lt;u&amp;gt; 空闲区域如何管理 &amp;lt;/u&amp;gt;?&lt;/p&gt;
&lt;h3 id=&#34;多道连续可变分区法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多道连续可变分区法&#34;&gt;#&lt;/a&gt; &lt;strong&gt;多道连续可变分区法&lt;/strong&gt;&lt;/h3&gt;
&lt;h5 id=&#34;特点多道连续不固定划分内存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特点多道连续不固定划分内存&#34;&gt;#&lt;/a&gt; 特点：多道，连续，不固定划分内存&lt;/h5&gt;
&lt;h5 id=&#34;管理方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#管理方法&#34;&gt;#&lt;/a&gt; 管理方法&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;系统设置一个空闲块队列，初始状态时队列中只有一个连续的空闲块。作业到达后，以&lt;/strong&gt;某种策略分配空间。作业撤离时，将释放的空间加入空闲队列。&lt;/p&gt;
&lt;h5 id=&#34;释放方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#释放方法&#34;&gt;#&lt;/a&gt; 释放方法&lt;/h5&gt;
&lt;p&gt;相邻合并，否则插入&lt;/p&gt;
&lt;h5 id=&#34;例一&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#例一&#34;&gt;#&lt;/a&gt; 例一&lt;/h5&gt;
&lt;p&gt;进入执行顺序：(1,2,3)-&amp;gt;(4)-&amp;gt;(5)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211112134311512.png&#34; alt=&#34;image-20211112134311512&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;分配方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分配方法&#34;&gt;#&lt;/a&gt; 分配方法&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;首次满足法 从头到尾找，找到的第一个满足它的空间就给它&lt;/li&gt;
&lt;li&gt;最佳满足法 从队列中找一个最接近的空闲队列给它&lt;/li&gt;
&lt;li&gt;最大满足法 每次找最大的空间给最新创建的进程&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;可用空间管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可用空间管理&#34;&gt;#&lt;/a&gt; 可用空间管理&lt;/h4&gt;
&lt;h5 id=&#34;紧致机制-将已有的进程挪到一起腾出大块的连续空间&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#紧致机制-将已有的进程挪到一起腾出大块的连续空间&#34;&gt;#&lt;/a&gt; 紧致机制 -- 将已有的进程挪到一起，腾出大块的连续空间&lt;/h5&gt;
&lt;h5 id=&#34;可再定位式分区-浮动分区分配&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可再定位式分区-浮动分区分配&#34;&gt;#&lt;/a&gt; 可再定位式分区 -- 浮动分区分配&lt;/h5&gt;
&lt;h2 id=&#34;页式存储管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#页式存储管理&#34;&gt;#&lt;/a&gt; 页式存储管理&lt;/h2&gt;
&lt;h6 id=&#34;解决作业不连续存放的问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决作业不连续存放的问题&#34;&gt;#&lt;/a&gt; 解决作业不连续存放的问题&lt;/h6&gt;
&lt;p&gt;&lt;strong&gt;特点：&lt;/strong&gt; &lt;strong&gt;作业&lt;/strong&gt; &lt;strong&gt;(进程)&lt;/strong&gt; &lt;strong&gt;分成页面，内存也划分成页面，将作业&lt;/strong&gt; **(进程 **) &lt;strong&gt;页面不连续地分布到内存页面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211112140406228.png&#34; alt=&#34;image-20211112140406228&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;基本原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本原理&#34;&gt;#&lt;/a&gt; 基本原理&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211112140441074.png&#34; alt=&#34;image-20211112140441074&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211112141149243.png&#34; alt=&#34;image-20211112141149243&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分页逻辑地址&lt;/strong&gt; &lt;strong&gt;= P (页号).d (&lt;/strong&gt;  &lt;strong&gt;页内位移&lt;/strong&gt; ** ) **&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分页物理地址&lt;/strong&gt; &lt;strong&gt;= f(&lt;strong&gt;&lt;strong&gt;页帧号&lt;/strong&gt;&lt;/strong&gt;).d (&lt;strong&gt;&lt;strong&gt;同上&lt;/strong&gt;&lt;/strong&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P =&lt;/strong&gt; &lt;strong&gt;线性逻辑地址&lt;/strong&gt; &lt;strong&gt;/&lt;/strong&gt; &lt;strong&gt;页面大小；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;d =&lt;/strong&gt; &lt;strong&gt;线性逻辑地址&lt;/strong&gt; **- P***&lt;strong&gt; 页面大小。&lt;/strong&gt;&lt;/p&gt;
&lt;h6 id=&#34;为什么是2的k次幂&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么是2的k次幂&#34;&gt;#&lt;/a&gt; 为什么是 2 的 k 次幂？&lt;/h6&gt;
&lt;p&gt;将乘除法转成移位运算&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为了取出一个数据，系统需要访问内存几次？&lt;/strong&gt;-- 两次：1. 取页表，2. 取数据&lt;/p&gt;
&lt;h3 id=&#34;快表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#快表&#34;&gt;#&lt;/a&gt; 快表&lt;/h3&gt;
&lt;p&gt;由一组联想寄存器 (TLB, Translation Lookaside Buffer) 组成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;联想寄存器：一种按内容进行并行查找的快速寄存器，访问速度比主存快得多&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211112142834494.png&#34; alt=&#34;image-20211112142834494&#34; /&gt;&lt;/p&gt;
&lt;h6 id=&#34;使用bitmap数组空闲页帧链管理可用页帧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用bitmap数组空闲页帧链管理可用页帧&#34;&gt;#&lt;/a&gt; 使用 bitmap 数组 / 空闲页帧链管理可用页帧&lt;/h6&gt;
&lt;h5 id=&#34;共享&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#共享&#34;&gt;#&lt;/a&gt; 共享&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;通过页表可以使几个逻辑空间指向同一个物理空间，实现程序共享。&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;越界保护&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#越界保护&#34;&gt;#&lt;/a&gt; 越界保护&lt;/h5&gt;
&lt;p&gt;设置页表长度寄存器，查页表前，检查页号是否越界&lt;/p&gt;
&lt;h5 id=&#34;访问保护&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#访问保护&#34;&gt;#&lt;/a&gt; 访问保护&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;在每个页表项中增设一存储保护域，用于说明对该页的访问权限，每一个对该页存储的访问都首先要比照是否满足该页访问权限的说明，满足则访问，否则报异常。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;ø优点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ø优点&#34;&gt;#&lt;/a&gt; Ø&lt;strong&gt; 优点&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;ü&lt;strong&gt; 没有外碎片，每个内碎片不超过页大小。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ü&lt;strong&gt; 程序不必连续存放。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;ø主要缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ø主要缺点&#34;&gt;#&lt;/a&gt; Ø&lt;strong&gt; 主要缺点：&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;ü&lt;strong&gt; 程序要一次全部装入内存才能执行。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ü&lt;strong&gt; 采用动态地址变换机构会增加计算机的成本和降低处理机的速度。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ü&lt;strong&gt; 各种数据结构&lt;/strong&gt; (页表，空闲页表) 要占用一定的内存空间，而且系统要花费一定的时间来建立和管理这些表格。&lt;/p&gt;
&lt;p&gt;ü&lt;strong&gt; 依然存在内碎片。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;段式存储管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#段式存储管理&#34;&gt;#&lt;/a&gt; 段式存储管理&lt;/h2&gt;
&lt;h4 id=&#34;特点按作业的自然段将其逻辑空间分成若干段作业以段为单位分配内存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特点按作业的自然段将其逻辑空间分成若干段作业以段为单位分配内存&#34;&gt;#&lt;/a&gt; 特点:&lt;strong&gt; 按作业的自然段将其逻辑空间分成若干段，作业以段为单位分配内存。&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Ø&lt;strong&gt; 用户作业逻辑空间为二维空间，由若干自然段组成。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ø 逻辑地址：段号段内偏移，记作 S,d。编译及装配时把所有地址记成 (S,d) 的形式。&lt;/p&gt;
&lt;p&gt;Ø &lt;strong&gt;物理内存空间管理：与多道可变划分法一样，系统以段为单位分配物理内存。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211112144254340.png&#34; alt=&#34;image-20211112144254340&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211112144844677.png&#34; alt=&#34;image-20211112144844677&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;段页式管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#段页式管理&#34;&gt;#&lt;/a&gt; 段页式管理&lt;/h3&gt;
&lt;p&gt;特点：&lt;strong&gt;将作业分成若干段，每段用页式管理实现内存分配&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为了获得一条指令或者数据，需要访问内存几次？&lt;/strong&gt;--3 次，段表，页表，数据&lt;/p&gt;
&lt;h2 id=&#34;内存扩充技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内存扩充技术&#34;&gt;#&lt;/a&gt; 内存扩充技术&lt;/h2&gt;
&lt;h6 id=&#34;借助大容量的辅存实现内存的扩充&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#借助大容量的辅存实现内存的扩充&#34;&gt;#&lt;/a&gt; 借助大容量的辅存实现内存的扩充&lt;/h6&gt;
&lt;h3 id=&#34;覆盖技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#覆盖技术&#34;&gt;#&lt;/a&gt; 覆盖技术&lt;/h3&gt;
&lt;p&gt;** 将用户空间划分成一个固定区和多个覆盖区。主程序放固定区，依次调用的子程序则放在同一个覆盖区。**&lt;strong&gt; 操作系统提供覆盖系统调用函数，由用户编程序显式调用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;相当于时间换空间&lt;/p&gt;
&lt;h3 id=&#34;交换技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#交换技术&#34;&gt;#&lt;/a&gt; 交换技术&lt;/h3&gt;
&lt;p&gt;将处于等待状态 (等 I/O 结束) 或就绪 (等 CPU) 状态的作业从主存换出到辅存，把将要执行的进程移入主存。&lt;/p&gt;
&lt;p&gt;优点:&lt;/p&gt;
&lt;p&gt;提高并发性&lt;/p&gt;
&lt;p&gt;缺点:&lt;/p&gt;
&lt;p&gt;换入换出增加处理机开销&lt;/p&gt;
&lt;p&gt;程序换入时存在重定位问题&lt;/p&gt;
&lt;h6 id=&#34;和覆盖技术对比&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#和覆盖技术对比&#34;&gt;#&lt;/a&gt; 和覆盖技术对比&lt;/h6&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211116081410386.png&#34; alt=&#34;image-20211116081410386&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;虚拟存储技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#虚拟存储技术&#34;&gt;#&lt;/a&gt; 虚拟存储技术&lt;/h3&gt;
&lt;h4 id=&#34;基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基础&#34;&gt;#&lt;/a&gt; 基础&lt;/h4&gt;
&lt;p&gt;程序中不是每一条指令都会在程序的一次运行过程中执行到。&lt;br /&gt;
错误处理子程序&lt;br /&gt;
条件语句 (if...else...)&lt;br /&gt;
 程序中有的指令可能只执行一次&lt;br /&gt;
程序的初始化部分&lt;br /&gt;
程序执行的局部性原理：在一段时间内，作业一般不会执行到所有程序的指令，也不会存取绝大部分数据，执行的代码和要存取的数据往往集中在某些区域中 (例如一个循环、一个数组)。&lt;/p&gt;
&lt;h5 id=&#34;目的提供用户进程一个巨大的虚拟存储空间&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#目的提供用户进程一个巨大的虚拟存储空间&#34;&gt;#&lt;/a&gt; 目的：提供用户进程一个巨大的虚拟存储空间&lt;/h5&gt;
&lt;h5 id=&#34;手段利用外存磁盘实现此虚空间&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#手段利用外存磁盘实现此虚空间&#34;&gt;#&lt;/a&gt; 手段：利用外存 (磁盘) 实现此虚空间。&lt;/h5&gt;
&lt;h4 id=&#34;基本思想&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本思想&#34;&gt;#&lt;/a&gt; &lt;strong&gt;基本思想&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;系统为进程提供一个比物理内存大得多的虚拟存储空间，虚拟空间大小不受物理内存大小的限制。&lt;/p&gt;
&lt;p&gt;虚拟空间的容量由系统的有效地址长度决定。假设地址长度为 32，按字节寻址，则虚拟存储空间大小为&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mn&gt;32&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;2^{32}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8141079999999999em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 个字节。&lt;/p&gt;
&lt;h4 id=&#34;原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原理&#34;&gt;#&lt;/a&gt; &lt;strong&gt;原理&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;在程序装入时，不必一次将其全部读入到内存，而只需将&lt;strong&gt;当前需要执行的某些区域&lt;/strong&gt;读入到内存，然后程序开始执行。在程序执行过程中，如果&lt;strong&gt;需执行的指令或访问的数据尚未在内存&lt;/strong&gt;，则由处理器&lt;strong&gt;通知操作系统将相应的区域调入内存&lt;/strong&gt;，然后继续执行。&lt;/p&gt;
&lt;h4 id=&#34;分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分类&#34;&gt;#&lt;/a&gt; 分类&lt;/h4&gt;
&lt;h5 id=&#34;虚拟页式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#虚拟页式&#34;&gt;#&lt;/a&gt; 虚拟页式&lt;/h5&gt;
&lt;h6 id=&#34;页表增加外存标识位和外存地址项&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#页表增加外存标识位和外存地址项&#34;&gt;#&lt;/a&gt; 页表增加外存标识位和外存地址项&lt;/h6&gt;
&lt;p&gt;&lt;strong&gt;当内存中没有空闲页面时，如果还要调入一个新页，如何处理？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	淘汰掉一个内存中的页 (淘汰策略)&lt;/p&gt;
&lt;h6 id=&#34;交换区&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#交换区&#34;&gt;#&lt;/a&gt; 交换区&lt;/h6&gt;
&lt;p&gt;用来回写&lt;strong&gt;数据初始值和初值为 0 的工作区&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;页表项结构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211116083233571.png&#34; alt=&#34;image-20211116083233571&#34; /&gt;&lt;/p&gt;
&lt;p&gt;合法位：置上表示该页在内存。&lt;br /&gt;
修改位：置上表示该页被修改过，在释放或淘汰时应写&lt;br /&gt;
回外存。&lt;br /&gt;
页类型：零页时：表示该页在分配物理页帧时应清 0 页帧&lt;br /&gt;
空间；回写 swap 区页时：表示回写 swap 区。&lt;br /&gt;
保护码：R、W、E 保护说明。&lt;br /&gt;
外存块号：该页所在外存的块号。&lt;br /&gt;
页 帧 号：当合法位置上时代表该页所在内存的页帧号。&lt;/p&gt;
&lt;h6 id=&#34;缺页处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缺页处理&#34;&gt;#&lt;/a&gt; 缺页处理&lt;/h6&gt;
&lt;p&gt;根据发生页故障的虚地址得到页表项；&lt;br /&gt;
申请一个可用的页帧 (根据所采用的替换策略可能需要引起淘汰某一页);&lt;br /&gt;
 检查页类型，若为零页，则将页帧清 0，将页帧号填入页表项的页帧号一栏，置合法位为 1。若非零页，则调用 I/O 子系统将外存块号所指的数据读到可用页帧，将页帧号填入页表项中，合法位置 1，结束。&lt;/p&gt;
&lt;h6 id=&#34;页淘汰&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#页淘汰&#34;&gt;#&lt;/a&gt; 页淘汰&lt;/h6&gt;
&lt;p&gt;查 P 页表项的修改位，若未修改，则清 0 合法位，将页帧送回空闲页帧队列。&lt;br /&gt;
若已修改，则检查类型栏。&lt;br /&gt;
若是零页或回写 swap 区页（代表还没有分配交换区空间），则申请一块 swap 区空间，将 P 的外存块号置上并清除页类型。&lt;br /&gt;
调用 I/0 子系统将页帧上的数据写到外存块号所指的外存空间。清 0 合法位，将页帧送回空闲页帧队列。&lt;/p&gt;
&lt;h3 id=&#34;页面置换策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#页面置换策略&#34;&gt;#&lt;/a&gt; 页面置换策略&lt;/h3&gt;
&lt;h6 id=&#34;出发点-把未来不再使用的或者短时期内较少使用的页面调出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#出发点-把未来不再使用的或者短时期内较少使用的页面调出&#34;&gt;#&lt;/a&gt; 出发点： 把未来不再使用的或者短时期内较少使用的页面调出&lt;/h6&gt;
&lt;p&gt;基本概念&lt;/p&gt;
&lt;h6 id=&#34;驻留集进程的合法页集合&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#驻留集进程的合法页集合&#34;&gt;#&lt;/a&gt; 驻留集：进程的合法页集合&lt;/h6&gt;
&lt;h6 id=&#34;访问串进程访问虚拟空间的地址踪迹&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#访问串进程访问虚拟空间的地址踪迹&#34;&gt;#&lt;/a&gt; 访问串：进程访问虚拟空间的地址踪迹&lt;/h6&gt;
&lt;p&gt;举例：某进程依次访问如下地址，0100，0432，0101，0612，0102，0103，…&lt;br /&gt;
 页式虚存管理以页为基本单位，只需页号即可。设页面大小为 100，上述访问串可简化为 1，4，1，6，1，1，…&lt;/p&gt;
&lt;h4 id=&#34;驻留集大小固定的局部置换策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#驻留集大小固定的局部置换策略&#34;&gt;#&lt;/a&gt; 驻留集大小固定的局部置换策略&lt;/h4&gt;
&lt;h5 id=&#34;fifo先进先出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fifo先进先出&#34;&gt;#&lt;/a&gt; FIFO（先进先出）&lt;/h5&gt;
&lt;p&gt;替换最早进入的页&lt;/p&gt;
&lt;p&gt;效果奇差&lt;/p&gt;
&lt;p&gt;有&lt;strong&gt; Belady 奇异&lt;/strong&gt; &lt;strong&gt;指置换策略不满足随着驻留集的增大，页故障数一定减少的规律。&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;opt最佳算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#opt最佳算法&#34;&gt;#&lt;/a&gt; OPT（最佳算法）&lt;/h5&gt;
&lt;p&gt;需要预先知道整个访问串的序列（因此不可实现）&lt;/p&gt;
&lt;p&gt;理论最优&lt;/p&gt;
&lt;h5 id=&#34;lru最近最少使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lru最近最少使用&#34;&gt;#&lt;/a&gt; LRU（最近最少使用）&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;淘汰上次使用距当前最远的页&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;栈算法&lt;/p&gt;
&lt;p&gt;LRU 策略中，当驻留集大小为 m 时，S（m，t）中保持着最近使用过的 m 个页帧；当驻留集大小为 m+1 时，S（m+1，t）中保持着最近使用过的 m+1 个页帧。故 S（m，t）属于 S（m+1，t），LRU 策略是栈算法。&lt;/p&gt;
&lt;h5 id=&#34;clock&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#clock&#34;&gt;#&lt;/a&gt; CLOCK&lt;/h5&gt;
&lt;p&gt;基于 LRU 的思想&lt;br /&gt;
硬件在页面被访问时设置页表项中的访问位&lt;br /&gt;
随着表针的移动，淘汰访问位是 0 的页面，或清除页面的访问位。&lt;br /&gt;
实用的页面置换算法&lt;/p&gt;
&lt;h5 id=&#34;nru最近未使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nru最近未使用&#34;&gt;#&lt;/a&gt; NRU (最近未使用)&lt;/h5&gt;
&lt;p&gt;为页帧在页表项中增加一位使用位，硬件每访存一次即将对应页的使用位置 1，操作系统页面管理程序定时将所有使用位清 0。淘汰时任选一个使用位为 0 (表示 OS 清 0 周期内没被使用过）的页。&lt;br /&gt;
操作系统选择淘汰页时，尽量避免选被修改过的页。因此，选择淘汰页次序：&lt;/p&gt;
&lt;h4 id=&#34;驻留集大小可变的全局置换策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#驻留集大小可变的全局置换策略&#34;&gt;#&lt;/a&gt; 驻留集大小可变的全局置换策略&lt;/h4&gt;
&lt;h5 id=&#34;ws&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ws&#34;&gt;#&lt;/a&gt; WS&lt;/h5&gt;
&lt;p&gt;若驻留集中某页有&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;△&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\triangle&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8888799999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;△&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 个访问间隔没被访问则将其淘汰 (正是因为这个特性，才是动态的)&lt;/p&gt;
&lt;h6 id=&#34;实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现&#34;&gt;#&lt;/a&gt; 实现:&lt;/h6&gt;
&lt;p&gt;每一页面设一计数器，每访存一次，将所有其他页计数器 + 1, 所访存的计数器清零，淘汰计数器等于&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;△&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\triangle&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8888799999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;△&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 的页面&lt;/p&gt;
&lt;h5 id=&#34;实际上开销太大没有用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实际上开销太大没有用&#34;&gt;#&lt;/a&gt; 实际上：开销太大，没有用&lt;/h5&gt;
&lt;h5 id=&#34;sws&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sws&#34;&gt;#&lt;/a&gt; SWS&lt;/h5&gt;
&lt;p&gt;定时检查计时器，淘汰计时器值大于等于&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;△&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\triangle&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8888799999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;△&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 的页面 (当前时钟值 - 页表时钟值)&amp;gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;△&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\triangle&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8888799999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;△&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 的页面)&lt;/p&gt;
&lt;h5 id=&#34;硬件消耗还是很大&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#硬件消耗还是很大&#34;&gt;#&lt;/a&gt; 硬件消耗还是很大&lt;/h5&gt;
&lt;h3 id=&#34;置换策略选择&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#置换策略选择&#34;&gt;#&lt;/a&gt; 置换策略选择&lt;/h3&gt;
&lt;p&gt;动态驻留集 sws + 淘汰页数据延迟清除&lt;/p&gt;
&lt;p&gt;设立两个队列：自由链表和修改链表。&lt;br /&gt;
定时做页淘汰（SWS）：淘汰时不立即抹去页中数据，根据页面修改否挂入自由链 / 修改链，修改链过长或自由链过短时，回写页面后改挂到自由链中。&lt;br /&gt;
若 paging in 要用空页时，选自由链的第一页帧，这时页中数据被覆盖。&lt;br /&gt;
若在自由链 / 修改链中的页面再次被访问时，则将该页从链中摘除，使该页又能通过页表项访问到。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-chinese&#34;&gt; 某计算机采用二级页表的分页存储管理方式，按字节编址，页大小为2^10 字节，页表项大小为2字节，逻辑地址结构为：

逻辑地址空间大小为2^16页，则表示整个逻辑地址空间的页目录表中包含表项的个数至少是： ?
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211119140231647.png&#34; alt=&#34;image-20211119140231647&#34; /&gt;&lt;/p&gt;
&lt;p&gt;逻辑空间: 2^16 *2^10 =2^26&lt;/p&gt;
&lt;p&gt;页大小为 2^10 页表项大小为 2, 则一页能写 2^9 个页表项&lt;/p&gt;
&lt;p&gt;共 2^16 逻辑页，故需要 2^7 页&lt;/p&gt;
</content>
        <category term="大三" scheme="http://example.com/categories/junior/" />
        <category term="操作系统" scheme="http://example.com/categories/junior/computerSystem/" />
        <category term="操作系统,计算机" scheme="http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%AE%A1%E7%AE%97%E6%9C%BA/" />
        <updated>2021-12-07T00:43:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/12/07/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</id>
        <title>21/12/7 文件系统-操作系统</title>
        <link rel="alternate" href="http://example.com/2021/12/07/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
        <content type="html">&lt;h1 id=&#34;文件系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件系统&#34;&gt;#&lt;/a&gt; 文件系统&lt;/h1&gt;
&lt;h2 id=&#34;文件管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件管理&#34;&gt;#&lt;/a&gt; 文件管理&lt;/h2&gt;
&lt;h3 id=&#34;文件系统的功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件系统的功能&#34;&gt;#&lt;/a&gt; 文件系统的功能&lt;/h3&gt;
&lt;p&gt;支持文件所占存储介质空间的分配 / 回收&lt;br /&gt;
支持文件相对起始数据的逻辑块定位到外存上的物理块&lt;br /&gt;
支持对文件访问的安全检查&lt;br /&gt;
支持对文件的读写访问&lt;/p&gt;
&lt;h3 id=&#34;文件的结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件的结构&#34;&gt;#&lt;/a&gt; 文件的结构&lt;/h3&gt;
&lt;h5 id=&#34;逻辑结构文件组织&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#逻辑结构文件组织&#34;&gt;#&lt;/a&gt; 逻辑结构 (&lt;strong&gt;文件组织&lt;/strong&gt;):&lt;/h5&gt;
&lt;p&gt;用户看到的文件组织形式，和存储：设备无关&lt;/p&gt;
&lt;p&gt;有结构的记录式文件：由一个以上的记录构成&lt;/p&gt;
&lt;p&gt;无结构的流式文件：文件没有结构，由一串字符流构成&lt;/p&gt;
&lt;h5 id=&#34;物理结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#物理结构&#34;&gt;#&lt;/a&gt; 物理结构:&lt;/h5&gt;
&lt;p&gt;外存上存放形式，和存储设备特性有很大关系&lt;/p&gt;
&lt;h5 id=&#34;文件存储器物理特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件存储器物理特性&#34;&gt;#&lt;/a&gt; 文件存储器物理特性:&lt;/h5&gt;
&lt;p&gt;•&lt;strong&gt;磁带&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;顺序访问设备→要求文件顺序存放于带上。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;•&lt;strong&gt;磁盘&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;直接（随机）访问设备→文件可顺序、链接式或随机（通过类似页表的索引结构访问）存放于设备上&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;文件系统重要作用之一&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件系统重要作用之一&#34;&gt;#&lt;/a&gt; 文件系统重要作用 (之一)&lt;/h5&gt;
&lt;p&gt;在用户逻辑文件和物理文件之间建立映射&lt;/p&gt;
&lt;h4 id=&#34;文件存取方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件存取方式&#34;&gt;#&lt;/a&gt; 文件存取方式&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;读写文件存储器上的一个物理块的方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;顺序存取：指对文件中的信息按顺序依次读写&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;随机存取法:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;直接存取法：允许用户随意存取文件中任意一个物理记录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;按键存取法：根据文件中各记录的某个数据项内容来存取记录的，这种数据项称之为键&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;几种常见的物理存储方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#几种常见的物理存储方式&#34;&gt;#&lt;/a&gt; 几种常见的物理存储方式&lt;/h4&gt;
&lt;h5 id=&#34;1-连续存储顺序结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-连续存储顺序结构&#34;&gt;#&lt;/a&gt; 1.  连续存储 (顺序结构)&lt;/h5&gt;
&lt;p&gt;它将逻辑上连续的文件信息依次存放在编号连续的物理块上。&lt;/p&gt;
&lt;p&gt;l&lt;strong&gt; 优点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;–&lt;strong&gt;存储方式简单。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;–&lt;strong&gt;对文件记录进行批量存取时，其存取效率较高。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;–&lt;strong&gt;支持定长记录的直接存取，可以通过计算获得存储位置。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;l&lt;strong&gt; 缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;–&lt;strong&gt;不支持随机查找。如果要随机地查找或修改单个记录，此时系统需要逐个地查找诸记录，性能较差，尤其是当文件较大时情况将更为严重。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;–&lt;strong&gt;存在外部碎片。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;–&lt;strong&gt;不便于记录的增加或删除操作。&lt;/strong&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;–&lt;strong&gt;链接结构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;•&lt;strong&gt;将逻辑上连续的文件信息存放在不连续的物理块上，每个物理块设有一个指针指向下一个物理块。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;l&lt;strong&gt; 优点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;–&lt;strong&gt;提高了磁盘空间利用率，不存在外部碎片问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;–&lt;strong&gt;有利于文件插入和删除，及其动态扩充。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;l&lt;strong&gt; 缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;–&lt;strong&gt;仍然不支持随机查找。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;–&lt;strong&gt;由于存储空间可能不连续，带来更多的寻道次数和寻道时间。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;–&lt;strong&gt;需要牺牲一些空间存放链接指针，同时需要维护这些指针，增加了系统开销。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;–&lt;strong&gt;可靠性问题，如指针出错。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;索引结构&lt;/strong&gt;&lt;br /&gt;
将逻辑上连续的文件信息 (记录) 存放在不连续的物理块中，系统为每个文件建立一个专用数据结构 —— 索引表，索引表中存放文件的逻辑块号和物理块号的对应关系&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;优点：&lt;br /&gt;
既能顺序存取，又能直接存取。&lt;br /&gt;
满足了文件动态增长、插入删除的要求。&lt;br /&gt;
没有外碎片，外存空间利用率较高。&lt;br /&gt;
缺点&lt;br /&gt;
较多的寻道次数和寻道时间。&lt;br /&gt;
索引表本身需要存储空间，同时对索引表的维护会增加系统开销。&lt;/li&gt;
&lt;li&gt;索引表组织方式
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;链接文件方式：将多个索引表块按链接文件的方式串联起来&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;多重索引方式：将一个大文件的所有索引表（二级索引) 的地址放在另一个索引表（一级索引) 中。
&lt;ol&gt;
&lt;li&gt;多重索引优势
&lt;ol&gt;
&lt;li&gt;寻址空间较大，相比于链接文件，会大大减少读取对应物理块所需要的读盘次数 (因为要从文件中读取索引项)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;文件的目录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件的目录&#34;&gt;#&lt;/a&gt; 文件的目录&lt;/h3&gt;
&lt;p&gt;OS 观点：文件包含文件控制块和文件体&lt;/p&gt;
&lt;p&gt;文件控制块（FCB）的主要内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;文件名&lt;br /&gt;
创建者&lt;br /&gt;
文件物理位置信息：如索引表&lt;br /&gt;
创建、修改时间、保存时间&lt;br /&gt;
口令：用于对文件访问进行验证&lt;br /&gt;
操作限制：如读、写、执行权限说明&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文件目录提供的功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;实现 “按名存取”&lt;/strong&gt;。用户只须提供文件名，即可对文件进行存取。这是文件系统向用户提供的最基本的服务。&lt;br /&gt;
&lt;strong&gt;提高对目录的检索速度&lt;/strong&gt;。合理地组织目录结构，加快对目录的检索速度，从而加快对文件的存取速度。这是在设计一个大、中型文件系统时，所追求的主要目标。&lt;br /&gt;
&lt;strong&gt;实现文件共享&lt;/strong&gt;。在多用户系统中，应允许多个用户共享一个文件，以节省大量的存储空间并方便用户。&lt;br /&gt;
&lt;strong&gt;解决文件重名问题&lt;/strong&gt;。系统应允许不同用户对不同文件采用相同的名字，以便于用户按照自己的习惯命名和使用文件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;文件目录结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件目录结构&#34;&gt;#&lt;/a&gt; 文件目录结构&lt;/h4&gt;
&lt;h5 id=&#34;l一级目录结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#l一级目录结构&#34;&gt;#&lt;/a&gt; l&lt;strong&gt; 一级目录结构&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;为外存上的全部文件设立一张平面（flat）的目录表，包含所有文件的 FCB。每建立一个新文件即在目录中增加一个 FCB，每当删除一个文件即抹去对应的 FCB，当要访问一个文件时，先按文件名在目录中找到对应的文件 FCB。&lt;br /&gt;
为了快速查找到文件 FCB，可按文件名进行 Hash，或其它快速查找方式&lt;/li&gt;
&lt;li&gt;优点：简单&lt;br /&gt;
缺点：&lt;br /&gt;
1、查找速度慢&lt;br /&gt;
 2、&lt;strong&gt;不允许重名&lt;/strong&gt;&lt;br /&gt;
 3、不便于实现文件共享&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;l二级目录结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#l二级目录结构&#34;&gt;#&lt;/a&gt; l&lt;strong&gt; 二级目录结构&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;设一个主目录 MFD，为系统的每个用户设用户目录 UFD，用户目录是用户所有文件 FCB 的集合，主目录中存放每个用户目录的用户目录名和 UFD 的索引表等（当我们把 UFD 看作是一个文件时，这个文件的内容是用户所有文件 FCB 集合，MFD 中则包含每个 UFD 文件的 FCB&lt;/li&gt;
&lt;li&gt;路径名&lt;br /&gt;
将用户名与文件名连到一起组成路径名。例如：/songhong/test.c&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;多级目录树形目录结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多级目录树形目录结构&#34;&gt;#&lt;/a&gt; 多级目录 —— 树形目录结构&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;树状的多级目录结构&lt;br /&gt;
任何一级目录中的 FCB 既可以描述次一级的子目录，又可以描述一个文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;特点:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;利于文件分类，从文件路径名可看出文件类别。&lt;br /&gt;
查找文件 FCB 耗费时间，要得到文件 FCB，必须从根查起。&lt;br /&gt;
唯一确定文件的路径名太长，故引入当前目录 概念，提供相对于当前目录的相对路径名可加速文件 FCB 的查找，进程控制块存有当前目录信息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;访问&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;必须指出文件所在路径名：从根目录到该文件的路径上各级目录名的组合。也称为文件全名。&lt;br /&gt;
例如：/usr/lib/man&lt;br /&gt;
 相对路径：设置一个 “当前目录”(也叫 “工作目录”)，此时对于文件的查找是从当前目录中进行的。可以带来两点好处：&lt;br /&gt;
用户使用更加方便&lt;br /&gt;
检索效率更高&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优缺点&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;l&lt;strong&gt; 树形多级目录结构的优点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;•&lt;strong&gt;提高了检索目录的速度。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;•&lt;strong&gt;较好地解决了重名问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;l&lt;strong&gt; 缺点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不便于用户共享文件&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;无环图目录结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#无环图目录结构&#34;&gt;#&lt;/a&gt; 无环图目录结构&lt;/h5&gt;
&lt;h6 id=&#34;当一个文件副本可以同时属于两个不同目录类别时即同一个文件有二条路径名或多条路径名时出现无环图目录结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#当一个文件副本可以同时属于两个不同目录类别时即同一个文件有二条路径名或多条路径名时出现无环图目录结构&#34;&gt;#&lt;/a&gt; 当一个文件副本可以同时属于两个不同目录（类别）时，即同一个文件有二条路径名，或多条路径名时出现无环图目录结构。&lt;/h6&gt;
&lt;h6 id=&#34;特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特点&#34;&gt;#&lt;/a&gt; 特点：&lt;/h6&gt;
&lt;p&gt;方便文件共享，分类。&lt;br /&gt;
两个或多个 FCB 的一致性难保证，因此将 FCB 独立存放，引入带文件 / 目录名和 FCB 指针的目录项&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211130092527762.png&#34; alt=&#34;image-20211130092527762&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;文件共享&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件共享&#34;&gt;#&lt;/a&gt; 文件共享&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h5 id=&#34;硬链接hard-link&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#硬链接hard-link&#34;&gt;#&lt;/a&gt; 硬链接 (hard link)&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;指向同一个索引结点&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;符号链接&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;建立符号链文件，该文件内容为要访问文件的路径名&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;文件存储器空间布局与管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件存储器空间布局与管理&#34;&gt;#&lt;/a&gt; 文件存储器空间布局与管理&lt;/h2&gt;
&lt;h4 id=&#34;空闲区表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#空闲区表&#34;&gt;#&lt;/a&gt; 空闲区表&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211203133204515.png&#34; alt=&#34;image-20211203133204515&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;位示图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#位示图&#34;&gt;#&lt;/a&gt; 位示图&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211203133252860.png&#34; alt=&#34;image-20211203133252860&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211203133418295.png&#34; alt=&#34;image-20211203133418295&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;空闲块链&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#空闲块链&#34;&gt;#&lt;/a&gt; 空闲块链&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211203134255752.png&#34; alt=&#34;image-20211203134255752&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211203135715385.png&#34; alt=&#34;image-20211203135715385&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211203140034820.png&#34; alt=&#34;image-20211203140034820&#34; /&gt;&lt;/p&gt;
</content>
        <category term="大三" scheme="http://example.com/categories/junior/" />
        <category term="操作系统" scheme="http://example.com/categories/junior/computerSystem/" />
        <category term="操作系统,计算机" scheme="http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%AE%A1%E7%AE%97%E6%9C%BA/" />
        <updated>2021-12-07T00:43:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/12/06/9.1%20%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%8C%E6%95%B4%E6%80%A7%E6%A6%82%E8%BF%B0/</id>
        <title>21/12/6 Database 数据库完整性概述</title>
        <link rel="alternate" href="http://example.com/2021/12/06/9.1%20%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%8C%E6%95%B4%E6%80%A7%E6%A6%82%E8%BF%B0/"/>
        <content type="html">&lt;p&gt;9.1 数据库完整性概述&lt;/p&gt;
&lt;p&gt;数据库完整性 -- 数据的正确性，有效性，西安共性&lt;/p&gt;
&lt;p&gt;列级约束&lt;/p&gt;
&lt;p&gt;对属性的数据类型，等的定义&lt;/p&gt;
&lt;p&gt;元祖约束&lt;/p&gt;
&lt;p&gt;元组中各个属性之间的约束关系&lt;/p&gt;
&lt;h4 id=&#34;实现完整性约束的方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现完整性约束的方法&#34;&gt;#&lt;/a&gt; 实现完整性约束的方法&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;提供定义机制&lt;/li&gt;
&lt;li&gt;提供检查方法&lt;/li&gt;
&lt;li&gt;违约处理&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;94用户定义的完整性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#94用户定义的完整性&#34;&gt;#&lt;/a&gt; 9.4 用户定义的完整性&lt;/h2&gt;
&lt;h2 id=&#34;95触发器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#95触发器&#34;&gt;#&lt;/a&gt; 9.5 触发器&lt;/h2&gt;
&lt;p&gt;一类用户定义在关系数据表上的一类由事件驱动的特殊过程，用编程的方法实现复杂的业务规则&lt;/p&gt;
&lt;p&gt;是一种特殊类型的存储过程&lt;/p&gt;
&lt;p&gt;可用触发器完成很多数据库完整性保护的过程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;复杂的业务规则&lt;/li&gt;
&lt;li&gt;比较数据修改前后状态&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;SQL:CREATE TRIGER 命令&lt;/p&gt;
&lt;h1 id=&#34;事务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事务&#34;&gt;#&lt;/a&gt; 事务&lt;/h1&gt;
&lt;p&gt;原子性：不可分割&lt;/p&gt;
&lt;p&gt;一致性：事务执行结果必须从一个状态转换到另一个状态时保持一致，即若中间出现错误，则将所有操作撤销&lt;/p&gt;
&lt;p&gt;事务应当具有 ACID 性质，&lt;br /&gt;
A 是&lt;strong&gt;原子&lt;/strong&gt;性 (atomic)：事务中包含的各项操作必须全部成功执行或者全部不执行。任何一项操作失败，将导致整个事务失败，其他已经执行的任务所作的数据操作都将被撤销，只有所有的操作全部成功，整个事务才算是成功完成。&lt;br /&gt;
C 是&lt;strong&gt;一致性&lt;/strong&gt; (consistent)：保证了当事务结束后，系统状态是一致的。那么什么是一致的系统状态？例如，如果银行始终遵循着 &amp;quot;银行账号必须保持正态平衡&amp;quot; 的原则，那么银行系统的状态就是一致的。上面的转账例子中，在取钱的过程中，账户会出现负态平衡，在事务结束之后，系统又回到一致的状态。这样，系统的状态对于客户来说，始终是一致的。&lt;br /&gt;
I 是&lt;strong&gt;隔离&lt;/strong&gt;性 (isolated)：使得并发执行的事务，彼此无法看到对方的中间状态。保证了并发执行的事务顺序执行，而不会导致系统状态不一致。&lt;br /&gt;
D 是&lt;strong&gt;持久性&lt;/strong&gt; (durable)：保证了事务完成后所作的改动都会被持久化，即使是发生灾难性的失败。可恢复性资源保存了一份事务日志，如果资源发生故障，可以通过日志来将数据重建起来。&lt;/p&gt;
&lt;p&gt;事务应处在下列状态之一&lt;/p&gt;
&lt;p&gt;活动状态&lt;/p&gt;
&lt;p&gt;失败状态：意味着要回滚&lt;/p&gt;
&lt;p&gt;中止状态：数据库已经回滚完毕，恢复到提交前状态&lt;/p&gt;
&lt;p&gt;提交状态：当数据更改完全写入磁盘时，进入提交状态&lt;/p&gt;
&lt;p&gt;10.3.1 事务故障的恢复&lt;/p&gt;
&lt;p&gt;1. 反向扫描日文件日志，查找该事务的更新操作&lt;/p&gt;
&lt;p&gt;2. 对该事务的更新操作执行你操作&lt;/p&gt;
&lt;p&gt;3. 继续反向扫描，直到读到此事务的开始操作&lt;/p&gt;
&lt;p&gt;10.3.2 系统故障恢复&lt;/p&gt;
&lt;p&gt;1.&lt;strong&gt; 正向&lt;/strong&gt;扫描日志文件，列出 Redo 队列，Undo 队列&lt;/p&gt;
&lt;h3 id=&#34;日志&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#日志&#34;&gt;#&lt;/a&gt; 日志&lt;/h3&gt;
&lt;p&gt;&amp;lt;u&amp;gt;&lt;strong&gt; 登记两条原则&lt;/strong&gt; &amp;lt;/u&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;u&amp;gt;&lt;strong&gt;1. 登记次序严格按并行事物执行顺序&lt;/strong&gt; &amp;lt;/u&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;u&amp;gt;&lt;strong&gt;2. 先写日志文件，后写数据库&lt;/strong&gt; &amp;lt;/u&amp;gt;&lt;/p&gt;
</content>
        <category term="大三" scheme="http://example.com/categories/junior/" />
        <category term="数据库" scheme="http://example.com/categories/junior/database/" />
        <category term="数据库,完整性" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93-%E5%AE%8C%E6%95%B4%E6%80%A7/" />
        <updated>2021-12-06T14:53:47.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/12/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/</id>
        <title>21/12/6 Database 数据库操作</title>
        <link rel="alternate" href="http://example.com/2021/12/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/"/>
        <content type="html">&lt;h2 id=&#34;数据库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库&#34;&gt;#&lt;/a&gt; 数据库&lt;/h2&gt;
&lt;p&gt;select&lt;/p&gt;
&lt;p&gt;from&lt;/p&gt;
&lt;p&gt;where&lt;/p&gt;
&lt;p&gt;group by&lt;/p&gt;
&lt;p&gt;having&lt;/p&gt;
&lt;p&gt;order by&lt;/p&gt;
&lt;h5 id=&#34;insert&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#insert&#34;&gt;#&lt;/a&gt; insert&lt;/h5&gt;
&lt;p&gt;指定属性列 -- 不包含的取空&lt;/p&gt;
&lt;p&gt;不指定 - 不能省略任何属性&lt;/p&gt;
</content>
        <category term="大三" scheme="http://example.com/categories/junior/" />
        <category term="数据库" scheme="http://example.com/categories/junior/database/" />
        <category term="数据库" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/" />
        <updated>2021-12-06T14:09:47.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/12/06/%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/</id>
        <title>21/12/6 Database 查询优化</title>
        <link rel="alternate" href="http://example.com/2021/12/06/%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/"/>
        <content type="html">&lt;h1 id=&#34;查询优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查询优化&#34;&gt;#&lt;/a&gt; 查询优化&lt;/h1&gt;
&lt;h4 id=&#34;游标&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#游标&#34;&gt;#&lt;/a&gt; 游标&lt;/h4&gt;
&lt;h6 id=&#34;目的-解决集合性操作语言与过程性操作语言的不匹配&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#目的-解决集合性操作语言与过程性操作语言的不匹配&#34;&gt;#&lt;/a&gt; 目的 - 解决集合性操作语言与过程性操作语言的不匹配&lt;/h6&gt;
&lt;h6 id=&#34;原因sql一条语句一般能产生或处理多条记录而主语言一次只能存放一条记录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原因sql一条语句一般能产生或处理多条记录而主语言一次只能存放一条记录&#34;&gt;#&lt;/a&gt; 原因:sql 一条语句一般能产生或处理多条记录，而主语言一次只能存放一条记录&lt;/h6&gt;
&lt;h6 id=&#34;是什么是系统为用户开设的一个数据缓冲区存放sql语句的执行结果&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#是什么是系统为用户开设的一个数据缓冲区存放sql语句的执行结果&#34;&gt;#&lt;/a&gt; 是什么：是系统为用户开设的一个数据缓冲区，存放 sql 语句的执行结果&lt;/h6&gt;
&lt;p&gt;用户可以用 SQL 语句逐一地从游标中获取记录，并赋给主变量&lt;/p&gt;
&lt;h6 id=&#34;定义游标-使用declare语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定义游标-使用declare语句&#34;&gt;#&lt;/a&gt; 定义游标：使用 Declare 语句&lt;/h6&gt;
&lt;p&gt;EXEC SQL DECLARE &amp;lt;&amp;gt; CURSOR......&lt;/p&gt;
&lt;h6 id=&#34;打开游标-执行相应的select语句吧所有满足查询条件的记录从指定表取到缓冲区中&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#打开游标-执行相应的select语句吧所有满足查询条件的记录从指定表取到缓冲区中&#34;&gt;#&lt;/a&gt; 打开游标 -- 执行相应的 select 语句，吧所有满足查询条件的记录从指定表取到缓冲区中&lt;/h6&gt;
&lt;p&gt;EXEC SQL OPEN &amp;lt;游标名&amp;gt;&lt;/p&gt;
&lt;p&gt;此时游标指针指向查询结果集中第一条记录之前&lt;/p&gt;
&lt;h6 id=&#34;推动游标&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#推动游标&#34;&gt;#&lt;/a&gt; 推动游标&lt;/h6&gt;
&lt;p&gt;使用 FETCH 语句&lt;/p&gt;
&lt;p&gt;EXEC SQL FETCH [[NEXT]]....&lt;/p&gt;
&lt;p&gt;指定方向推动游标指针，然后将缓冲区中的当前记录取出来送至主变量供主语言进一步处理&lt;/p&gt;
&lt;p&gt;要求：主变量与 select 语句中的目标列表达式具有一一对应关系&lt;/p&gt;
&lt;h6 id=&#34;关闭游标&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关闭游标&#34;&gt;#&lt;/a&gt; 关闭游标&lt;/h6&gt;
&lt;p&gt;CLOSE 语句&lt;/p&gt;
&lt;p&gt;EXEC SQL CLOSE &amp;lt;游标名&amp;gt;&lt;/p&gt;
&lt;h2 id=&#34;71查询处理过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#71查询处理过程&#34;&gt;#&lt;/a&gt; 7.1 查询处理过程&lt;/h2&gt;
&lt;h3 id=&#34;711-查询分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#711-查询分析&#34;&gt;#&lt;/a&gt; 7.1.1 查询分析&lt;/h3&gt;
&lt;p&gt;对查询语句进行扫描，词法分析和语法分析&lt;/p&gt;
&lt;h3 id=&#34;712查询检查&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#712查询检查&#34;&gt;#&lt;/a&gt; 7.1.2 查询检查&lt;/h3&gt;
&lt;p&gt;根据数据字典中的用户权限和完整性约束定义对用户的存取权限进行检查&lt;/p&gt;
&lt;p&gt;检查通过后将 SQL 查询语句转换成等价的 &amp;lt;u&amp;gt; 关系代数表达式 &amp;lt;/u&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;714查询优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#714查询优化&#34;&gt;#&lt;/a&gt; 7.1.4 查询优化&lt;/h3&gt;
&lt;p&gt;选择一个高效执行的查询处理策略&lt;/p&gt;
&lt;h4 id=&#34;代数优化-关系代数表达式优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代数优化-关系代数表达式优化&#34;&gt;#&lt;/a&gt; 代数优化 - 关系代数表达式优化&lt;/h4&gt;
&lt;h4 id=&#34;物理优化-存取物理介质及的优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#物理优化-存取物理介质及的优化&#34;&gt;#&lt;/a&gt; 物理优化 - 存取物理介质及... 的优化&lt;/h4&gt;
&lt;h3 id=&#34;715查询执行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#715查询执行&#34;&gt;#&lt;/a&gt; 7.1.5 查询执行&lt;/h3&gt;
&lt;p&gt;不用多言&lt;/p&gt;
&lt;h2 id=&#34;72执行查询操作的基本算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#72执行查询操作的基本算法&#34;&gt;#&lt;/a&gt; 7.2 执行查询操作的基本算法&lt;/h2&gt;
&lt;h3 id=&#34;1-选择操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-选择操作&#34;&gt;#&lt;/a&gt; 1. 选择操作&lt;/h3&gt;
&lt;p&gt;顺序扫描 / 二分查找 / 索引 [散列]/ 复合选择&lt;/p&gt;
&lt;p&gt;索引 -- 提供元组指针，间接检索&lt;/p&gt;
&lt;p&gt;B + 树索引：同样是提供元组指针，同时支持顺序集中依次查找&lt;/p&gt;
&lt;p&gt;如是 sdept=&#39;cs&#39; and sae&amp;gt;20: 则&lt;/p&gt;
&lt;p&gt;算法一：分别查询，求交集&lt;/p&gt;
&lt;p&gt;算法而：先找到第一个查询的指针，然后在第一个查询的指针基础上进行第二个查询&lt;/p&gt;
&lt;h3 id=&#34;2连接操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2连接操作&#34;&gt;#&lt;/a&gt; 2. 连接操作&lt;/h3&gt;
&lt;h6 id=&#34;连接操作是查询处理中最耗时的操作之一&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#连接操作是查询处理中最耗时的操作之一&#34;&gt;#&lt;/a&gt; 连接操作是查询处理中最耗时的操作之一&lt;/h6&gt;
&lt;p&gt;[例 2]&lt;/p&gt;
&lt;p&gt;SELECT *&lt;/p&gt;
&lt;p&gt;FROM Student,SC&lt;/p&gt;
&lt;p&gt;WHERE Student.Sno=SC.Sno&lt;/p&gt;
&lt;p&gt;[例 2end]&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;嵌套循环法&lt;br /&gt;
对外层循环的每一个元组，检测内层循环中的每一个元组，检查两个元组在连接属性上是否相等&lt;br /&gt;
满足，即串接后作为结果输出&lt;/li&gt;
&lt;li&gt;索引链接法&lt;br /&gt;
在输出表上建立属性 Sno 的索引 (如果原来没有)&lt;br /&gt;
 对 student 中每个元组，有 Sno 值通过 Sc........&lt;/li&gt;
&lt;li&gt;排序合并法&lt;br /&gt;
适合连接的诸表已经排好序的情况&lt;br /&gt;
没排序则排序&lt;br /&gt;
取 Student 表中第一个 sno, 然后依次找 sc 表中具有相同 sno 的元组&lt;br /&gt;
扫到 sno 不相同的第一个 sc 元组时，返回 Student 扫描它的下一个元组&lt;br /&gt;
之后循环&lt;/li&gt;
&lt;li&gt;散列连接法&lt;br /&gt;
把连接属性作为散列码，&lt;br /&gt;
 然后划分&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;3投影操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3投影操作&#34;&gt;#&lt;/a&gt; 3. 投影操作&lt;/h3&gt;
&lt;h6 id=&#34;选取关系的某些列从垂直的方向减小关系的大小&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#选取关系的某些列从垂直的方向减小关系的大小&#34;&gt;#&lt;/a&gt; 选取关系的某些列，从垂直的方向减小关系的大小&lt;/h6&gt;
&lt;p&gt;如果投影属性列包括了关系 R 的主键，则操作可言直接执行，操作结果将于 R 中元组个数相同&lt;/p&gt;
&lt;p&gt;否则则需要消除重复元组&lt;/p&gt;
&lt;h3 id=&#34;4集合运算操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4集合运算操作&#34;&gt;#&lt;/a&gt; 4. 集合运算操作&lt;/h3&gt;
&lt;p&gt;并，查，交，笛卡尔积&lt;/p&gt;
&lt;p&gt;并查缴类似排序合并法&lt;/p&gt;
&lt;p&gt;笛卡尔积一般嵌套循环合并&lt;/p&gt;
&lt;h2 id=&#34;73关系数据库系统的查询优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#73关系数据库系统的查询优化&#34;&gt;#&lt;/a&gt; 7.3 关系数据库系统的查询优化&lt;/h2&gt;
&lt;p&gt;分布式数据库：总代接 = I/O 代价 +*****&lt;/p&gt;
&lt;h4 id=&#34;732查询优化实例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#732查询优化实例&#34;&gt;#&lt;/a&gt; 7.3.2 查询优化实例&lt;/h4&gt;
&lt;p&gt;假定学生 - 课程数据库中有 1000 个学生记录，10000 个选课记录&lt;/p&gt;
&lt;p&gt;其中选修二号课程的选课记录为 50 个&lt;/p&gt;
&lt;p&gt;查询选修了 2 号课程的学生姓名&lt;/p&gt;
&lt;h5 id=&#34;第一种情况&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一种情况&#34;&gt;#&lt;/a&gt; 第一种情况&lt;/h5&gt;
&lt;h6 id=&#34;1计算广义笛卡尔积&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1计算广义笛卡尔积&#34;&gt;#&lt;/a&gt; 1. 计算广义笛卡尔积&lt;/h6&gt;
&lt;p&gt;- 把 student 和 sc 的每个元组连接起来的做法&lt;/p&gt;
&lt;h6 id=&#34;2做选择操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2做选择操作&#34;&gt;#&lt;/a&gt; 2. 做选择操作&lt;/h6&gt;
&lt;p&gt;依次读入连接后的元组，按照选择条件选取满足要求的记录&lt;/p&gt;
&lt;h6 id=&#34;3做投影操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3做投影操作&#34;&gt;#&lt;/a&gt; 3. 做投影操作&lt;/h6&gt;
&lt;p&gt;把第二步操作的结果在 Sname 上作投影输出，得到最终输出&lt;/p&gt;
&lt;h5 id=&#34;第二种情况&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第二种情况&#34;&gt;#&lt;/a&gt; 第二种情况&lt;/h5&gt;
&lt;h6 id=&#34;1计算自然连接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1计算自然连接&#34;&gt;#&lt;/a&gt; 1. 计算自然连接&lt;/h6&gt;
&lt;h6 id=&#34;2读取中间文件块进行选择操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2读取中间文件块进行选择操作&#34;&gt;#&lt;/a&gt; 2. 读取中间文件块，进行选择操作&lt;/h6&gt;
&lt;h6 id=&#34;3投影输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3投影输出&#34;&gt;#&lt;/a&gt; 3. 投影输出&lt;/h6&gt;
&lt;h5 id=&#34;第三种情况&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第三种情况&#34;&gt;#&lt;/a&gt; 第三种情况&lt;/h5&gt;
&lt;h6 id=&#34;1先对sc表进行选择运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1先对sc表进行选择运算&#34;&gt;#&lt;/a&gt; 1. 先对 sc 表进行选择运算&lt;/h6&gt;
&lt;h6 id=&#34;2读取student表把读入的student元组和内存中收到sc元组做连接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2读取student表把读入的student元组和内存中收到sc元组做连接&#34;&gt;#&lt;/a&gt; 2. 读取 Student 表，把读入的 student 元组和内存中收到 sc 元组做连接&lt;/h6&gt;
&lt;h6 id=&#34;3把连接结果投影输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3把连接结果投影输出&#34;&gt;#&lt;/a&gt; 3. 把连接结果投影输出&lt;/h6&gt;
&lt;p&gt;假如 SC 表的 Cno 字段 / Student 表上的 Sno 有索引，可加快读取&lt;/p&gt;
&lt;h4 id=&#34;有选择和连接操作时先做选择操作-代数优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#有选择和连接操作时先做选择操作-代数优化&#34;&gt;#&lt;/a&gt; 有选择和连接操作时，先做选择操作 -- 代数优化&lt;/h4&gt;
&lt;h4 id=&#34;选择操作算法有权标扫描和索引扫描两种在第三种情况下索引扫描效果好-物理优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#选择操作算法有权标扫描和索引扫描两种在第三种情况下索引扫描效果好-物理优化&#34;&gt;#&lt;/a&gt; 选择操作算法有权标扫描和索引扫描两种，在第三种情况下，索引扫描效果好 -- 物理优化&lt;/h4&gt;
&lt;h3 id=&#34;733-代数优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#733-代数优化&#34;&gt;#&lt;/a&gt; 7.3.3 代数优化&lt;/h3&gt;
&lt;h4 id=&#34;关系代数表达式的等价变换规则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关系代数表达式的等价变换规则&#34;&gt;#&lt;/a&gt; 关系代数表达式的等价变换规则&lt;/h4&gt;
&lt;p&gt;指用相同的关系代替两个表达式中相应的关系所得到的结果是相同的&lt;/p&gt;
&lt;h5 id=&#34;常用的等价变换规则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用的等价变换规则&#34;&gt;#&lt;/a&gt; 常用的等价变换规则&lt;/h5&gt;
&lt;h4 id=&#34;代数优化策略-通过对关系代数表达式的等价变化来提高查询效率&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代数优化策略-通过对关系代数表达式的等价变化来提高查询效率&#34;&gt;#&lt;/a&gt; 代数优化策略 - 通过对关系代数表达式的等价变化来提高查询效率&lt;/h4&gt;
&lt;h5 id=&#34;启发式规则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#启发式规则&#34;&gt;#&lt;/a&gt; 启发式规则&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;选择运算尽可能先做，最重要最基本的一条&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;把投影运算和选择运算同时进行&lt;/li&gt;
&lt;li&gt;把投影同其前后的双目运算结合起来&lt;/li&gt;
&lt;li&gt;把某些选择同在它前面要执行的笛卡尔积结合起来形成一个连接运算&#39;&lt;/li&gt;
&lt;li&gt;找出公共子表达式&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;代数优化算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代数优化算法&#34;&gt;#&lt;/a&gt; 代数优化算法&lt;/h4&gt;
&lt;p&gt;输入：一个查询树&lt;/p&gt;
&lt;p&gt;输出：优化的查询树&lt;/p&gt;
&lt;h5 id=&#34;物理优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#物理优化&#34;&gt;#&lt;/a&gt; 物理优化&lt;/h5&gt;
&lt;p&gt;代数优化改变查询语句中操作的次序和组合，不涉及底层的存取路径&lt;/p&gt;
&lt;p&gt;定义：选择高效合理的操作算法 / 存取路径&lt;/p&gt;
&lt;h6 id=&#34;基于存取路径的优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基于存取路径的优化&#34;&gt;#&lt;/a&gt; 基于存取路径的优化&lt;/h6&gt;
&lt;p&gt;选择操作的启发式规则 --&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;对于小关系，使用全表顺序扫描，即使有索引&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于大关系 --&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对于选择条件是主键 = 值的查询&lt;br /&gt;
选择主键索引&lt;/li&gt;
&lt;li&gt;对于选择条件是非主属性 = 值的查询，且选择列上有索引&lt;br /&gt;
估算查询结果的元组书目 -- 比例小 (10%), 索引，比例大 - 全表&lt;/li&gt;
&lt;li&gt;选择条件是属性上的非等值查询或范围查询，且存在索引&lt;br /&gt;
估算查询结果的元组书目 -- 比例小 (10%), 索引，比例大 - 全表&lt;/li&gt;
&lt;li&gt;对于用 and 连接的合取选择条件&lt;br /&gt;
优先采用组合索引扫描....&lt;/li&gt;
&lt;li&gt;or 连接&lt;br /&gt;
一般全表&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;连接操作的启发式规则&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;两个比哦啊都已经按照连接属性排序&lt;br /&gt;
排序合并法&lt;/li&gt;
&lt;li&gt;一个表在连接属性上有索引&lt;br /&gt;
索引连接法&lt;/li&gt;
&lt;li&gt;都不是 1,2, 而其中一个表比较小&lt;br /&gt;
散列连接法&lt;/li&gt;
&lt;li&gt;可以选用嵌套循环阀，并选择较小的表作为外表&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;基于代价估算的优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基于代价估算的优化&#34;&gt;#&lt;/a&gt; 基于代价估算的优化&lt;/h6&gt;
&lt;h6 id=&#34;二者结合的优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二者结合的优化&#34;&gt;#&lt;/a&gt; 二者结合的优化&lt;/h6&gt;
</content>
        <category term="大三" scheme="http://example.com/categories/junior/" />
        <category term="数据库" scheme="http://example.com/categories/junior/database/" />
        <category term="class3" scheme="http://example.com/tags/class3/" />
        <updated>2021-12-06T11:09:47.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/12/06/21-12-6-Database-exp-8/</id>
        <title>21/12/6 Database exp 8</title>
        <link rel="alternate" href="http://example.com/2021/12/06/21-12-6-Database-exp-8/"/>
        <content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;h1 id=&#34;分析系统功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分析系统功能&#34;&gt;#&lt;/a&gt; 分析系统功能&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h2 id=&#34;er图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#er图&#34;&gt;#&lt;/a&gt; ER 图&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120140233739.png&#34; alt=&#34;image-20211120140233739&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;关系模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关系模型&#34;&gt;#&lt;/a&gt; 关系模型&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h3 id=&#34;对象的属性描述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对象的属性描述&#34;&gt;#&lt;/a&gt; 对象的属性描述&lt;/h3&gt;
&lt;p&gt;客户 (&amp;lt;u&amp;gt; 客户编号 &amp;lt;/u&amp;gt;, 电子邮箱，登录密码，身份证，联系方式，姓名)&lt;br /&gt;
 银行卡 (&amp;lt;u&amp;gt; 卡号 &amp;lt;/u&amp;gt;, 类型，客户编号)&lt;br /&gt;
 理财产品 (&amp;lt;u&amp;gt; 理财产品编号 &amp;lt;/u&amp;gt;, 理财年限，购买金额，产品名称，产品描述)&lt;br /&gt;
 基金 (&amp;lt;u&amp;gt; 基金编号 &amp;lt;/u&amp;gt;, 基金名称，基金类型，风险等级，基金管理者，基金金额)&lt;br /&gt;
 保险 (&amp;lt;u&amp;gt; 保险编号 &amp;lt;/u&amp;gt;, 保险名称，适用人群，保险项目，保险金额，保险年限)&lt;br /&gt;
 资产 (&amp;lt;u&amp;gt; 客户编号 &amp;lt;/u&amp;gt;,&amp;lt;u &amp;gt; 资产编号 &amp;lt;/u&amp;gt;, 状态，购买数量，收益，购买时间)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;对象之间关系描述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对象之间关系描述&#34;&gt;#&lt;/a&gt; 对象之间关系描述&lt;/h3&gt;
&lt;p&gt;一个客户可以购买多种理财产品&lt;br /&gt;
可以办理多张银行卡&lt;br /&gt;
一个客户可以购买多种保险&lt;br /&gt;
一个客户可以购买多种基金&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120145443968.png&#34; alt=&#34;image-20211120145443968&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;物理设计与数据字典&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#物理设计与数据字典&#34;&gt;#&lt;/a&gt; 物理设计与数据字典&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h3 id=&#34;表及其属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#表及其属性&#34;&gt;#&lt;/a&gt; 表及其属性&lt;/h3&gt;
&lt;p&gt;client(c_id,c_name,c_mail,c_id_card,c_phone,c_password)&lt;br /&gt;
bank_card(b_id,b_type,b_c_id)&lt;br /&gt;
property(p_id,p_c_id,p_i_id,p_status,p_amount,p_get_time,p_income,p_type)&lt;br /&gt;
fund(f_name,f_id,f_type,f_amount,risk_level,f_manager)&lt;br /&gt;
insurance(i_name,i_id,i_amount,i_person,i_year,i_project)&lt;br /&gt;
f_product(fp_id,fp_name，fp_description，fp_amount，fp_year)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;数据字典&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据字典&#34;&gt;#&lt;/a&gt; 数据字典&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id=&#34;表1-1-client表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#表1-1-client表&#34;&gt;#&lt;/a&gt; 表 1-1 client 表&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;字段名称&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;字段类型&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;约束&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;c_id&lt;/td&gt;
&lt;td&gt;INTEGER&lt;/td&gt;
&lt;td&gt;PRIMARY KEY&lt;/td&gt;
&lt;td&gt;客户编码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;c_name&lt;/td&gt;
&lt;td&gt;VARCHAR(100)&lt;/td&gt;
&lt;td&gt;NOT NULL&lt;/td&gt;
&lt;td&gt;客户名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;c_mail&lt;/td&gt;
&lt;td&gt;CHAR(30)&lt;/td&gt;
&lt;td&gt;UNIQUE&lt;/td&gt;
&lt;td&gt;客户邮箱&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;c_id_card&lt;/td&gt;
&lt;td&gt;CHAR(20)&lt;/td&gt;
&lt;td&gt;UNIQUE NOT NULL&lt;/td&gt;
&lt;td&gt;客户身份证&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;c_phone&lt;/td&gt;
&lt;td&gt;CHAR(20)&lt;/td&gt;
&lt;td&gt;UNIQUE NOT NULL&lt;/td&gt;
&lt;td&gt;客户手机号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;c_password&lt;/td&gt;
&lt;td&gt;CHAR(20)&lt;/td&gt;
&lt;td&gt;NOT NULL&lt;/td&gt;
&lt;td&gt;客户登录密码&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;表1-2bank_card表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#表1-2bank_card表&#34;&gt;#&lt;/a&gt; 表 1-2bank_card 表&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;字段名称&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;字段类型&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;约束&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;b_id&lt;/td&gt;
&lt;td&gt;INTEGER&lt;/td&gt;
&lt;td&gt;PRIMARY KEY&lt;/td&gt;
&lt;td&gt;银行卡号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;b_type&lt;/td&gt;
&lt;td&gt;CHAR(20)&lt;/td&gt;
&lt;td&gt;NOT NULL&lt;/td&gt;
&lt;td&gt;银行卡类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;b_c_id&lt;/td&gt;
&lt;td&gt;INTERGER&lt;/td&gt;
&lt;td&gt;NOT NULL  &amp;lt;br /&amp;gt;FOREIGNKEY&lt;/td&gt;
&lt;td&gt;客户编号&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;表1-3-property资产表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#表1-3-property资产表&#34;&gt;#&lt;/a&gt; 表 1-3 property 资产表&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;字段名称&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;字段类型&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;约束&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;p_id&lt;/td&gt;
&lt;td&gt;INTEGER&lt;/td&gt;
&lt;td&gt;PRIMARY KEY&lt;/td&gt;
&lt;td&gt;资产编号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;p_c_id&lt;/td&gt;
&lt;td&gt;INTEGER&lt;/td&gt;
&lt;td&gt;NOT NULL&amp;lt;br /&amp;gt;FOREIGN KEY&lt;/td&gt;
&lt;td&gt;客户编号 &amp;lt;br /&amp;gt; 外键，对应 client 中的 c_id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;p_i_id&lt;/td&gt;
&lt;td&gt;INTEGER&lt;/td&gt;
&lt;td&gt;NOT NULL&amp;lt;br /&amp;gt;FOREIGN KEY&lt;/td&gt;
&lt;td&gt;商品编号，对应三种产品的 id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;p_status&lt;/td&gt;
&lt;td&gt;CHAR(20)&lt;/td&gt;
&lt;td&gt;NOT NULL&lt;/td&gt;
&lt;td&gt;状态&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;p_amount&lt;/td&gt;
&lt;td&gt;INTERGER&lt;/td&gt;
&lt;td&gt;NOT NULL&lt;/td&gt;
&lt;td&gt;购买数量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;p_get_time&lt;/td&gt;
&lt;td&gt;DATE&lt;/td&gt;
&lt;td&gt;NOT NULL&lt;/td&gt;
&lt;td&gt;购买时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;p_income&lt;/td&gt;
&lt;td&gt;INTERGER&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;收益&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;p_type&lt;/td&gt;
&lt;td&gt;INTERGER&lt;/td&gt;
&lt;td&gt;NOT NULL&lt;/td&gt;
&lt;td&gt;1 代表是理财产品，2 代表保险，3 代表基金&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;表1-4-f_products-理财产品表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#表1-4-f_products-理财产品表&#34;&gt;#&lt;/a&gt; 表 1-4 f_products 理财产品表&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;字段名称&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;字段类型&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;约束&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;fp_id&lt;/td&gt;
&lt;td&gt;INTEGER&lt;/td&gt;
&lt;td&gt;PRIMARY KEY&lt;/td&gt;
&lt;td&gt;理财产品编号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fp_year&lt;/td&gt;
&lt;td&gt;INTEGER&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;理财年限&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fp_amount&lt;/td&gt;
&lt;td&gt;INTERGER&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;购买金额&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fp_name&lt;/td&gt;
&lt;td&gt;VARCHAR(200)&lt;/td&gt;
&lt;td&gt;NOT NULL&lt;/td&gt;
&lt;td&gt;产品名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fp_description&lt;/td&gt;
&lt;td&gt;VARCHAR(2000)&lt;/td&gt;
&lt;td&gt;NOT NULL&lt;/td&gt;
&lt;td&gt;产品描述&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;表1-5-insurance-保险表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#表1-5-insurance-保险表&#34;&gt;#&lt;/a&gt; 表 1-5 insurance 保险表&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;字段名称&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;字段类型&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;约束&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;i_id&lt;/td&gt;
&lt;td&gt;INTEGER&lt;/td&gt;
&lt;td&gt;PRIMARY KEY&lt;/td&gt;
&lt;td&gt;保险编号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;i_name&lt;/td&gt;
&lt;td&gt;VARCHAR(100)&lt;/td&gt;
&lt;td&gt;NOT NULL&lt;/td&gt;
&lt;td&gt;保险名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;i_person&lt;/td&gt;
&lt;td&gt;CHAR(30)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;适用人群&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;i_project&lt;/td&gt;
&lt;td&gt;VARCHAR(200)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;保险项目&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;i_amount&lt;/td&gt;
&lt;td&gt;INTERGER&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;保险金额&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;i_year&lt;/td&gt;
&lt;td&gt;CHAR(20)&lt;/td&gt;
&lt;td&gt;NOT NULL&lt;/td&gt;
&lt;td&gt;保险年限&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;表1-6-fund基金表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#表1-6-fund基金表&#34;&gt;#&lt;/a&gt; 表 1-6 fund 基金表&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;字段名称&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;字段类型&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;约束&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;f_id&lt;/td&gt;
&lt;td&gt;INTEGER&lt;/td&gt;
&lt;td&gt;PRIMARY KEY&lt;/td&gt;
&lt;td&gt;基金编号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;f_name&lt;/td&gt;
&lt;td&gt;VARCHAR(100)&lt;/td&gt;
&lt;td&gt;NOT NULL&lt;/td&gt;
&lt;td&gt;基金名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;f_type&lt;/td&gt;
&lt;td&gt;CHAR(30)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;基金类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;f_risk&lt;/td&gt;
&lt;td&gt;INTERGER&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;风险等级&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;f_manager&lt;/td&gt;
&lt;td&gt;INTERGER&lt;/td&gt;
&lt;td&gt;NOT NULL&lt;/td&gt;
&lt;td&gt;基金管理者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;f_amount&lt;/td&gt;
&lt;td&gt;INTERGER&lt;/td&gt;
&lt;td&gt;NOT NULL&lt;/td&gt;
&lt;td&gt;基金金额&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建数据库表&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建 finance 数据库作为项目数据库，数据库编码为 UTF-8。（2 分）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;切换到 omm 用户&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120152854123.png&#34; alt=&#34;image-20211120152854123&#34; /&gt;&lt;/li&gt;
&lt;li&gt;启动数据库服务&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120152924367.png&#34; alt=&#34;image-20211120152924367&#34; /&gt;&lt;/li&gt;
&lt;li&gt;登入 postres 数据库 (为了在里面创建新的数据库)&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120152949937.png&#34; alt=&#34;image-20211120152949937&#34; /&gt;&lt;/li&gt;
&lt;li&gt;创建 finance 数据库，设置编码为 UTF-8&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120153159839.png&#34; alt=&#34;image-20211120153159839&#34; /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;连接 finance 数据库，创建名为 finance 的 schema，并设置 finance 为当前的 schema。（2 分）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;连接 finance 数据库&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120153222258.png&#34; alt=&#34;image-20211120153222258&#34; /&gt;&lt;/li&gt;
&lt;li&gt;创建名为 finance 的 schema，并设置 finance 为当前的 schema&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120153259340.png&#34; alt=&#34;image-20211120153259340&#34; /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 finance 模式下完成金融管理系统中所有数据库对象（数据表）的创建，并完成数据的填充。其中客户数据不少于 20 条，银行卡数据不少于 10 条，其他数据不少于 5 条；（6 分）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;数据表创建&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;客户表创建&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120162145657.png&#34; alt=&#34;image-20211120162145657&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120162136314.png&#34; alt=&#34;image-20211120162136314&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;银行卡表创建&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120161519458.png&#34; alt=&#34;image-20211120161519458&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120161510470.png&#34; alt=&#34;image-20211120161510470&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;理财产品表创建&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120161622995.png&#34; alt=&#34;image-20211120161622995&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120161716375.png&#34; alt=&#34;image-20211120161716375&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保险信息表创建&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120161636166.png&#34; alt=&#34;image-20211120161636166&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120161724463.png&#34; alt=&#34;image-20211120161724463&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基金信息表创建&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120161645388.png&#34; alt=&#34;image-20211120161645388&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120161745238.png&#34; alt=&#34;image-20211120161745238&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;资产信息表创建&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120161659959.png&#34; alt=&#34;image-20211120161659959&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120161759138.png&#34; alt=&#34;image-20211120161759138&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加数据&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;客户信息添加&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120163251246.png&#34; alt=&#34;image-20211120163251246&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;银行卡数据填充&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120163727388.png&#34; alt=&#34;image-20211120163727388&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;理财产品填充&lt;/p&gt;
&lt;p&gt;INSERT INTO finance.f_products&lt;/p&gt;
&lt;p&gt;(fp_id  ,fp_year   ,fp_amount  ,fp_name   ,fp_description ) VALUES&lt;/p&gt;
&lt;p&gt;(1    ,2      ,4000000   ,&#39; 储蓄 &#39;   ,&#39; 储蓄理财产品 &#39;),&lt;/p&gt;
&lt;p&gt;(2    ,1      ,3000    ,&#39; 债券 &#39;   ,&#39; 债券是政府、企业、银行等债务人为筹集资金，按照法定程序发行并向债权人承诺于指定日期还本付息的有价证券 &#39;),&lt;/p&gt;
&lt;p&gt;(3    ,1      ,200000   ,&#39; 股票 &#39;   ,&#39; 股份公司为筹集资金而发行给各个股东作为持股凭证并借以取得股息和红利的一种有价证券 &#39;),&lt;/p&gt;
&lt;p&gt;(4    ,3      ,2000    ,&#39; 国债 &#39;   ,&#39; 国家以其信用为基础，按照债的一般原则，通过向社会筹集资金所形成的债权债务关系 &#39;),&lt;/p&gt;
&lt;p&gt;(5    ,2      ,10000    ,&#39; 大宗商品 &#39; ,&#39; 与大宗商品期货挂钩的理财产品。目前市场上主要以挂钩黄金、石油、农产品的理财产品居多 &#39;)&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120174858479.png&#34; alt=&#34;image-20211120174858479&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保险产品填充&lt;/p&gt;
&lt;p&gt;INSERT INTO finance.insurance(i_name,i_id,i_amount,i_person,i_year,i_project) VALUES&lt;/p&gt;
&lt;p&gt;(&#39; 意外保险 &#39;,3,5000,&#39; 所有人 &#39;,20,&#39; 平安保险 &#39;),&lt;/p&gt;
&lt;p&gt;(&#39; 医疗保险 &#39;,4,2000,&#39; 所有人 &#39;,20,&#39; 平安保险 &#39;),&lt;/p&gt;
&lt;p&gt;(&#39; 健康保险 &#39;,1,2000,&#39; 老年人 &#39;,10,&#39; 平安保险 &#39;),&lt;/p&gt;
&lt;p&gt;(&#39; 人寿保险 &#39;,2,3000,&#39; 老年人 &#39;,10,&#39; 平安保险 &#39;),&lt;/p&gt;
&lt;p&gt;(&#39; 财产损失保险 &#39;,5,1500,&#39; 中年人 &#39;,3,&#39; 平安保险 &#39;);&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120175159475.png&#34; alt=&#34;image-20211120175159475&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基金表格填充&lt;/p&gt;
&lt;p&gt;INSERT INTO finance.fund (f_id,fp_name,f_type,f_risk,f_manager,f_amount) VALUES&lt;/p&gt;
&lt;p&gt;(1,&#39; 股票基金 &#39;,&#39; 股票型 &#39;,3,1,200000),&lt;/p&gt;
&lt;p&gt;(2,&#39; 债券基金 &#39;,&#39; 债券型 &#39;,2,2,3000),&lt;/p&gt;
&lt;p&gt;(3,&#39; 投资基金 &#39;,&#39; 债券型 &#39;,3,2,1000),&lt;/p&gt;
&lt;p&gt;(4,&#39; 国债 &#39;,&#39; 货币型 &#39;,1,4,2000),&lt;/p&gt;
&lt;p&gt;(5,&#39; 期货 &#39;,&#39; 期货型 &#39;,2,5,1500);&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120180449122.png&#34; alt=&#34;image-20211120180449122&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;资产表格填充&lt;/p&gt;
&lt;p&gt;INSERT INTO finance.property&lt;/p&gt;
&lt;p&gt;(p_id  , p_c_id   ,p_i_id , p_status  , p_amount  ,p_get_time   ,p_income  ,p_type ) VALUES&lt;/p&gt;
&lt;p&gt;(1    ,1      ,1    ,&#39; 可用 &#39;   ,100     ,&#39;2021-11-20&#39;  ,2000    ,1),&lt;/p&gt;
&lt;p&gt;(2    ,1      ,2    ,&#39; 可用 &#39;   ,100     ,&#39;2021-11-21&#39;  ,3020    ,1),&lt;/p&gt;
&lt;p&gt;(3    ,1      ,1    ,&#39; 冻结 &#39;   ,100     ,&#39;2021-11-20&#39;  ,2000    ,2),&lt;/p&gt;
&lt;p&gt;(4    ,1      ,4    ,&#39; 可用 &#39;   ,101     ,&#39;2021-11-10&#39;  ,3000    ,3),&lt;/p&gt;
&lt;p&gt;(5    ,2      ,5    ,&#39; 可用 &#39;   ,100     ,&#39;2021-11-20&#39;  ,2000    ,2)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120181110730.png&#34; alt=&#34;image-20211120181110730&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对表添加外键约束，在银行信息表和资产信息表中，都存在每个银行卡必须有一个持卡者、每份资产必须都有一个资产拥有者这样的对应关系。因此针对这种对应关系，创建外键约束。（4 分）&lt;/p&gt;
&lt;p&gt;添加外键约束&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;信用卡的外键&lt;br /&gt;
 ALTER TABLE finance.bank_card ADD CONSTRAINT fk_c_id FOREIGN KEY (b_c_id) REFERENCES finance.client (c_id) ON DELETE CASCADE;&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120182046151.png&#34; alt=&#34;image-20211120182046151&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;资产的外键&lt;br /&gt;
 ALTER TABLE finance.property ADD CONSTRAINT fk_pro_c_id FOREIGN KEY (p_c_id) REFERENCES finance.client (c_id) ON DELETE CASCADE;&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120182231938.png&#34; alt=&#34;image-20211120182231938&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在理财产品表、保险信息表和基金信息表中，都存在金额这个属性，在现实生活中，金额不会存在负数。因此针对表中金额的属性，增加大于 0 的约束条件。（4 分）&lt;/p&gt;
&lt;p&gt;增加大于 0 的约束&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;f_products 表&lt;br /&gt;
 ALTER table finance.f_products ADD CONSTRAINT c_p_mount CHECK (fp_amount&amp;gt;=0);&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120182747860.png&#34; alt=&#34;image-20211120182747860&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fund 表&lt;/p&gt;
&lt;p&gt;ALTER table finance.fund ADD CONSTRAINT c_f_mount CHECK (f_amount &amp;gt;=0);&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120182809449.png&#34; alt=&#34;image-20211120182809449&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;insurance 表&lt;br /&gt;
 ALTER table finance.insurance ADD CONSTRAINT c_i_mount CHECK (i_amount&amp;gt;=0);&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120182806605.png&#34; alt=&#34;image-20211120182806605&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;输出查询所有表的数据字典的查询语句和结果，可以截图或者复制黏贴代码。(基本都在之前有展示，这里对所有的表及 schema 进行了一次查询)&lt;br /&gt;
select * from pg_tables;&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120183633861.png&#34; alt=&#34;image-20211120183633861&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输出查询所有表的数据的查询语句和结果，可以截图或者复制黏贴代码。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;client 表&lt;br /&gt;
 select * from finance.client;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120182955194.png&#34; alt=&#34;image-20211120182955194&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;bank_card 表&lt;br /&gt;
 select * from finance.bank_card;&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120183115059.png&#34; alt=&#34;image-20211120183115059&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fund 表&lt;br /&gt;
 select * from finance.fund;&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120183213621.png&#34; alt=&#34;image-20211120183213621&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;f_products 表&lt;br /&gt;
 select * from finance.f_products;&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120183232153.png&#34; alt=&#34;image-20211120183232153&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;insurance 表&lt;br /&gt;
 select * from finance.insurance;&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120183242518.png&#34; alt=&#34;image-20211120183242518&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;property 表&lt;br /&gt;
 select * from finance.property;&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120183254782.png&#34; alt=&#34;image-20211120183254782&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输出所有创建约束的语句和创建结果，可以截图或者复制黏贴代码 (这在之前已经放上了)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对表中的数据进行查询操作&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;l  至少完成 1 条单表查询和 1 条表查询。（4 分）&lt;br /&gt;
单表查询 -- 查询客户表中所有的客户 id&lt;/p&gt;
&lt;p&gt;select c_id from finance.client;&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120183930730.png&#34; alt=&#34;image-20211120183930730&#34; /&gt;&lt;/p&gt;
&lt;p&gt;表查询&lt;br /&gt;
 select c_name from finance.client;&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120191355193.png&#34; alt=&#34;image-20211120191355193&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;l  至少完成两条聚合查询，例如查询用户表中有多少个用户；查询保险信息表中，保险金额的平均值等。（4 分）&lt;br /&gt;
&lt;strong&gt;查询 property 表的 income 平均值&lt;/strong&gt;&lt;br /&gt;
 select avg (p_income) from finance.property&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120191618236.png&#34; alt=&#34;image-20211120191618236&#34; /&gt;&lt;br /&gt;
&lt;strong&gt; 查询用户表中用户总数&lt;/strong&gt;&lt;br /&gt;
 select count (*) from finance.client;&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120191822353.png&#34; alt=&#34;image-20211120191822353&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;l  至少完成 3 条连接查询，例如：半连接、反连接、多表查询和子查询。（6 分）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;等值连接查询，查询每个用户及其拥有的资产&lt;br /&gt;
 select finance.client.*,finance.property. *&lt;br /&gt;
from finance.client,finance.property&lt;br /&gt;
where finance.client.c_id=finance.property.p_c_id;&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120192143231.png&#34; alt=&#34;image-20211120192143231&#34; /&gt;&lt;/li&gt;
&lt;li&gt;自身连接，在 fund 表中对每一个基金项，查询 manager 和自身 id 相同的基金&lt;br /&gt;
 select first.*,second.f_manager&lt;br /&gt;
from finance.fund first,finance.fund second&lt;br /&gt;
where first.f_id = second.f_manager&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120192923196.png&#34; alt=&#34;image-20211120192923196&#34; /&gt;&lt;/li&gt;
&lt;li&gt;子查询，查询和 p_id=3 的资产处于相同状态的资产 (然后发现就它自己冻结着)&lt;br /&gt;
select * from finance.property&lt;br /&gt;
where p_status=&lt;br /&gt;
(select p_status from finance.property where p_id=3);&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120193259515.png&#34; alt=&#34;image-20211120193259515&#34; /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;至少完成 1 条 ORDER BY 查询。（2 分）&lt;br /&gt;
将资产按照收益逆序输出&lt;br /&gt;
 select * from finance.property order by p_income desc;&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120193418297.png&#34; alt=&#34;image-20211120193418297&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;至少完成 1 条 GROUP BY……HAVING 查询。（4 分）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查询收益在 2000 及以上的资产及其平均收益，将结果按 p_id 分组显示，且只显示平均收益大于 2500 的组&lt;br /&gt;
 select *,avg (p_income)   from finance.property&lt;br /&gt;
where p_income&amp;gt;=2000&lt;/p&gt;
&lt;p&gt;group by p_id&lt;br /&gt;
having avg(p_income)&amp;gt;=2500;&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120194044403.png&#34; alt=&#34;image-20211120194044403&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查询基金，将其按 f_id 分组，且只显示平均数量大于等于 2000 的组&lt;br /&gt;
 select *,avg (f_amount) from finance.fund&lt;br /&gt;
group by f_id&lt;br /&gt;
having avg(f_amount)&amp;gt;=2000;&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120194430725.png&#34; alt=&#34;image-20211120194430725&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;45-创建视图和索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#45-创建视图和索引&#34;&gt;#&lt;/a&gt; 4.5 创建视图和索引&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建一个视图&lt;/p&gt;
&lt;p&gt;查看 client 中属性，除了 c_mail 属性&lt;br /&gt;
 create view see_client&lt;br /&gt;
as&lt;br /&gt;
select c_id,c_name,c_id_card,c_phone,c_password&lt;br /&gt;
from finance.client&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120195705769.png&#34; alt=&#34;image-20211120195705769&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改视图&lt;/p&gt;
&lt;p&gt;修改视图所属 schema&lt;br /&gt;
alter view see_client set schema finance;&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120202011203.png&#34; alt=&#34;image-20211120202011203&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用视图进行查询&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120202005604.png&#34; alt=&#34;image-20211120202005604&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重命名视图&lt;br /&gt;
 alter view finance.see_client&lt;br /&gt;
rename to oh_my_god;&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120202200841.png&#34; alt=&#34;image-20211120202200841&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除视图&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120202227819.png&#34; alt=&#34;image-20211120202227819&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建索引&lt;br /&gt;
为客户电话号码创建索引&lt;br /&gt;
 CREATE INDEX index_phone on finance.client (c_phone) ;&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120202553719.png&#34; alt=&#34;image-20211120202553719&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重建索引&lt;br /&gt;
对整个客户表重建索引&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120202715402.png&#34; alt=&#34;image-20211120202715402&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重命名索引&lt;br /&gt;
 alter index finance.index_phone rename to ind_phone;&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120202831047.png&#34; alt=&#34;image-20211120202831047&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除索引&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120202849544.png&#34; alt=&#34;image-20211120202849544&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;146-数据修改和删除5分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#146-数据修改和删除5分&#34;&gt;#&lt;/a&gt; 1.4.6 数据修改和删除（5 分）&lt;/h3&gt;
&lt;p&gt;任务：&lt;/p&gt;
&lt;p&gt;l  修改数据：至少修改 2 个不同的数据。（3 分）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;将 client 表中第 1 个元素的值 c_name 改为 &#39; 年没怀念&#39;&lt;br /&gt;
 之前的表&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120205008902.png&#34; alt=&#34;image-20211120205008902&#34; /&gt;&lt;br /&gt;
 修改语句:&lt;br /&gt;
update finance.client&lt;br /&gt;
set c_name=&#39; 年没怀念&#39;&lt;br /&gt;
where c_id=1;&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120205223012.png&#34; alt=&#34;image-20211120205223012&#34; /&gt;&lt;/p&gt;
&lt;p&gt;修改后表情况&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120205200129.png&#34; alt=&#34;image-20211120205200129&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将 property 中 p_get_time 小于 2021-11-11 00:00:00 的值修改为 2021-11-19 00:00:00&lt;/p&gt;
&lt;p&gt;修改前状态&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120205546236.png&#34; alt=&#34;image-20211120205546236&#34; /&gt;&lt;br /&gt;
 修改&lt;br /&gt;
 update finance.property&lt;br /&gt;
set p_get_time=&#39;2021-11-19&#39;&lt;br /&gt;
where p_get_time&amp;lt;&#39;2021-11-11&#39;;&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120205628164.png&#34; alt=&#34;image-20211120205628164&#34; /&gt;&lt;br /&gt;
 修改后状态&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120205638384.png&#34; alt=&#34;image-20211120205638384&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;l  删除指定数据：至少删除 2 个不同数据表的数据。（2 分）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;将 finance.property 中 p_amount=101 的数据删除&lt;/p&gt;
&lt;p&gt;删除前表情况&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120205638384.png&#34; alt=&#34;image-20211120205638384&#34; /&gt;&lt;/p&gt;
&lt;p&gt;删除&lt;br /&gt;
 delete from finance.property where p_amount=101;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120210444230.png&#34; alt=&#34;image-20211120210444230&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​		删除后表情况&lt;br /&gt;
​		&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120210451058.png&#34; alt=&#34;image-20211120210451058&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;删掉 c_id&amp;gt;20 的用户信息&lt;/p&gt;
&lt;p&gt;删除前表情况&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120210652108.png&#34; alt=&#34;image-20211120210652108&#34; /&gt;&lt;/p&gt;
&lt;p&gt;删除操作&lt;/p&gt;
&lt;p&gt;delete from finance.client where c_id&amp;gt;20;&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120210705838.png&#34; alt=&#34;image-20211120210705838&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​		删除后表情况&lt;br /&gt;
​		&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120210710547.png&#34; alt=&#34;image-20211120210710547&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;147-创建新用户6分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#147-创建新用户6分&#34;&gt;#&lt;/a&gt; 1.4.7 创建新用户（6 分）&lt;/h3&gt;
&lt;p&gt;任务：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;新用户的创建和授权：创建用户 dbuser，密码为 Gauss#3demo；给用户 dbuser 授予 finance 数据库下银行卡信息表的查询和插入权限，并将 finance 模式的权限也授予 dbuser 用户。（3 分）&lt;/p&gt;
&lt;p&gt;创建用户&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120210919044.png&#34; alt=&#34;image-20211120210919044&#34; /&gt;&lt;/p&gt;
&lt;p&gt;给用户 dbuser 授予 finance 数据库下银行卡信息表的查询和插入权限，并将 finance 模式的权限也授予 dbuser 用户&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120210938886.png&#34; alt=&#34;image-20211120210938886&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新用户连接数据库：使用新用户连接 finance 数据库；访问 finance 数据库的银行卡信息表。（2 分）&lt;/p&gt;
&lt;p&gt;新用户连接&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120211203343.png&#34; alt=&#34;image-20211120211203343&#34; /&gt;&lt;br /&gt;
 新用户访问 finance 数据库的银行卡信息表&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120211232019.png&#34; alt=&#34;image-20211120211232019&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除 finance 模式。（1 分）&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120211528768.png&#34; alt=&#34;image-20211120211528768&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;148-使用jdbc连接opengauss数据库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#148-使用jdbc连接opengauss数据库&#34;&gt;#&lt;/a&gt; 1.4.8 使用 jdbc 连接 openGauss 数据库&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建测试数据库 demo；&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120211928291.png&#34; alt=&#34;image-20211120211928291&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建名为 demo 的 schema，并设置 demo 为当前的 schema&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120211933670.png&#34; alt=&#34;image-20211120211933670&#34; /&gt;&lt;br /&gt;
 设置搜索路径为 demo&lt;/p&gt;
&lt;p&gt;SET search_path TO demo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建测试表 websites（id,name,url），数据为（&#39;1&#39;, &#39;openGauss&#39;, &#39;&lt;a href=&#34;https://opengauss.org/zh/&#39;)%EF%BC%8C(&#39;2&#34;&gt;https://opengauss.org/zh/&#39;)，(&#39;2&lt;/a&gt;&#39;, &#39; 华为云 &#39;, &#39;&lt;a href=&#34;https://www.huaweicloud.com/&#34;&gt;https://www.huaweicloud.com/&lt;/a&gt;&#39;), (&#39;3&#39;, &#39;openEuler&#39;, &#39;&lt;a href=&#34;https://openeuler.org/zh/&#34;&gt;https://openeuler.org/zh/&lt;/a&gt;&#39;), (&#39;4&#39;, &#39; 华为 support 中心 &#39;, &#39;&lt;a href=&#34;https://support.huaweicloud.com/&#34;&gt;https://support.huaweicloud.com/&lt;/a&gt;&#39;)。（3 分）&lt;br /&gt;
create table websites&lt;br /&gt;
(&lt;br /&gt;
id Integer primary key,&lt;br /&gt;
name varchar(200),&lt;br /&gt;
url varchar(200)&lt;/p&gt;
&lt;p&gt;);&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120212236363.png&#34; alt=&#34;image-20211120212236363&#34; /&gt;&lt;br /&gt;
 插入数据&lt;/p&gt;
&lt;p&gt;INSERT INTO websites (id,name,url) VALUES&lt;/p&gt;
&lt;p&gt;(&#39;1&#39;, &#39;openGauss&#39;, &#39;&lt;a href=&#34;https://opengauss.org/zh/&#34;&gt;https://opengauss.org/zh/&lt;/a&gt;&#39;),&lt;/p&gt;
&lt;p&gt;(&#39;2&#39;, &#39; 华为云 &#39;, &#39;&lt;a href=&#34;https://www.huaweicloud.com/&#34;&gt;https://www.huaweicloud.com/&lt;/a&gt;&#39;),&lt;/p&gt;
&lt;p&gt;(&#39;3&#39;, &#39;openEuler&#39;, &#39;&lt;a href=&#34;https://openeuler.org/zh/&#34;&gt;https://openeuler.org/zh/&lt;/a&gt;&#39;),&lt;/p&gt;
&lt;p&gt;(&#39;4&#39;, &#39; 华为 support 中心 &#39;, &#39;&lt;a href=&#34;https://support.huaweicloud.com/&#34;&gt;https://support.huaweicloud.com/&lt;/a&gt;&#39;)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120212401022.png&#34; alt=&#34;image-20211120212401022&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看入站规则是否包括 tcp26000 端口&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120213457003.png&#34; alt=&#34;image-20211120213457003&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看 java 版本是否为 8&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211120213634213.png&#34; alt=&#34;image-20211120213634213&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建项目，引入 postgres.jar 包&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211206104756935.png&#34; alt=&#34;image-20211206104756935&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;写下测试程序如下&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211206104819179.png&#34; alt=&#34;image-20211206104819179&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211206104832554.png&#34; alt=&#34;image-20211206104832554&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结果&lt;br /&gt;
&lt;img src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211206104851481.png&#34; alt=&#34;image-20211206104851481&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;本实验完成&lt;/p&gt;
</content>
        <category term="exp8" scheme="http://example.com/tags/exp8/" />
        <updated>2021-12-06T11:09:47.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/12/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7/</id>
        <title></title>
        <link rel="alternate" href="http://example.com/2021/12/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7/"/>
        <content type="html">&lt;h1 id=&#34;数据库的安全性&#34;&gt;&lt;a href=&#34;#数据库的安全性&#34; class=&#34;headerlink&#34; title=&#34;数据库的安全性&#34;&gt;&lt;/a&gt;数据库的安全性&lt;/h1&gt;&lt;h2 id=&#34;8-4-存取控制&#34;&gt;&lt;a href=&#34;#8-4-存取控制&#34; class=&#34;headerlink&#34; title=&#34;8.4 存取控制&#34;&gt;&lt;/a&gt;8.4 存取控制&lt;/h2&gt;&lt;h6 id=&#34;用户权限定义和合法的权限检查机制一起组成了DBMS的安全子系统&#34;&gt;&lt;a href=&#34;#用户权限定义和合法的权限检查机制一起组成了DBMS的安全子系统&#34; class=&#34;headerlink&#34; title=&#34;用户权限定义和合法的权限检查机制一起组成了DBMS的安全子系统&#34;&gt;&lt;/a&gt;用户权限定义和合法的权限检查机制一起组成了DBMS的安全子系统&lt;/h6&gt;&lt;p&gt;常用存取控制方法&lt;/p&gt;
&lt;h4 id=&#34;自主存取控制&#34;&gt;&lt;a href=&#34;#自主存取控制&#34; class=&#34;headerlink&#34; title=&#34;自主存取控制&#34;&gt;&lt;/a&gt;自主存取控制&lt;/h4&gt;&lt;p&gt;灵活&lt;/p&gt;
&lt;p&gt;同一用户对不同的数据对象有不同的…&lt;/p&gt;
&lt;h5 id=&#34;授权粒度&#34;&gt;&lt;a href=&#34;#授权粒度&#34; class=&#34;headerlink&#34; title=&#34;授权粒度&#34;&gt;&lt;/a&gt;授权粒度&lt;/h5&gt;&lt;p&gt;授权的数据对象粒度&lt;/p&gt;
&lt;p&gt;数据库,表,属性列,行…&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;实现–GRANT REVOKE&lt;/li&gt;
&lt;li&gt;数据库角色&lt;br&gt;在用户量较大的情况下引入&lt;br&gt;定义:一组与数据库操作有关的角色&lt;br&gt;可以为具有相同权限的用户创建一个角色&lt;/li&gt;
&lt;li&gt;权限传播&lt;br&gt;…&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;强制存取控制&#34;&gt;&lt;a href=&#34;#强制存取控制&#34; class=&#34;headerlink&#34; title=&#34;强制存取控制&#34;&gt;&lt;/a&gt;强制存取控制&lt;/h4&gt;&lt;h5 id=&#34;主体与客体&#34;&gt;&lt;a href=&#34;#主体与客体&#34; class=&#34;headerlink&#34; title=&#34;主体与客体&#34;&gt;&lt;/a&gt;主体与客体&lt;/h5&gt;&lt;h5 id=&#34;敏感度标记&#34;&gt;&lt;a href=&#34;#敏感度标记&#34; class=&#34;headerlink&#34; title=&#34;敏感度标记&#34;&gt;&lt;/a&gt;敏感度标记&lt;/h5&gt;&lt;p&gt;DBMS为每个实例指派一个敏感度标记&lt;/p&gt;
&lt;p&gt;敏感度分为若干级别(绝密..&lt;/p&gt;
&lt;p&gt;主体的敏感度标记称为许可证级别&lt;/p&gt;
&lt;p&gt;客体的称为密级&lt;/p&gt;
&lt;p&gt;MAC机制就是通过对比主体的Label和客体的Label,最终确定主体是否能够存取客体&lt;/p&gt;
&lt;h5 id=&#34;强制存取控制规则&#34;&gt;&lt;a href=&#34;#强制存取控制规则&#34; class=&#34;headerlink&#34; title=&#34;强制存取控制规则&#34;&gt;&lt;/a&gt;强制存取控制规则&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;读 主体许可证级别&amp;gt;=客体密级&lt;/li&gt;
&lt;li&gt;写 主体的许可证级别=客体密级&lt;/li&gt;
&lt;li&gt;修正规则*****&lt;ol&gt;
&lt;li&gt;waiting for write&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;权限-只有具有合法的许可证才能存取&#34;&gt;&lt;a href=&#34;#权限-只有具有合法的许可证才能存取&#34; class=&#34;headerlink&#34; title=&#34;权限,只有具有合法的许可证才能存取&#34;&gt;&lt;/a&gt;权限,只有具有合法的许可证才能存取&lt;/h4&gt;&lt;p&gt;每一个用户被授予某一个级别的许可证&lt;/p&gt;
&lt;p&gt;对于任意一个对象,只有具有合法的许可证才能存取&lt;/p&gt;
&lt;h2 id=&#34;8-5-视图机制&#34;&gt;&lt;a href=&#34;#8-5-视图机制&#34; class=&#34;headerlink&#34; title=&#34;8.5 视图机制&#34;&gt;&lt;/a&gt;8.5 视图机制&lt;/h2&gt;</content>
        <updated>2021-12-06T11:03:26.530Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/12/06/hello-world/</id>
        <title>Hello World</title>
        <link rel="alternate" href="http://example.com/2021/12/06/hello-world/"/>
        <content type="html">&lt;p&gt;Welcome to &lt;a href=&#34;https://hexo.io/&#34;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&#34;https://hexo.io/docs/&#34;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&#34;https://hexo.io/docs/troubleshooting.html&#34;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/hexojs/hexo/issues&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;Quick-Start&#34;&gt;&lt;a href=&#34;#Quick-Start&#34; class=&#34;headerlink&#34; title=&#34;Quick Start&#34;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&#34;Create-a-new-post&#34;&gt;&lt;a href=&#34;#Create-a-new-post&#34; class=&#34;headerlink&#34; title=&#34;Create a new post&#34;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo new &lt;span class=&#34;string&#34;&gt;&amp;quot;My New Post&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/writing.html&#34;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;Run-server&#34;&gt;&lt;a href=&#34;#Run-server&#34; class=&#34;headerlink&#34; title=&#34;Run server&#34;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/server.html&#34;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;Generate-static-files&#34;&gt;&lt;a href=&#34;#Generate-static-files&#34; class=&#34;headerlink&#34; title=&#34;Generate static files&#34;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/generating.html&#34;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;Deploy-to-remote-sites&#34;&gt;&lt;a href=&#34;#Deploy-to-remote-sites&#34; class=&#34;headerlink&#34; title=&#34;Deploy to remote sites&#34;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/one-command-deployment.html&#34;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
        <updated>2021-12-06T05:18:37.655Z</updated>
    </entry>
</feed>
