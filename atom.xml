<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>年没怀念der博客</title>
    <subtitle></subtitle>
    <icon>http://example.com/images/favicon.ico</icon>
    <link href="http://example.com" />
    <author>
      <name>nmhn</name>
    </author>
    <updated>2022-04-02T12:01:01.000Z</updated>
    <entry>
        <id>http://example.com/2022/04/02/202242%20%E5%AD%97%E8%8A%82%E4%BA%8C%E9%9D%A2%E8%AE%B0%E5%BD%95/</id>
        <title>字节二面记录</title>
        <link rel="alternate" href="http://example.com/2022/04/02/202242%20%E5%AD%97%E8%8A%82%E4%BA%8C%E9%9D%A2%E8%AE%B0%E5%BD%95/"/>
        <content type="html">&lt;h1 id=&#34;202242-字节二面记录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#202242-字节二面记录&#34;&gt;#&lt;/a&gt; 2022/4/2 字节二面记录&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;啸问题：开头以为只有暑假可以实习，直接被面试官拒了，然后被同学提醒才发现开学也能实习，紧急联系回来了&lt;/p&gt;
&lt;p&gt;面试官还挺好的，居然还能继续面&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;问了些啥&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问了些啥&#34;&gt;#&lt;/a&gt; 问了些啥&lt;/h2&gt;
&lt;p&gt;最开始还是最难顶的自我介绍，感觉像是一个垃圾桶被要求介绍自己 (x), 我下次应该记住重复一下北理是个 985, 不然听起来像个野鸡大学 (&lt;/p&gt;
&lt;p&gt;和一面不同的是，这回自我介绍完了就开始做题，还问了 python 里头元组和字典的关系 (答不出来，寄)&lt;/p&gt;
&lt;p&gt;计网方面问了 http 请求一个页面的过程 (上学期刚上完这学期就忘得差不多了属于是)&lt;/p&gt;
&lt;p&gt;这回没问数据库，不知道是为啥&lt;/p&gt;
&lt;p&gt;问了对软件项目管理的理解 (?), 我就当问我管理上的看法，感觉有点答非所问&lt;/p&gt;
&lt;h2 id=&#34;哪里不行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#哪里不行&#34;&gt;#&lt;/a&gt; 哪里不行&lt;/h2&gt;
&lt;p&gt;对语言的理解比较烂，属于是只知道用不知道学&lt;/p&gt;
&lt;p&gt;计网还是得看看 http 请求的全过程&lt;/p&gt;
&lt;p&gt;其实数据库查询语句还有点欠缺，不过能用&lt;/p&gt;
</content>
        <category term="面试" scheme="http://example.com/tags/%E9%9D%A2%E8%AF%95/" />
        <updated>2022-04-02T12:01:01.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/04/02/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/</id>
        <title>更新日志</title>
        <link rel="alternate" href="http://example.com/2022/04/02/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/"/>
        <content type="html">&lt;h3 id=&#34;202242&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#202242&#34;&gt;#&lt;/a&gt; 2022/4/2&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;增加了一份面试记录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;2022316&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2022316&#34;&gt;#&lt;/a&gt; 2022/3/16&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;更新新学期内容和部分学习内容（REACT）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;2021126&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2021126&#34;&gt;#&lt;/a&gt; 2021/12/6&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;创建站&lt;/p&gt;
&lt;p&gt;链接评论服务&lt;/p&gt;
&lt;p&gt;更新域名 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL25pYW5tZWlodWFpbmlhbi5jb20=&#34;&gt;nianmeihuainian.com&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;更改主题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;2021127&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2021127&#34;&gt;#&lt;/a&gt; 2021/12/7&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;评论区恢复&lt;/p&gt;
&lt;p&gt;修改打赏图&lt;/p&gt;
&lt;p&gt;修改主题图片&lt;/p&gt;
&lt;p&gt;修复搜索功能&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="log" scheme="http://example.com/tags/log/" />
        <updated>2022-04-02T12:00:01.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/03/16/React%E5%AD%A6%E4%B9%A020220314%20SetState/</id>
        <title>React学习20220314 SetState</title>
        <link rel="alternate" href="http://example.com/2022/03/16/React%E5%AD%A6%E4%B9%A020220314%20SetState/"/>
        <content type="html">&lt;h1 id=&#34;react学习20220314-setstate&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#react学习20220314-setstate&#34;&gt;#&lt;/a&gt; React 学习 20220314 SetState&lt;/h1&gt;
&lt;h2 id=&#34;初始认知&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#初始认知&#34;&gt;#&lt;/a&gt; 初始认知&lt;/h2&gt;
&lt;p&gt;setState 之后立马访问对应 state，会发现它并没有改变，而是会在之后某个时间发生变化&lt;/p&gt;
&lt;h2 id=&#34;异步的动机和原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异步的动机和原理&#34;&gt;#&lt;/a&gt; 异步的动机和原理&lt;/h2&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zMC5sZ3N0YXRpYy5jb20vaS9pbWFnZS9NMDAvNkQvOEEvQ2lxYzFGLXVNZVNBWUs2RkFBQk4wVnducTVNODE0LnBuZw==&#34;&gt;https://s0.lgstatic.com/i/image/M00/6D/8A/Ciqc1F-uMeSAYK6FAABN0Vwnq5M814.png&lt;/span&gt;&amp;quot;alt=&amp;quot; 图片 3.png&amp;quot;data-nodeid=&amp;quot;13893&amp;quot;&amp;gt;&lt;/p&gt;
&lt;h2 id=&#34;异步避免重复rerender&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异步避免重复rerender&#34;&gt;#&lt;/a&gt; 异步避免重复 reRender&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;G:/WorkStation/JavaScriptProject/React%E5%AD%A6%E4%B9%A0/typoimg/image-20220314185248371.png&#34; alt=&#34;image-20220314185248371&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;从源码角度看异步setstate&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#从源码角度看异步setstate&#34;&gt;#&lt;/a&gt; 从源码角度看异步 setState&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;G:/WorkStation/JavaScriptProject/React%E5%AD%A6%E4%B9%A0/typoimg/image-20220314185446537.png&#34; alt=&#34;image-20220314185446537&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;再查看batchingstrategy&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#再查看batchingstrategy&#34;&gt;#&lt;/a&gt; 再查看 batchingStrategy&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;G:/WorkStation/JavaScriptProject/React%E5%AD%A6%E4%B9%A0/typoimg/image-20220314185810854.png&#34; alt=&#34;image-20220314185810854&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;理解transaction事务机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#理解transaction事务机制&#34;&gt;#&lt;/a&gt; 理解 Transaction（事务）机制&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;G:/WorkStation/JavaScriptProject/React%E5%AD%A6%E4%B9%A0/typoimg/image-20220314185913490.png&#34; alt=&#34;image-20220314185913490&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;同步现象的本质&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#同步现象的本质&#34;&gt;#&lt;/a&gt; 同步现象的本质&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;G:/WorkStation/JavaScriptProject/React%E5%AD%A6%E4%B9%A0/typoimg/image-20220314190033221.png&#34; alt=&#34;image-20220314190033221&#34; /&gt;&lt;/p&gt;
</content>
        <category term="React" scheme="http://example.com/tags/React/" />
        <updated>2022-03-16T03:48:15.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/03/16/React%E5%AD%A6%E4%B9%A020220314%20%E8%99%9A%E6%8B%9FDOM/</id>
        <title>React学习20220314 虚拟DOM</title>
        <link rel="alternate" href="http://example.com/2022/03/16/React%E5%AD%A6%E4%B9%A020220314%20%E8%99%9A%E6%8B%9FDOM/"/>
        <content type="html">&lt;h1 id=&#34;react学习20220314-虚拟dom&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#react学习20220314-虚拟dom&#34;&gt;#&lt;/a&gt; React 学习 20220314 虚拟 DOM&lt;/h1&gt;
&lt;h2 id=&#34;虚拟dom是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#虚拟dom是什么&#34;&gt;#&lt;/a&gt; 虚拟 DOM 是什么&lt;/h2&gt;
&lt;p&gt;是 JS 和 DOM 之间的一个映射缓存，在形态上表现为一个能够描述 DOM 结构及其属性信息的 JS 对象。&lt;/p&gt;
&lt;p&gt;在 REACT 中，表现为&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;G:/WorkStation/JavaScriptProject/React%E5%AD%A6%E4%B9%A0/React%E5%AD%A6%E4%B9%A020220314%20%E8%99%9A%E6%8B%9FDOM/assets/image-20220314142105501.png&#34; alt=&#34;image-20220314142105501&#34; /&gt;&lt;/p&gt;
&lt;p&gt;是 JS 对象，是对真实 DOM 的描述&lt;/p&gt;
&lt;h2 id=&#34;如何工作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何工作&#34;&gt;#&lt;/a&gt; 如何工作&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;挂载阶段：结合 JSX 的描述，构建出虚拟 DOM 树，然后通过 ReactDOM.render 实现虚拟 DOM 到真实 DOM 的映射&lt;/li&gt;
&lt;li&gt;更新阶段，页面的变化在作用于真实 DOM 之前，先作用于虚拟 DOM，虚拟 DOM 在 JS 层借助算法先对比出那些真实 DOM 需要被改变，然后将改变作用于真实 DOM&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;这一段历史讲得好有趣，摘下来&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;G:/WorkStation/JavaScriptProject/React%E5%AD%A6%E4%B9%A0/React%E5%AD%A6%E4%B9%A020220314%20%E8%99%9A%E6%8B%9FDOM/assets/image-20220314142856250.png&#34; alt=&#34;image-20220314142856250&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;G:/WorkStation/JavaScriptProject/React%E5%AD%A6%E4%B9%A0/React%E5%AD%A6%E4%B9%A020220314%20%E8%99%9A%E6%8B%9FDOM/assets/image-20220314145559439.png&#34; alt=&#34;image-20220314145559439&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;G:/WorkStation/JavaScriptProject/React%E5%AD%A6%E4%B9%A0/React%E5%AD%A6%E4%B9%A020220314%20%E8%99%9A%E6%8B%9FDOM/assets/image-20220314145616729.png&#34; alt=&#34;image-20220314145616729&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;p data-nodeid=&amp;quot;6717&amp;quot;&amp;gt; 可以看出，模板语法其实就是把 JS 和 HTML 结合在一起的一种规则，而模板引擎做的事情也非常容易理解。&amp;lt;/p&amp;gt;&lt;br /&gt;
&amp;lt;p data-nodeid=&amp;quot;6718&amp;quot;&amp;gt; 把 staff 这个数据源读进去，塞到预置好的 HTML 模板里，然后把两者融合在一起，吐出一段目标字符串给你。这段字符串的内容，其实就是一份标准的、可用于渲染的 HTML 代码，它将对应一个 DOM 元素。最后，将这个 DOM 元素挂载到页面中去，整个模板的渲染流程也就走完了。&amp;lt;/p&amp;gt;&lt;br /&gt;
&amp;lt;p data-nodeid=&amp;quot;6719&amp;quot;&amp;gt; 这个过程可以用伪代码来表示，如下所示：&amp;lt;/p&amp;gt;&lt;br /&gt;
&amp;lt;pre class=&amp;quot;lang-js&amp;quot; data-nodeid=&amp;quot;6720&amp;quot;&amp;gt;&amp;lt;code data-language=&amp;quot;js&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-comment&amp;quot;&amp;gt;// 数据和模板融合出 HTML 代码 &amp;lt;/span&amp;gt;&lt;br /&gt;
&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;var&amp;lt;/span&amp;gt; targetDOM = template({&amp;lt;span class=&amp;quot;hljs-attr&amp;quot;&amp;gt;data&amp;lt;/span&amp;gt;: students})&lt;br /&gt;
&amp;lt;span class=&amp;quot;hljs-comment&amp;quot;&amp;gt;// 添加到页面中去 &amp;lt;/span&amp;gt;&lt;br /&gt;
&amp;lt;span class=&amp;quot;hljs-built_in&amp;quot;&amp;gt;document&amp;lt;/span&amp;gt;.body.appendChild(targetDOM)&lt;br /&gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&lt;br /&gt;
&amp;lt;p data-nodeid=&amp;quot;6721&amp;quot;&amp;gt; 当然，实际的过程会比我们描述的要复杂一些。这里我补充一下模板引擎的实现思路，供感兴趣的同学参考。模板引擎一般需要做下面几件事情：&amp;lt;/p&amp;gt;&lt;br /&gt;
&amp;lt;ol data-nodeid=&amp;quot;6722&amp;quot;&amp;gt;&lt;br /&gt;
&amp;lt;li data-nodeid=&amp;quot;6723&amp;quot;&amp;gt;&lt;br /&gt;
&amp;lt;p data-nodeid=&amp;quot;6724&amp;quot;&amp;gt; 读取 HTML 模板并解析它，分离出其中的 JS 信息；&amp;lt;/p&amp;gt;&lt;br /&gt;
&amp;lt;/li&amp;gt;&lt;br /&gt;
&amp;lt;li data-nodeid=&amp;quot;6725&amp;quot;&amp;gt;&lt;br /&gt;
&amp;lt;p data-nodeid=&amp;quot;6726&amp;quot;&amp;gt; 将解析出的内容拼接成字符串，动态生成 JS 代码；&amp;lt;/p&amp;gt;&lt;br /&gt;
&amp;lt;/li&amp;gt;&lt;br /&gt;
&amp;lt;li data-nodeid=&amp;quot;6727&amp;quot;&amp;gt;&lt;br /&gt;
&amp;lt;p data-nodeid=&amp;quot;6728&amp;quot;&amp;gt; 运行动态生成的 JS 代码，吐出 “目标 HTML”；&amp;lt;/p&amp;gt;&lt;br /&gt;
&amp;lt;/li&amp;gt;&lt;br /&gt;
&amp;lt;li data-nodeid=&amp;quot;6729&amp;quot;&amp;gt;&lt;br /&gt;
&amp;lt;p data-nodeid=&amp;quot;6730&amp;quot;&amp;gt; 将 “目标 HTML” 赋值给 innerHTML，触发渲染流水线，完成真实 DOM 的渲染。&amp;lt;/p&amp;gt;&lt;br /&gt;
&amp;lt;/li&amp;gt;&lt;br /&gt;
&amp;lt;/ol&amp;gt;&lt;br /&gt;
&amp;lt;p data-nodeid=&amp;quot;6731&amp;quot;&amp;gt; 使用模板引擎方案来渲染数据是非常爽的：每次数据发生变化时，我们都不用关心到底是哪里的数据变了，也不用手动去点对点完成 DOM 的修改。只 &amp;lt; strong data-nodeid=&amp;quot;6882&amp;quot;&amp;gt; 需要关注的仅仅是数据和数据变化本身 &amp;lt;/strong&amp;gt;，DOM 层面的改变模板引擎会帮我们做掉。&amp;lt;/p&amp;gt;&lt;br /&gt;
&amp;lt;p data-nodeid=&amp;quot;6732&amp;quot;&amp;gt; 如此看来，模板引擎像极了一个只需要接收命令，就能够把活干得漂漂亮亮的 “扫地机器人”！可惜的是，模板引擎出现的契机虽然是为了使用户界面与业务数据相分离，但实际的应用场景基本局限在 “实现高效的字符串拼接” 这一个点上，因此不能指望它去做太复杂的事情。尤其令人无法接受的是，&amp;lt;strong data-nodeid=&amp;quot;6888&amp;quot;&amp;gt; 它在性能上的表现并不尽如人意 &amp;lt;/strong&amp;gt;：由于不够 “智能”，它更新 DOM 的方式是将已经渲染出 DOM 整体注销后再整体重渲染，并且不存在更新缓冲这一说。在 DOM 操作频繁的场景下，模板引擎可能会直接导致页面卡死。&amp;lt;/p&amp;gt;&lt;br /&gt;
&amp;lt;blockquote data-nodeid=&amp;quot;6733&amp;quot;&amp;gt;&lt;br /&gt;
&amp;lt;p data-nodeid=&amp;quot;6734&amp;quot;&amp;gt; 注：请注意小标题中 “早期” 这个限定词 —— 本课时所讨论的 “模板引擎” 概念，指的是虚拟 DOM 思想推而广之以前，相对原始的一类模板引擎，这类模板引擎曾经主导了一个时代。但时下来看，越来越多的模板引擎正在引入虚拟 DOM，模板引擎最终也将走向现代化。&amp;lt;/p&amp;gt;&lt;br /&gt;
&amp;lt;/blockquote&amp;gt;&lt;br /&gt;
&amp;lt;p data-nodeid=&amp;quot;6735&amp;quot;&amp;gt; 虽然指望模板引擎实现生产力解放有些天方夜谭，但模板引擎在思想上无疑具备高度的先进性：允许程序员只关心数据而不必关心 DOM 细节的这一操作，和 React 的 “数据驱动视图” 思想如出一辙，实在是高！&amp;lt;/p&amp;gt;&lt;br /&gt;
&amp;lt;h3 data-nodeid=&amp;quot;6736&amp;quot;&amp;gt; 那该怎么办呢？&amp;lt;/h3&amp;gt;&lt;br /&gt;
&amp;lt;p data-nodeid=&amp;quot;6737&amp;quot;&amp;gt;jQuery 救不了加班写 DOM 操作的前端，模板引擎也救不了，那该怎么办呢？&amp;lt;/p&amp;gt;&lt;br /&gt;
&amp;lt;p data-nodeid=&amp;quot;6738&amp;quot;&amp;gt; 这时候有一批仁人志士，兴许是从模板引擎的设计思想上得到了启发，他们明确了要走 “数据驱动视图” 这条基本道路，于是便沿着这个思路往下摸索：模板引擎的数据驱动视图方案，核心问题在于对真实 DOM 的修改过于 “大刀阔斧”，导致了 DOM 操作的范围过大、频率过高，进而可能会导致糟糕的性能。然后这帮人就想啊：既然操作真实 DOM 对性能损耗这么大，那我操作假的 DOM 不就行了？&amp;lt;/p&amp;gt;&lt;br /&gt;
&amp;lt;p data-nodeid=&amp;quot;6739&amp;quot;&amp;gt; 沿着这个思路再往下走，就有了我们都爱的虚拟 DOM。&amp;lt;/p&amp;gt;&lt;br /&gt;
&amp;lt;blockquote data-nodeid=&amp;quot;6740&amp;quot;&amp;gt;&lt;br /&gt;
&amp;lt;p data-nodeid=&amp;quot;6741&amp;quot;&amp;gt; 注：出于严谨，还是要解释下。真实历史中的虚拟 DOM 创作过程，到底有没有向模板引擎去学习，这个暂时无从考证。但是按照前端发展的过程来看，模板引擎和虚拟 DOM 确实在思想上存在递进关系，很多场景下，面试官也可能会问及两者的关系。因此在此处，我采取了这样一种表述方式，希望能够帮助你更好地把握住问题的关键所在。&amp;lt;/p&amp;gt;&lt;br /&gt;
&amp;lt;/blockquote&amp;gt;&lt;/p&gt;
&lt;p&gt;虚拟 DOM 使得之前的全局刷新，改成了有更新的部分更新，在真实 DOM 前加了一层&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;G:/WorkStation/JavaScriptProject/React%E5%AD%A6%E4%B9%A0/React%E5%AD%A6%E4%B9%A020220314%20%E8%99%9A%E6%8B%9FDOM/assets/image-20220314151706530.png&#34; alt=&#34;image-20220314151706530&#34; /&gt;&lt;/p&gt;
&lt;p&gt;虚拟 DOM 解决的问题重心不是性能&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;G:/WorkStation/JavaScriptProject/React%E5%AD%A6%E4%B9%A0/React%E5%AD%A6%E4%B9%A020220314%20%E8%99%9A%E6%8B%9FDOM/assets/image-20220314151854443.png&#34; alt=&#34;image-20220314151854443&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;reconciliation过程与diff算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reconciliation过程与diff算法&#34;&gt;#&lt;/a&gt; Reconciliation 过程与 Diff 算法&lt;/h1&gt;
&lt;h2 id=&#34;diff算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#diff算法&#34;&gt;#&lt;/a&gt; Diff 算法&lt;/h2&gt;
&lt;p&gt;找两个树结构之间的不同&lt;/p&gt;
&lt;h3 id=&#34;两个规律&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#两个规律&#34;&gt;#&lt;/a&gt; 两个规律&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;G:/WorkStation/JavaScriptProject/React%E5%AD%A6%E4%B9%A0/React%E5%AD%A6%E4%B9%A020220314%20%E8%99%9A%E6%8B%9FDOM/assets/image-20220314152249841.png&#34; alt=&#34;image-20220314152249841&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;G:/WorkStation/JavaScriptProject/React%E5%AD%A6%E4%B9%A0/React%E5%AD%A6%E4%B9%A020220314%20%E8%99%9A%E6%8B%9FDOM/assets/image-20220314153544145.png&#34; alt=&#34;image-20220314153544145&#34; /&gt;&lt;/p&gt;
&lt;p&gt;对于 Key，下图可以比较好地展示使用了 Key 后的更新策略&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;G:/WorkStation/JavaScriptProject/React%E5%AD%A6%E4%B9%A0/React%E5%AD%A6%E4%B9%A020220314%20%E8%99%9A%E6%8B%9FDOM/assets/image-20220314153745501.png&#34; alt=&#34;image-20220314153745501&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如果不使用 key，则仅有 AB 可保留，其他均被重建&lt;/p&gt;
</content>
        <category term="React" scheme="http://example.com/tags/React/" />
        <updated>2022-03-16T03:48:15.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/03/13/React%E5%AD%A6%E4%B9%A020220313%20Hook/</id>
        <title>React学习20220313 Hook</title>
        <link rel="alternate" href="http://example.com/2022/03/13/React%E5%AD%A6%E4%B9%A020220313%20Hook/"/>
        <content type="html">&lt;h1 id=&#34;react学习20220313-hook&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#react学习20220313-hook&#34;&gt;#&lt;/a&gt; React 学习 20220313 Hook&lt;/h1&gt;
&lt;h2 id=&#34;理解hook&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#理解hook&#34;&gt;#&lt;/a&gt; 理解 Hook&lt;/h2&gt;
&lt;p&gt;按我的理解，Hook 是对繁琐，学习曲线长，难以更改中间步骤的类的拆分，使得函数可以拥有一些类能够使用的功能：如 state 和生命周期等，而且 Hook 所辅助的函数式编程比较符合 React 所推崇的组件化编程。&lt;/p&gt;
&lt;h2 id=&#34;对usestate的理解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对usestate的理解&#34;&gt;#&lt;/a&gt; 对 useState 的理解&lt;/h2&gt;
&lt;p&gt;充当函数中的 state，但一次只有一个，不像类中一次指定多个&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[text,setText] =useState (‘初始文字’)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;useState 返回一个数组，数组第一个是想要的 state 变量，第二个是修改变量的 Api&lt;/p&gt;
&lt;h2 id=&#34;对useeffect的理解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对useeffect的理解&#34;&gt;#&lt;/a&gt; 对 useEffect 的理解&lt;/h2&gt;
&lt;p&gt;弥补生命周期&lt;/p&gt;
&lt;p&gt;接收两个参数：回调函数和依赖数组&lt;/p&gt;
&lt;p&gt;useEffect(callBack,[])&lt;/p&gt;
&lt;p&gt;调用规则：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每次渲染后：传入回调函数，不传依赖数组：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;useEffect(callBack)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;挂载阶段执行一次后不再执行：传入回调函数，且此函数的返回值不是函数，同时传入空数组。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;useEffect (()=&amp;gt;{/* 业务逻辑 */},[])&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;仅在挂载和卸载阶段执行的：传入回调函数，且此函数的返回值是一个函数&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;useEffect&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 业务逻辑&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 返回一个函数记为 B&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;每次渲染都触发，且卸载阶段也会被触发的：传入回调函数，且这个函数的返回值是一个函数，同时不传第二个参数&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;useEffect&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;//A 的业务逻辑&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 返回一个函数记为 B&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面这段代码在每次渲染都触发 A 逻辑，并在卸载阶段触发 B 逻辑&lt;/p&gt;
&lt;p&gt;按我的理解，在前面一半写个函数会在渲染阶段一直触发，单纯写一段逻辑就会在挂载阶段触发，在 return 那写个函数就会在卸载的时候触发&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;G:/WorkStation/JavaScriptProject/React%E5%AD%A6%E4%B9%A0/React%E5%AD%A6%E4%B9%A020220313%20Hook/assets/image-20220313160121838.png&#34; alt=&#34;image-20220313160121838&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;不要在循环条件或嵌套函数中调用hook&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不要在循环条件或嵌套函数中调用hook&#34;&gt;#&lt;/a&gt; 不要在循环，条件或嵌套函数中调用 Hook&lt;/h2&gt;
&lt;h3 id=&#34;首次渲染过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#首次渲染过程&#34;&gt;#&lt;/a&gt; 首次渲染过程&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;G:/WorkStation/JavaScriptProject/React%E5%AD%A6%E4%B9%A0/React%E5%AD%A6%E4%B9%A020220313%20Hook/assets/image-20220314135945234.png&#34; alt=&#34;image-20220314135945234&#34; /&gt;&lt;/p&gt;
&lt;p&gt;hook 相关的所有信息收敛在一个 hook 对象粒，而 hook 对象之间以单向链表的形式相互串联，&lt;/p&gt;
&lt;h3 id=&#34;更新过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#更新过程&#34;&gt;#&lt;/a&gt; 更新过程&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;G:/WorkStation/JavaScriptProject/React%E5%AD%A6%E4%B9%A0/React%E5%AD%A6%E4%B9%A020220313%20Hook/assets/image-20220314140737526.png&#34; alt=&#34;image-20220314140737526&#34; /&gt;&lt;/p&gt;
&lt;p&gt;因此，hooks 的渲染是通过 “依次遍历”（也就是说，它只会管这回需要前进几个 next，而不会对对应位置的真实性进行判断）来定位每个 hooks 的内容的，如果前后两次读到的链表顺序出现差异，那么渲染的结果自然是不可控的。&lt;/p&gt;
</content>
        <category term="React" scheme="http://example.com/tags/React/" />
        <updated>2022-03-13T03:48:15.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/03/12/React%E5%AD%A6%E4%B9%A020220312/</id>
        <title>React学习20220312 生命周期</title>
        <link rel="alternate" href="http://example.com/2022/03/12/React%E5%AD%A6%E4%B9%A020220312/"/>
        <content type="html">&lt;h1 id=&#34;react学习20220312&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#react学习20220312&#34;&gt;#&lt;/a&gt; React 学习 20220312&lt;/h1&gt;
&lt;h2 id=&#34;createelement函数拆解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#createelement函数拆解&#34;&gt;#&lt;/a&gt; CreateElement 函数拆解&lt;/h2&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20220312150556893.png&amp;quot; alt=&amp;quot;image-20220312150556893&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20220312150653145.png&amp;quot; alt=&amp;quot;image-20220312150653145&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20220312150814067.png&amp;quot; alt=&amp;quot;image-20220312150814067&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20220312150922420.png&amp;quot; alt=&amp;quot;image-20220312150922420&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;h2 id=&#34;生命周期&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#生命周期&#34;&gt;#&lt;/a&gt; 生命周期&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220312151139289.png&#34; alt=&#34;image-20220312151139289&#34; /&gt;&lt;/p&gt;
&lt;p&gt;React16&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220312152345970.png&#34; alt=&#34;image-20220312152345970&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;挂载过程&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20220312152839851.png&amp;quot; alt=&amp;quot;image-20220312152839851&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;getDerivedFromProps 的功能：使用 props 来派生 / 更新 state&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是针对某个属性的定向更新&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更新过程&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20220312153339553.png&amp;quot; alt=&amp;quot;image-20220312153339553&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;getSnapshotBeforeUpdate:&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20220312154540844.png&amp;quot; alt=&amp;quot;image-20220312154540844&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20220312154512940.png&amp;quot; alt=&amp;quot;image-20220312154512940&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;React16 引入的 Fiber 架构&lt;/p&gt;
&lt;p&gt;之前组件更新：树状递归更新，同步更新，占用主线程，易卡死&lt;/p&gt;
&lt;p&gt;Fiber 会把大任务转为小任务，使得渲染线程可打断&lt;/p&gt;
&lt;p&gt;重要特征&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可以被 &amp;lt;u&amp;gt; 打断 &amp;lt;/u &amp;gt; 的异步渲染模式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;react 将渲染过程分为 render 和 commit 两个过程&lt;/p&gt;
&lt;p&gt;render 可被打断&lt;/p&gt;
&lt;p&gt;commit 同步执行&lt;/p&gt;
&lt;p&gt;因为 commit 会改视图，因此不可打断&lt;/p&gt;
&lt;h2 id=&#34;数据的流动&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据的流动&#34;&gt;#&lt;/a&gt; 数据的流动&lt;/h2&gt;
&lt;p&gt;基于 props 的单向数据流：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当前组件的 state 以 props 的形式流动时，只能流向组件树中比自己层级更低的组件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;父子组件通信&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;父组件把 this.props 传入子组件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;子父组件通信&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;父组件向子组件传递一个绑定了自身上下文的函数&lt;/p&gt;
&lt;p&gt;子组件在调用该函数时，&lt;/p&gt;
&lt;p&gt;就可以把想要交给父组件的数据以函数入参的形式传入&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20220312163654393.png&amp;quot; alt=&amp;quot;image-20220312163654393&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20220312163734257.png&amp;quot; alt=&amp;quot;image-20220312163734257&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20220312163752751.png&amp;quot; alt=&amp;quot;image-20220312163752751&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
</content>
        <category term="React" scheme="http://example.com/tags/React/" />
        <updated>2022-03-12T03:48:15.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/03/11/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95/</id>
        <title>黑盒测试</title>
        <link rel="alternate" href="http://example.com/2022/03/11/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95/"/>
        <content type="html">&lt;p&gt;测试用例选择&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为每一个等价类规定一个唯一编号；&lt;/li&gt;
&lt;li&gt;设计一个新的测试用例，使其尽可能多地覆盖 尚未被覆盖的有效等价类，重复这一步，直到 所有的有效等价类都被覆盖为止；&lt;/li&gt;
&lt;li&gt;设计一个新的测试用例，使其仅覆盖一个尚未 被覆盖的无效等价类，重复这一步，直到所有 的无效等价类都被覆盖为止&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220309134921110.png&#34; alt=&#34;image-20220309134921110&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分类&#34;&gt;#&lt;/a&gt; 分类&lt;/h4&gt;
&lt;h4 id=&#34;是否是三角形的三条边&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#是否是三角形的三条边&#34;&gt;#&lt;/a&gt; 是否是三角形的三条边&lt;/h4&gt;
&lt;h6 id=&#34;等价类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#等价类&#34;&gt;#&lt;/a&gt; 等价类&lt;/h6&gt;
&lt;p&gt;A&amp;gt;0&lt;/p&gt;
&lt;p&gt;B&amp;gt;0&lt;/p&gt;
&lt;p&gt;c&amp;gt;0&lt;/p&gt;
&lt;p&gt;A+B&amp;gt;C&lt;/p&gt;
&lt;p&gt;B+C&amp;gt;A&lt;/p&gt;
&lt;p&gt;A+C&amp;gt;B&lt;/p&gt;
&lt;h5 id=&#34;非等价类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#非等价类&#34;&gt;#&lt;/a&gt; 非等价类&lt;/h5&gt;
&lt;p&gt;A&amp;lt;=0&lt;/p&gt;
&lt;p&gt;B&amp;lt;=0&lt;/p&gt;
&lt;p&gt;C&amp;lt;=0&lt;/p&gt;
&lt;p&gt;A+B&amp;lt;=C&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;h4 id=&#34;是否等腰&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#是否等腰&#34;&gt;#&lt;/a&gt; 是否等腰&lt;/h4&gt;
&lt;h5 id=&#34;等价类-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#等价类-2&#34;&gt;#&lt;/a&gt; 等价类&lt;/h5&gt;
&lt;p&gt;A=B&lt;/p&gt;
&lt;p&gt;B=C&lt;/p&gt;
&lt;p&gt;C=A&lt;/p&gt;
&lt;h5 id=&#34;非等价类-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#非等价类-2&#34;&gt;#&lt;/a&gt; 非等价类&lt;/h5&gt;
&lt;p&gt;A!=B！=C&lt;/p&gt;
&lt;h5 id=&#34;是否等边&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#是否等边&#34;&gt;#&lt;/a&gt; 是否等边&lt;/h5&gt;
&lt;h5 id=&#34;等价类-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#等价类-3&#34;&gt;#&lt;/a&gt; 等价类&lt;/h5&gt;
&lt;p&gt;A=B=C&lt;/p&gt;
&lt;h5 id=&#34;非等价类-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#非等价类-3&#34;&gt;#&lt;/a&gt; 非等价类&lt;/h5&gt;
&lt;p&gt;A!=B&lt;/p&gt;
&lt;p&gt;B!=C&lt;/p&gt;
&lt;p&gt;C!=A&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;边界值分析法单缺陷假设&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#边界值分析法单缺陷假设&#34;&gt;#&lt;/a&gt; 边界值分析法（单缺陷假设）&lt;/h3&gt;
&lt;p&gt;比最大值稍微小一点，比最小值稍微大一点&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220309140314690.png&#34; alt=&#34;image-20220309140314690&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;健壮性测试：（再多两个点）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比最大值稍微大一点，比最小值稍微小一点&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220309140305899.png&#34; alt=&#34;image-20220309140305899&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最坏情况测试：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;多变量取极值的情况&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220309140255646.png&#34; alt=&#34;image-20220309140255646&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;健壮最坏情况测试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最坏情况取超边界情况&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220309140405550.png&#34; alt=&#34;image-20220309140405550&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;错误推测法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#错误推测法&#34;&gt;#&lt;/a&gt; 错误推测法&lt;/h3&gt;
&lt;p&gt;根据经验推测&lt;/p&gt;
&lt;p&gt;简单有效，但系统性差，是其他的补充&lt;/p&gt;
&lt;h3 id=&#34;判定表法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#判定表法&#34;&gt;#&lt;/a&gt; 判定表法&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;判定表是一种用来表示和分析复杂逻辑关系的工具，最适 合描述在多个逻辑条件取值的组合所构成的复杂情况下， 分别要执行哪些不同的动作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;条件桩（Condition Stub）：列出了问题的所有条件。通常认为列出的条件的次序无关紧要。&lt;/p&gt;
&lt;p&gt;动作桩（Action Stub）：列出了问题规定可能采取的操作。这些操作的排列顺序没有约束。&lt;/p&gt;
&lt;p&gt;条件项（Condition Entry）：列出针对它所列条件的取值，在所有可能情况下的真假值。&lt;/p&gt;
&lt;p&gt;动作项（Action Entry）：列出在条件项的各种取值情况下应该采取的动作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“…… 对于功率大于 50 马力的机器，并且维修记录不全或已运行 10 年以上的机器，应给予优先的维修处理……&lt;/p&gt;
&lt;p&gt;（1）列出所有的条件桩和动作桩&lt;/p&gt;
&lt;p&gt;– 条件桩 C1：功率大于 50 马力吗？ C2：维修记录不全吗？ C3：运行超过 10 年吗？&lt;/p&gt;
&lt;p&gt;– 动作桩 A1：进行优先处理 A2：做其他处理&lt;/p&gt;
&lt;p&gt;（2）确定规则个数&lt;/p&gt;
&lt;p&gt;– 输入条件个数：3&lt;/p&gt;
&lt;p&gt;– 每个条件的取值：“是” 或 “否”&lt;/p&gt;
&lt;p&gt;– 规则个数：2&lt;em&gt;2&lt;/em&gt;2 =8&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220309143736908.png&#34; alt=&#34;image-20220309143736908&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220309143751694.png&#34; alt=&#34;image-20220309143751694&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;因果图法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从用自然语言书写的程序规格说明 的描述中找出因（输入条件）和果（输出或程序状态的改 变），通过因果图转换为判定表&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;基本步骤&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;分析软件规格说明描述中，哪些是原因（即输入条件或输入 条件的等价类），哪些是结果（即输出条件），并给每个原因和 结果赋予一个标识符。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分析软件规格说明描述中的语义，找出原因与结果之间，原 因与原因之间对应的关系，根据这些关系，画出因果图&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;由于语法或环境限制，有些原因与原因之间，结果与结果之 间的组合情况不可能出现。为表明这些特殊情况，在因果图上用 一些记号标明约束或限制条件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把因果图转换成判定表。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把判定表的每一列拿出来作为依据，设计测试用例&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;图形符号&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220311152714975.png&#34; alt=&#34;image-20220311152714975&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2022/03/11/2Izxij3sJbMwBCX.png&#34; alt=&#34;image-20220311152824009&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
</content>
        <category term="软件质量与评测技术" scheme="http://example.com/tags/%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E8%AF%84%E6%B5%8B%E6%8A%80%E6%9C%AF/" />
        <updated>2022-03-11T01:48:15.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/03/09/%E7%99%BD%E7%9B%92%E6%B5%8B%E8%AF%95/</id>
        <title>白盒测试</title>
        <link rel="alternate" href="http://example.com/2022/03/09/%E7%99%BD%E7%9B%92%E6%B5%8B%E8%AF%95/"/>
        <content type="html">&lt;h1 id=&#34;白盒测试&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#白盒测试&#34;&gt;#&lt;/a&gt; 白盒测试&lt;/h1&gt;
&lt;h2 id=&#34;定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定义&#34;&gt;#&lt;/a&gt; 定义&lt;/h2&gt;
&lt;p&gt;知道内部工作过程，可通过测试内部动作来测试&lt;/p&gt;
&lt;h3 id=&#34;目标&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#目标&#34;&gt;#&lt;/a&gt; 目标&lt;/h3&gt;
&lt;p&gt;通过测试来检测软件产品内部动作是否按照规格说明书的规定正常执行&lt;/p&gt;
&lt;h3 id=&#34;重点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#重点&#34;&gt;#&lt;/a&gt; 重点&lt;/h3&gt;
&lt;p&gt;看软件内部各条通路是否按照规定工作&lt;/p&gt;
&lt;h3 id=&#34;特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特点&#34;&gt;#&lt;/a&gt; 特点&lt;/h3&gt;
&lt;p&gt;黑盒可能存在负负得正的情况，而白盒不会&lt;/p&gt;
&lt;p&gt;白盒能发现一些隐患：如内存泄漏，误差累积等&lt;/p&gt;
&lt;h2 id=&#34;作用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作用&#34;&gt;#&lt;/a&gt; 作用&lt;/h2&gt;
&lt;h3 id=&#34;主要想对程序模块进行如下的检查&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主要想对程序模块进行如下的检查&#34;&gt;#&lt;/a&gt; 主要想对程序模块进行如下的检查&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;对所有独立测试路径至少测试一次&lt;/p&gt;
&lt;p&gt;对所有的逻辑判定，取真 / 假的两种至少测试一次&lt;/p&gt;
&lt;p&gt;在循环的边界和运行界限内执行循环体&lt;/p&gt;
&lt;p&gt;测试内部数据结构的有效性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;局限&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#局限&#34;&gt;#&lt;/a&gt; 局限&lt;/h3&gt;
&lt;p&gt;一个具有多重选择和循环嵌套的程序，不同的路径数目可能是天文数字。&lt;/p&gt;
&lt;h2 id=&#34;比较&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#比较&#34;&gt;#&lt;/a&gt; 比较&lt;/h2&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20220311162005086.png&amp;quot; alt=&amp;quot;image-20220311162005086&amp;quot; style=&amp;quot;zoom: 50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;h2 id=&#34;如何安排白盒测试&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何安排白盒测试&#34;&gt;#&lt;/a&gt; 如何安排白盒测试&lt;/h2&gt;
&lt;h3 id=&#34;单元测试&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#单元测试&#34;&gt;#&lt;/a&gt; 单元测试&lt;/h3&gt;
&lt;h3 id=&#34;集成测试&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集成测试&#34;&gt;#&lt;/a&gt; 集成测试&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;集成阶段，依据概要设计说明书&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;静态结构分析&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;代码质量度量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;功能确认与接口分析&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;覆盖率分析&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;性能分析&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内存分析&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;系统测试&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#系统测试&#34;&gt;#&lt;/a&gt; 系统测试&lt;/h3&gt;
&lt;p&gt;到这步已经很少做白盒测试了&lt;/p&gt;
&lt;h3 id=&#34;验收测试&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#验收测试&#34;&gt;#&lt;/a&gt; 验收测试&lt;/h3&gt;
&lt;h3 id=&#34;白盒测试综合策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#白盒测试综合策略&#34;&gt;#&lt;/a&gt; 白盒测试综合策略&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在测试中，应尽量先用工具进行静态结构分析。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测试中可采取先静态后动态的组合方式：先进行静态结构分析、代码检查和静态质量度量，再进行覆盖率测试。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用静态分析的结果作为引导，通过代码检查和动态测试的方式对静态结构分析结果进行进一步的确认，使测试工作更为有效&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;覆盖率测试是白盒测试的重点，一般可使用基本路径测试 法达到语句覆盖标准；对于软件的重点模块，应使用多种覆盖标准衡量代码的覆盖率。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在不同的测试阶段，测试的侧重点不同：在单元测试阶段 ，以代码检查、逻辑覆盖为主；在集成测试阶段，需要增加静态结构分析、静态质量度量；在系统测试阶段，应根据黑盒测试的结果，采取相应的白盒测试&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;白盒测试用例设计技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#白盒测试用例设计技术&#34;&gt;#&lt;/a&gt; 白盒测试用例设计技术&lt;/h2&gt;
&lt;h3 id=&#34;静态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#静态&#34;&gt;#&lt;/a&gt; 静态&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;代码检查（人工＋工具）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;静态结构分析（主要由软件工具自动进行）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;软件质量度量（主要由软件工具自动进行&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;动态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#动态&#34;&gt;#&lt;/a&gt; 动态&lt;/h3&gt;
</content>
        <category term="软件质量与评测技术" scheme="http://example.com/tags/%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B8%8E%E8%AF%84%E6%B5%8B%E6%8A%80%E6%9C%AF/" />
        <updated>2022-03-09T01:48:15.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/12/19/2021-12-19-MC%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%BE%E7%BD%AE/</id>
        <title>MC服务器设置</title>
        <link rel="alternate" href="http://example.com/2021/12/19/2021-12-19-MC%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%BE%E7%BD%AE/"/>
        <content type="html">&lt;h1 id=&#34;mc服务器设置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mc服务器设置&#34;&gt;#&lt;/a&gt; MC 服务器设置&lt;/h1&gt;
&lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;今天心血来潮搞了个 mc 服务器，下面记录一下过程&lt;/p&gt;
&lt;h2 id=&#34;基础配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基础配置&#34;&gt;#&lt;/a&gt; 基础配置&lt;/h2&gt;
&lt;p&gt;服务器系统：Debian (我也不知道是什么版本，反正是 vultur 上买的)&lt;/p&gt;
&lt;p&gt;java 版本:openjdk8 具体下载过程在后面有说&lt;/p&gt;
&lt;p&gt;之后参考教程&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9taW5lY3JhZnQuZmFuZG9tLmNvbS96aC93aWtpLyVFNiU5NSU5OSVFNyVBOCU4Qi8lRTYlOUUlQjYlRTglQUUlQkUlRTYlOUMlOEQlRTUlOEElQTElRTUlOTklQTgjRGViaWFuLkUzLjgwLjgxVWJ1bnR1LkU1LjkyLjhDUmFzcGJpYW4=&#34;&gt;教程 / 架设服务器 - Minecraft Wiki，最详细的我的世界百科 (fandom.com)&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;java下载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#java下载&#34;&gt;#&lt;/a&gt; java 下载&lt;/h2&gt;
&lt;p&gt;参考: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubXlmcmVheC5jb20vaW5zdGFsbC1qYXZhLW9uLWRlYmlhbi0xMC8=&#34;&gt;如何在 Debian 10 Linux 上安装 Java (myfreax.com)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;执行以下代码即可&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt&lt;/span&gt; update&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; apt-transport-https ca-certificates &lt;span class=&#34;token function&#34;&gt;wget&lt;/span&gt; dirmngr gnupg software-properties-com&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;wget&lt;/span&gt; -qO - https://adoptopenjdk.jfrog.io/adoptopenjdk/api/gpg/key/public &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; apt-key &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt; -&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; add-apt-repository --yes https://adoptopenjdk.jfrog.io/adoptopenjdk/deb/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt&lt;/span&gt; update&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; adoptopenjdk-8-hotspot&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;最后看看是否真的安装了&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;java -version&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;预计输出如下&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;openjdk version &lt;span class=&#34;token string&#34;&gt;&#34;1.8.0_212&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;OpenJDK Runtime Environment &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;AdoptOpenJDK&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;build &lt;span class=&#34;token number&#34;&gt;1.8&lt;/span&gt;.0_212-b04&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;OpenJDK &lt;span class=&#34;token number&#34;&gt;64&lt;/span&gt;-Bit Server VM &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;AdoptOpenJDK&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;build &lt;span class=&#34;token number&#34;&gt;25.212&lt;/span&gt;-b04, mixed mode&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;服务器配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#服务器配置&#34;&gt;#&lt;/a&gt; 服务器配置&lt;/h2&gt;
&lt;p&gt;基础代码仓我直接用了已有的 github 仓库 (不想自己搞了)&lt;/p&gt;
&lt;p&gt;直接在 Linux 命令行下输入这些就行&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;wget&lt;/span&gt; https://github.com/silvertriclops/MCSLI/archive/master.zip&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;unzip&lt;/span&gt; master.zip&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; MCSLI-master &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;chmod&lt;/span&gt; +x install.sh&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;chmod&lt;/span&gt; +x start.sh&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;./install.sh &lt;span class=&#34;token comment&#34;&gt;# tells the computer where Java is so it knows how to start Minecraft&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;./start.sh &lt;span class=&#34;token comment&#34;&gt;# starts the Minecraft server. You may want to run this command inside screen.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;理论上来说，这样就已经可以用了&lt;/p&gt;
&lt;p&gt;输入 stop 退出&lt;/p&gt;
&lt;h3 id=&#34;开放tcp端口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#开放tcp端口&#34;&gt;#&lt;/a&gt; 开放 tcp 端口&lt;/h3&gt;
&lt;p&gt;因为是服务器，需要和客户端交互，一个 tcp 端口是必不可少的&lt;/p&gt;
&lt;p&gt;一般来说，根据上面创建的服务器，默认使用的是 25565 (启动的时候中间有一行会提示的)&lt;/p&gt;
&lt;p&gt;就像下面这样&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/19/m8LxWjMp3DFeXkA.png&#34; alt=&#34;image-20211219204134588&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后输入下面代码就能开放对应端口 (不过我也不知道开了到底会有什么坏影响，服务器做好备份？)&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; iptables -A INPUT -p tcp --dport &lt;span class=&#34;token number&#34;&gt;25565&lt;/span&gt; --jump ACCEPT&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;iptables-save&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;换成我想要的版本112&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#换成我想要的版本112&#34;&gt;#&lt;/a&gt; 换成我想要的版本 (1.12)&lt;/h2&gt;
&lt;p&gt;不过这个仓库七年前就停止更新了，里面的服务器版本为 1.8 版本&lt;/p&gt;
&lt;p&gt;想更新成自己的版本需要去 MC 官网下，就几十 mb 很小，下载好对应版本后&lt;/p&gt;
&lt;p&gt;回到之前的文件夹 (MCSLI-master)&lt;/p&gt;
&lt;p&gt;把对应版本的文件放进来&lt;/p&gt;
&lt;p&gt;如果不知道怎么把文件传给服务器，看下面&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我用的 Xshell 连接服务器，这时候可以下载 xftp, 用于文件传输，图形化界面，用了都说好&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;之后更改配置 (MCSLI-master/start.sh)&lt;/p&gt;
&lt;p&gt;里面能看到写了一行启动代码，把它里面对应服务器 jar 包的那部分换成你的 jar 包 (相对位置绝对位置都可以)&lt;/p&gt;
&lt;p&gt;看看能不能用&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;./start.sh&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;只要不报错就算成功&lt;/p&gt;
&lt;h2 id=&#34;加装mod&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#加装mod&#34;&gt;#&lt;/a&gt; 加装 mod&lt;/h2&gt;
&lt;p&gt;mod 是 mc 的灵魂，不打 mod 我不认可 (实际就是我菜)&lt;/p&gt;
&lt;p&gt;这时候需要下载 forge&lt;/p&gt;
&lt;p&gt;打开 forge 的官网&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9maWxlcy5taW5lY3JhZnRmb3JnZS5uZXQvbmV0L21pbmVjcmFmdGZvcmdlL2ZvcmdlL2luZGV4XzEuMTIuaHRtbA==&#34;&gt;Downloads for Minecraft Forge for Minecraft 1.12&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;下载对应的版本，我是 1.12 就下载了 1.12&lt;/p&gt;
&lt;p&gt;放到和刚才文件同一级目录下&lt;/p&gt;
&lt;p&gt;执行&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;java -jar forge-1.12-14.21.1.2443-installer.jar --install&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这时候你使用 ls 看看文件夹下，可以看到有类似&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/19/4iMHgdhOJsvQR9V.png&#34; alt=&#34;image-20211219203443648&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这种东西出现&lt;/p&gt;
&lt;p&gt;那么你的 forge 安装已经成功了一半了&lt;/p&gt;
&lt;p&gt;之后打开你该死的本地 MC (加装了对应版本 forge 的那种)&lt;/p&gt;
&lt;p&gt;把.minecraft 下的 resources 文件夹，整个给复制到服务器里头去 (还是刚才那个文件目录)&lt;/p&gt;
&lt;p&gt;之后执行&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;./start.sh&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;最后能看到这些信息就算成功&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/19/1QMTqoABd5gaxeF.png&#34; alt=&#34;image-20211219203701426&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;享受服务器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#享受服务器&#34;&gt;#&lt;/a&gt; 享受服务器&lt;/h2&gt;
&lt;p&gt;打开你的本地 MC, 输入服务器 ip, 连接后进入就行&lt;/p&gt;
&lt;h2 id=&#34;啸贴士&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#啸贴士&#34;&gt;#&lt;/a&gt; 啸贴士&lt;/h2&gt;
&lt;p&gt;如果你一不小心做错了，或许可以评论，我期末摸鱼的时候可能会来评论一下&lt;/p&gt;
</content>
        <category term="MC" scheme="http://example.com/tags/MC/" />
        <updated>2021-12-19T12:43:23.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/12/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0/</id>
        <title>计算机网络复习</title>
        <link rel="alternate" href="http://example.com/2021/12/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0/"/>
        <content type="html">&lt;h1 id=&#34;计网复习&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计网复习&#34;&gt;#&lt;/a&gt; 计网复习&lt;/h1&gt;
&lt;h2 id=&#34;大纲&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#大纲&#34;&gt;#&lt;/a&gt; 大纲&lt;/h2&gt;
&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&#34;1-计算机网络体系结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-计算机网络体系结构&#34;&gt;#&lt;/a&gt; 1. 计算机网络体系结构&lt;/h2&gt;
&lt;h3 id=&#34;11-计算机网络概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-计算机网络概述&#34;&gt;#&lt;/a&gt; 1.1  计算机网络概述&lt;/h3&gt;
&lt;h4 id=&#34;111计算机网络的概念-组成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#111计算机网络的概念-组成&#34;&gt;#&lt;/a&gt; 1.1.1 计算机网络的概念、组成&lt;/h4&gt;
&lt;p&gt;概念&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;计算机网络就是通过交换机，路由器等网络设备和通信线路将分散在不同地理位置的多个计算机系统连接起来，在网络协议和应用软件的控制下实现各种网络服务的系统.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;资源共享 - 最终目的&lt;/li&gt;
&lt;li&gt;数据通信 - 资源共享的前提&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;网络的结构&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;网络边缘 (network edge)- 服务端和客户端&lt;/p&gt;
&lt;ul 传输速率=&#34;&#34;&gt;
&lt;li&gt;
&lt;p&gt;服务端功能：发送分组数据&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;收到应用数据 -&amp;gt; 拆解为小组块 -&amp;gt; 以 R 传输速率 (带宽 bandwidth) 进行传输&lt;/p&gt;
&lt;p&gt;传输延迟L_{比特数}/R_&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接入网络 (access networks)- 物理介质&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;物理层：发送端和接收端之间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;导引型介质 (guided media)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;固体介质 - 铜线，光纤 (optical fiber), 同轴电缆 (coaxial cable)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;双绞线：螺旋排列减小电磁干扰&lt;/p&gt;
&lt;p&gt;同轴电缆：单信道 / 多信道&lt;/p&gt;
&lt;p&gt;光纤：光脉冲，低差错率，无电磁干扰&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非导引型介质 (unguided media)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自由发信号&lt;/li&gt;
&lt;li&gt;e.g. 无线电&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网络核心 (network core)- 互联的路由器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;路由器网络&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分组交换&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;主机把报文分解成分组&lt;/p&gt;
&lt;p&gt;网络核心转发分组 (从源头到目的)-&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;单个分组传输到相邻节点，存储下来后查转发表，转发到下一节点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;112计算机网络的分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#112计算机网络的分类&#34;&gt;#&lt;/a&gt; 1.1.2 计算机网络的分类&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Transmission technology 传输技术&lt;br /&gt;
广播链路&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/10/NuIQEO7LD1os5cP.png&#34; alt=&#34;image-20211210103557833&#34; /&gt; 点到点链路&lt;br /&gt;
&lt;img data-src=&#34;https://s2.loli.net/2021/12/10/sZGIdi3TYz1kU8j.png&#34; alt=&#34;image-20211210103606005&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Scale 距离尺度&lt;br /&gt;
局域网 LAN 10~1km&lt;br /&gt;
 城域网 MAN 1km~10km&lt;br /&gt;
 广域网 WAN 100km~&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Topology 拓扑结构&lt;br /&gt;
星形什么的，看名字就知道了&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Switching 交换
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Packet Switching 分组交换&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Circuit Switching 电路交换&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;113计算机网络与互联网的发展历史不考&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#113计算机网络与互联网的发展历史不考&#34;&gt;#&lt;/a&gt; 1.1.3 计算机网络与互联网的发展历史 [不考]&lt;/h4&gt;
&lt;p&gt;1961-1972: Early packet-switching principles 分组交换的发展&lt;/p&gt;
&lt;p&gt;1972-1980: Internetworking, new and proprietary nets 网络互联。专用网络&lt;br /&gt;
 1980-1990: new protocols, a proliferation of networks 网络的激增&lt;br /&gt;
 1990, 2000’s: commercialization, the Web, new apps 商业化&lt;/p&gt;
&lt;p&gt;2005-present&lt;/p&gt;
&lt;h4 id=&#34;114计算机网络的标准化工作及相关组织不考&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#114计算机网络的标准化工作及相关组织不考&#34;&gt;#&lt;/a&gt; 1.1.4 计算机网络的标准化工作及相关组织 [不考]&lt;/h4&gt;
&lt;p&gt;IETF (因特网工程任务组)&lt;/p&gt;
&lt;p&gt;IEEE802 - 局域网 / 城域网标准委员会，指定相关标准&lt;/p&gt;
&lt;h3 id=&#34;12计算机网络体系结构与参考模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12计算机网络体系结构与参考模型&#34;&gt;#&lt;/a&gt; 1.2 计算机网络体系结构与参考模型&lt;/h3&gt;
&lt;h4 id=&#34;121计算机网络分层结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#121计算机网络分层结构&#34;&gt;#&lt;/a&gt; 1.2.1 计算机网络分层结构&lt;/h4&gt;
&lt;h4 id=&#34;122计算机网络协议-接口-服务等概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#122计算机网络协议-接口-服务等概念&#34;&gt;#&lt;/a&gt; 1.2.2 计算机网络协议、接口、服务等概念&lt;/h4&gt;
&lt;p&gt;服务：层的功能&lt;/p&gt;
&lt;p&gt;协议：同一层的对等实体间的交流服务&lt;/p&gt;
&lt;p&gt;接口：告诉上层如何访问&lt;/p&gt;
&lt;h4 id=&#34;123isoosi参考模型和tcpip模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#123isoosi参考模型和tcpip模型&#34;&gt;#&lt;/a&gt; 1.2.3ISO/OSI 参考模型和 TCP/IP 模型&lt;/h4&gt;
&lt;p&gt;ISO/OSI 参考模型&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ISO: international Standards Organization&lt;/p&gt;
&lt;p&gt;OSI: Open Systems Interconnection&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;・application: 支持网络应用&lt;br /&gt;
・presentation: 允许应用程序解释数据的意义，如加密、压缩&lt;br /&gt;
・session: 数据交换的同步，检查和恢复&lt;br /&gt;
・transport: 进程到进程的数据传输 (端到端)&lt;br /&gt;
・network: 为数据报选择从源主机到目的主机 的路径&lt;br /&gt;
・data link: 在邻近网元之间传输数据&lt;/p&gt;
&lt;p&gt;・physical: 在介质上传输原始比特&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;TCP/IP 参考模型&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;协议栈&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/10/kUG5MQbEuSVAtI6.png&#34; alt=&#34;image-20211210105419434&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下图左为 OSI, 右为 TCP/IP&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zMi5sb2xpLm5ldC8yMDIxLzEyLzEwL2x0TlA3V2s4S1NFYkRxby5wbmc=&#34;&gt;https://s2.loli.net/2021/12/10/ltNP7Wk8KSEbDqo.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211210105133165&amp;quot; style=&amp;quot;zoom: 67%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;混合模型 (Hybrid Model)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本课程使用的模型&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/10/iQgX5ac8sJFutrI.png&#34; alt=&#34;image-20211210105705057&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;传世经典bushi-数据传输过程中在各层发生的变化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#传世经典bushi-数据传输过程中在各层发生的变化&#34;&gt;#&lt;/a&gt; 传世经典 (bushi)- 数据传输过程中在各层发生的变化&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/10/1K3IgykaHvdcUsb.png&#34; alt=&#34;image-20211210105729673&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;13计算机网络性能指标&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13计算机网络性能指标&#34;&gt;#&lt;/a&gt; 1.3 计算机网络性能指标&lt;/h3&gt;
&lt;p&gt;吞吐量 Throughput - 传输位数 / 传输时间&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;带宽是吞吐量的绝对上限&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;带宽 Bandwidth&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在单位时间内，从网络中的某一点到另一点所能通过的位数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;时延 / 延迟 Delay&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个数据库从网络的一端传送到另一端所需要的时间&lt;/p&gt;
&lt;p&gt;时延 = 处理时延 + 排队时延 + 传输时延 + 传播时延&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传输时延 - 数据量 / 带宽&lt;/li&gt;
&lt;li&gt;传播时延 - 传输距离 / 光速&lt;/li&gt;
&lt;li&gt;往返时延 (RTT)- 从发送端发出，到发送端收到接收端的确认的总时延&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;端到端时延 - 分组从源主机到目的主机路径上每个节点时延的总和&lt;/li&gt;
&lt;li&gt;时延带宽积 - 传播时延 * 带宽&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;2-应用层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-应用层&#34;&gt;#&lt;/a&gt; 2. 应用层&lt;/h2&gt;
&lt;h3 id=&#34;21-应用层协议原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21-应用层协议原理&#34;&gt;#&lt;/a&gt; 2.1  应用层协议原理&lt;/h3&gt;
&lt;h4 id=&#34;211网络应用程序的体系结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#211网络应用程序的体系结构&#34;&gt;#&lt;/a&gt; 2.1.1 网络应用程序的体系结构&lt;/h4&gt;
&lt;h5 id=&#34;client-servercs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#client-servercs&#34;&gt;#&lt;/a&gt; Client-Server(C/S)&lt;/h5&gt;
&lt;p&gt;server:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;永远在线&lt;/p&gt;
&lt;p&gt;永久 ip&lt;/p&gt;
&lt;p&gt;服务器集群增强可扩展性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;client&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;与服务器交互&lt;/p&gt;
&lt;p&gt;动态 IP 地址&lt;/p&gt;
&lt;p&gt;客户机之间不直接通信&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;peer-to-peerp2p&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#peer-to-peerp2p&#34;&gt;#&lt;/a&gt; Peer-to-Peer(P2P)&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;没有长期存在的服务端&lt;/p&gt;
&lt;p&gt;端系统之间直接通信&lt;/p&gt;
&lt;p&gt;对等方向其他对等方 (Peer) 请求服务，同时给其他 peer 提供服务&lt;/p&gt;
&lt;p&gt;对等方间歇性连接，IP 可变&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;212可供应用层使用的传输层服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#212可供应用层使用的传输层服务&#34;&gt;#&lt;/a&gt; 2.1.2 可供应用层使用的传输层服务&lt;/h4&gt;
&lt;p&gt;app 需要什么？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;数据完整性&lt;/p&gt;
&lt;p&gt;吞吐量&lt;/p&gt;
&lt;p&gt;时效性&lt;/p&gt;
&lt;p&gt;安全性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;TCP&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;提供&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;面向连接&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可靠传输&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;流量控制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拥塞控制&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不提供&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定时 (时效性)&lt;/li&gt;
&lt;li&gt;最小带宽保证&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;UDP&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不可靠数据传输&lt;/p&gt;
&lt;p&gt;不提供&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;流量控制&lt;/p&gt;
&lt;p&gt;连接建立&lt;/p&gt;
&lt;p&gt;可靠性&lt;/p&gt;
&lt;p&gt;拥塞控制&lt;/p&gt;
&lt;p&gt;时效性&lt;/p&gt;
&lt;p&gt;最小带宽保证&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;因特网使用的应用层协议和传输层协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#因特网使用的应用层协议和传输层协议&#34;&gt;#&lt;/a&gt; 因特网使用的应用层协议和传输层协议&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/10/VqOfA9pZeRUbgP6.png&#34; alt=&#34;image-20211210111555991&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;22应用层协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22应用层协议&#34;&gt;#&lt;/a&gt; 2.2 应用层协议&lt;/h3&gt;
&lt;h4 id=&#34;221web和http&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#221web和http&#34;&gt;#&lt;/a&gt; 2.2.1Web 和 HTTP&lt;/h4&gt;
&lt;p&gt;http: 超文本传输协议&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用 TCP 协议&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端初始化传输端口，发送给服务端&lt;/li&gt;
&lt;li&gt;服务端接受连接请求&lt;/li&gt;
&lt;li&gt;交换信息&lt;/li&gt;
&lt;li&gt;连接关闭&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;非持久 http: 每个连接只发送一个对象 (HTTP/1.0)&lt;/p&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zMi5sb2xpLm5ldC8yMDIxLzEyLzEwL1RBQ3NHYWx0SU1XY3VWOS5wbmc=&#34;&gt;https://s2.loli.net/2021/12/10/TACsGaltIMWcuV9.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211210125021314&amp;quot; style=&amp;quot;zoom: 50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;持久 http: 每个连接发送多个对象 (HTTP/1.1)&lt;/p&gt;
&lt;p&gt;过程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端初始化连接&lt;/li&gt;
&lt;li&gt;服务端接受&lt;/li&gt;
&lt;li&gt;下面步骤 * n
&lt;ul&gt;
&lt;li&gt;客户端发送请求&lt;/li&gt;
&lt;li&gt;服务端发送数据&lt;/li&gt;
&lt;li&gt;客户端收到数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;服务端关掉连接&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zMi5sb2xpLm5ldC8yMDIxLzEyLzEwL3JtRW9NU3doVWVLbFFEQy5wbmc=&#34;&gt;https://s2.loli.net/2021/12/10/rmEoMSwhUeKlQDC.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211210125349254&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;http请求报文&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http请求报文&#34;&gt;#&lt;/a&gt; HTTP 请求报文&lt;/h5&gt;
&lt;p&gt;两种 type: 请求和响应&lt;/p&gt;
&lt;p&gt;请求报文样式:&lt;/p&gt;
&lt;p&gt;请求行 报头 空白行 正文&lt;/p&gt;
&lt;p&gt;GET /somedir/page.html HTTP/1.1 -- 请求&lt;/p&gt;
&lt;p&gt;Host: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5zb21lc2Nob29sLmVkdQ==&#34;&gt;www.someschool.edu&lt;/span&gt; User-agent: Mozilla/4.0 Connection: close Accept-language:fr-- 报头&lt;/p&gt;
&lt;h5 id=&#34;无状态statelessness和cookies&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#无状态statelessness和cookies&#34;&gt;#&lt;/a&gt; 无状态 (Statelessness) 和 Cookies&lt;/h5&gt;
&lt;p&gt;无状态 - 服务器不保留有关客户过去请求的任何信息&lt;/p&gt;
&lt;p&gt;Cookies&lt;/p&gt;
&lt;p&gt;一个小文件 / 字符串，使得服务端能够跟踪用户&lt;/p&gt;
&lt;p&gt;实现&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在 Http 响应报文上加上 set-cookie 头&lt;/p&gt;
&lt;p&gt;请求报文上加入 cookie 报头&lt;/p&gt;
&lt;p&gt;cookie 文件留在用户本地，用浏览器管理&lt;/p&gt;
&lt;p&gt;在服务端留有后端的服务器存储用户真正信息&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zMi5sb2xpLm5ldC8yMDIxLzEyLzEwL2p1c1RDUGN0ekJkcHJTNS5wbmc=&#34;&gt;https://s2.loli.net/2021/12/10/jusTCPctzBdprS5.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211210174626429&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;web缓存-代理服务器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web缓存-代理服务器&#34;&gt;#&lt;/a&gt; Web 缓存 - 代理服务器&lt;/h5&gt;
&lt;p&gt;目的：缩短对客户请求的响应时间，减少组织接入链路上的流量&lt;/p&gt;
&lt;p&gt;用户浏览器：通过缓存访问网站&lt;/p&gt;
&lt;p&gt;浏览器把所有的 HTTP 响应发送给 cache&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;条件 GET&lt;br /&gt;
 如果缓存中有最新缓存版本，就不发送该对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;222ftp不考&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#222ftp不考&#34;&gt;#&lt;/a&gt; 2.2.2FTP [不考]&lt;/h4&gt;
&lt;h4 id=&#34;223electronic-mailsmtp-pop3-imap&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#223electronic-mailsmtp-pop3-imap&#34;&gt;#&lt;/a&gt; 2.2.3Electronic  Mail——SMTP, POP3, IMAP&lt;/h4&gt;
&lt;p&gt;关键组件:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用户代理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;邮件阅读者&lt;/p&gt;
&lt;p&gt;撰写，编辑，阅读邮件&lt;/p&gt;
&lt;p&gt;发送 / 接收在 server 上存储的邮件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;邮件服务器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;mailbox 保留用户收到的信息&lt;/p&gt;
&lt;p&gt;为发送的邮件信息创建发送队列&lt;/p&gt;
&lt;p&gt;在 server 中间提供 SMTP 协议服务，用来发送邮件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;示意图&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zMi5sb2xpLm5ldC8yMDIxLzEyLzEwL0c5NzRDdU5GU2dtSFk2eC5wbmc=&#34;&gt;https://s2.loli.net/2021/12/10/G974CuNFSgmHY6x.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211210175052267&amp;quot; style=&amp;quot;zoom:67%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;邮件发送协议:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SMTP: 简单邮件传输协议&lt;/li&gt;
&lt;li&gt;MIME: 通用因特网邮件拓展&lt;br /&gt;
 SMTP 只能传输 ASCII 码，不能传输二进制数据，MIME 允许二进制数据以 ASCII 编码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;邮件读取协议:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pop: 邮局协议 Post Office Protocol&lt;br /&gt;
 授权 + 下载&lt;/li&gt;
&lt;li&gt;IMAP: 因特网报文读取协议&lt;br /&gt;
更多功能&lt;br /&gt;
操作存储在服务器上的报文&lt;/li&gt;
&lt;li&gt;HTTP: gmail,Hotmail,Yahoo!Mail&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;224dns-域名系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#224dns-域名系统&#34;&gt;#&lt;/a&gt; 2.2.4DNS 域名系统&lt;/h4&gt;
&lt;p&gt;提供的服务&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;主机名到 ip 的翻译&lt;/p&gt;
&lt;p&gt;主机别名&lt;/p&gt;
&lt;p&gt;邮件服务器错误识别&lt;/p&gt;
&lt;p&gt;负载分配 (即一个主机名对应一组 IP 地址)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;分布式层次化数据库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分布式层次化数据库&#34;&gt;#&lt;/a&gt; 分布式层次化数据库&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/10/KxSiLqzaPj1Hy3Y.png&#34; alt=&#34;image-20211210182515156&#34; /&gt;&lt;/p&gt;
&lt;p&gt;访问 www.amazon.com 的过程&lt;/p&gt;
&lt;p&gt;客户 -&amp;gt;root, 得到 com server&lt;/p&gt;
&lt;p&gt;客户 -&amp;gt;com server 得到 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2FtYXpvbi5jb20=&#34;&gt;amazon.com&lt;/span&gt; DNS server&lt;/p&gt;
&lt;p&gt;客户 -&amp;gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2FtYXpvbi5jb20=&#34;&gt;amazon.com&lt;/span&gt; DNS server 得到对应 ip 地址&lt;/p&gt;
&lt;h5 id=&#34;本地域名服务器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#本地域名服务器&#34;&gt;#&lt;/a&gt; 本地域名服务器&lt;/h5&gt;
&lt;p&gt;大学 / 公司内部搭建&lt;/p&gt;
&lt;p&gt;主机创建 DNS 请求的时候，先送到本地 DNS server&lt;/p&gt;
&lt;h5 id=&#34;域名解析例子&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#域名解析例子&#34;&gt;#&lt;/a&gt; 域名解析例子&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/10/wiEbcMuj5rzRUOF.png&#34; alt=&#34;image-20211210183014756&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;dns-protocol&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dns-protocol&#34;&gt;#&lt;/a&gt; DNS Protocol&lt;/h5&gt;
&lt;p&gt;使用 UDP 协议的 53 号端口传输&lt;/p&gt;
&lt;h4 id=&#34;225p2p不考&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#225p2p不考&#34;&gt;#&lt;/a&gt; 2.2.5P2P [不考]&lt;/h4&gt;
&lt;h3 id=&#34;23网络编程不考&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#23网络编程不考&#34;&gt;#&lt;/a&gt; 2.3 网络编程 [不考]&lt;/h3&gt;
&lt;h4 id=&#34;网络应用程序编程接口-套接字不考&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络应用程序编程接口-套接字不考&#34;&gt;#&lt;/a&gt; 网络应用程序编程接口 - 套接字 [不考]&lt;/h4&gt;
&lt;h2 id=&#34;3传输层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3传输层&#34;&gt;#&lt;/a&gt; 3. 传输层&lt;/h2&gt;
&lt;h3 id=&#34;31传输层提供的服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#31传输层提供的服务&#34;&gt;#&lt;/a&gt; 3.1 传输层提供的服务&lt;/h3&gt;
&lt;h4 id=&#34;311传输层的功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#311传输层的功能&#34;&gt;#&lt;/a&gt; 3.1.1 传输层的功能&lt;/h4&gt;
&lt;p&gt;为运行在不同主机上的应用进程之间提供逻辑通信&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;端到端&lt;/li&gt;
&lt;li&gt;依赖并强化网络层服务&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;312无连接服务与面向连接服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#312无连接服务与面向连接服务&#34;&gt;#&lt;/a&gt; 3.1.2 无连接服务与面向连接服务&lt;/h4&gt;
&lt;p&gt;无连接：无握手&lt;/p&gt;
&lt;p&gt;面向连接：数据交换前通过握手初始化发送方与接收方的服务&lt;/p&gt;
&lt;h4 id=&#34;313传输层寻址与端口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#313传输层寻址与端口&#34;&gt;#&lt;/a&gt; 3.1.3 传输层寻址与端口&lt;/h4&gt;
&lt;p&gt;传输层寻址通过 TCP 和 UDP 的端口实现&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TCP/IP:0~65535&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0~ 1023: 标准端口，用于特定服务&lt;/li&gt;
&lt;li&gt;其余临时端口&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;不同的端口表示不同的应用程序&lt;/p&gt;
&lt;h3 id=&#34;32无连接的传输协议udp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#32无连接的传输协议udp&#34;&gt;#&lt;/a&gt; 3.2 无连接的传输协议 ——UDP&lt;/h3&gt;
&lt;h5 id=&#34;特征&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特征&#34;&gt;#&lt;/a&gt; 特征&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;尽力而为 (会丢包，顺序会乱)&lt;/p&gt;
&lt;p&gt;无连接 - 没有握手，每个报文的处理&lt;strong&gt;与其他报文独立&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;经常被流媒体使用 (能容忍丢包，对时间敏感)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;DNS 和 SNMP 是用 UDP 的&lt;/p&gt;
&lt;p&gt;UDP 格式&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;源端口 (16bit&lt;/th&gt;
&lt;th&gt;目的端口 (16bit)&lt;/th&gt;
&lt;th&gt;长度 (16bit)&lt;/th&gt;
&lt;th&gt;校验和 (16bit)&lt;/th&gt;
&lt;th&gt;报文&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;UDP 校验和计算&lt;/p&gt;
&lt;p&gt;临时把伪首部 (12 字节 IP 首部) 和数据报连接在一起，用于检验是否在正确的端点之间传送&lt;/p&gt;
&lt;p&gt;计算校验和&lt;/p&gt;
&lt;p&gt;过程&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/10/I9pQY8KlRjohZyA.png&#34; alt=&#34;image-20211210184555287&#34; /&gt;&lt;/p&gt;
&lt;p&gt;反码求和&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zMi5sb2xpLm5ldC8yMDIxLzEyLzEwL1pxaXRBSUtEOU1oV0ZCWC5wbmc=&#34;&gt;https://s2.loli.net/2021/12/10/ZqitAIKD9MhWFBX.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211210184821480&amp;quot; style=&amp;quot;zoom: 67%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;校验和例子&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zMi5sb2xpLm5ldC8yMDIxLzEyLzEwL3BSelNFVEdaakJ2YjRVSS5wbmc=&#34;&gt;https://s2.loli.net/2021/12/10/pRzSETGZjBvb4UI.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211210185822703&amp;quot; style=&amp;quot;zoom:67%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;33可靠数据传输的原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#33可靠数据传输的原理&#34;&gt;#&lt;/a&gt; 3.3 可靠数据传输的原理&lt;/h3&gt;
&lt;p&gt;目的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;数据位不被损坏&lt;/p&gt;
&lt;p&gt;没有数据丢失&lt;/p&gt;
&lt;p&gt;数据以发送顺序被传输&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;总结 - 要在非可靠信道上提供可靠的数据通信&lt;/p&gt;
&lt;p&gt;基础操作&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ARQ 自动重传请求：接收方发现错误 / 丢失分组后要求发送方重传&lt;/p&gt;
&lt;p&gt;错误分组检测 - 校验和&lt;/p&gt;
&lt;p&gt;丢失分组 - 确认，超时&lt;/p&gt;
&lt;p&gt;重传 (Retransmit)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;331停止-等待协议sw&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#331停止-等待协议sw&#34;&gt;#&lt;/a&gt; 3.3.1 停止 - 等待协议（SW）&lt;/h4&gt;
&lt;p&gt;发送方发送一个分组后，必须停下来等待接收方确认后才可以发送下一个分组&lt;/p&gt;
&lt;p&gt;错误处理：收到错误分组，接收方发送否定确认，让发送方重发&lt;/p&gt;
&lt;p&gt;丢失处理：发送方内部设置定时器，超过定时时间还未收到 ACK 确认，则重发&lt;/p&gt;
&lt;p&gt;处理重复分组：给每个分组带上序号 (模&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;2^n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.664392em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.664392em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;)&lt;/p&gt;
&lt;h5 id=&#34;性能分析及计算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#性能分析及计算&#34;&gt;#&lt;/a&gt; 性能分析及计算&lt;/h5&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zMi5sb2xpLm5ldC8yMDIxLzEyLzEwLzJzbFhxd2JCYTV4OVltOC5wbmc=&#34;&gt;https://s2.loli.net/2021/12/10/2slXqwbBa5x9Ym8.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211210190424127&amp;quot; style=&amp;quot;zoom:67%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;332回退n协议gbn&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#332回退n协议gbn&#34;&gt;#&lt;/a&gt; 3.3.2 回退 N 协议（GBN）&lt;/h4&gt;
&lt;p&gt;发送方&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在收到确认前可以发送多个分组&lt;/p&gt;
&lt;p&gt;发送窗口&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;W_s&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;s&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 最大为&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msup&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;2^n-1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.747722em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.664392em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;每发送一个分组后，就启动内部计时器，若超时未收到确认，则重发该分组之后已发送的 N 个分组&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/10/BhjV1KgSrJ6xXiL.png&#34; alt=&#34;image-20211210193707525&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接收方&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;接收方只能缓冲一个分组&lt;/p&gt;
&lt;p&gt;接收方只对按序到达的最后一个分组发送确认分组 (因此对乱序分组会产生重复的确认分组)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;序号:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是模 2^n 的，n 是字段的位数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;333选择重传协议sr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#333选择重传协议sr&#34;&gt;#&lt;/a&gt; 3.3.3 选择重传协议（SR）&lt;/h4&gt;
&lt;p&gt;避免不必要的重传&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zMi5sb2xpLm5ldC8yMDIxLzEyLzEwL1V1eDg5SWRSb1NPWDFWVy5wbmc=&#34;&gt;https://s2.loli.net/2021/12/10/Uux89IdRoSOX1VW.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211210194222054&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;接收方&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;接逐个确认接收到的每一个分组&lt;/p&gt;
&lt;p&gt;发现某个分组出错后，其后继续送来的正确分组还是被接收，放在缓冲区中，同时要求发送方重新传送出错分组&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;发送方&lt;/p&gt;
&lt;blockquote n-1=&#34;&#34;&gt;
&lt;p&gt;只有在接收窗口向前滑动时，发送窗口才有可能向前滑动&lt;/p&gt;
&lt;p&gt;即&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;&amp;gt;&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;W_S&amp;gt;=W_R&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.32833099999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.36687em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.32833099999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 且 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;W_s+W_R&amp;lt;=2^n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;s&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.32833099999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.36687em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.664392em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.664392em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;窗口长度 &amp;lt;=2^&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;334滑动窗口机制可用于实现不同可靠传输协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#334滑动窗口机制可用于实现不同可靠传输协议&#34;&gt;#&lt;/a&gt; 3.3.4 滑动窗口机制（可用于实现不同可靠传输协议）&lt;/h4&gt;
&lt;p&gt;流水线协议 / 连续 ARQ (也叫 &amp;lt; u&amp;gt; 滑动窗口协议 &amp;lt;/u&amp;gt;)&lt;/p&gt;
&lt;p&gt;当发送端等待确认时，我们需要传输多个分组来提高利用率&lt;/p&gt;
&lt;p&gt;Pipeling: 允许发送方发送多个未被确认的分组&lt;/p&gt;
&lt;p&gt;概念&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;发送窗口：发送方在没收到确认的情况下，能够连续发送的分组的序号表&lt;br /&gt;
 &amp;lt; img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zMi5sb2xpLm5ldC8yMDIxLzEyLzEwL3dnalR4NWMzYXFyQ29IRC5wbmc=&#34;&gt;https://s2.loli.net/2021/12/10/wgjTx5c3aqrCoHD.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211210191530175&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大小:&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;W_s&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;s&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;下界表示未得到确认的分组的最小序号&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接收窗口：希望接收的分组的序号表&lt;br /&gt;
&lt;img data-src=&#34;https://s2.loli.net/2021/12/10/hmAcMeU8rnJSRo6.png&#34; alt=&#34;image-20211210191655633&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大小&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;W_R&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.32833099999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;上界表示允许接收的分组的最大序号，下界表示希望接收的下一个分组的序号&lt;/li&gt;
&lt;li&gt;若序号等于下界的分组被正确接收，并发送一个确认分组，上下界都加 1, 接收窗口向前滑动一次&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;34面向连接的传输协议-tcp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#34面向连接的传输协议-tcp&#34;&gt;#&lt;/a&gt; 3.4 面向连接的传输协议 ——  TCP&lt;/h3&gt;
&lt;h5 id=&#34;总览&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总览&#34;&gt;#&lt;/a&gt; 总览&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;点到点&lt;/p&gt;
&lt;p&gt;可靠有序的字节流 - 没有报文边界&lt;/p&gt;
&lt;p&gt;流水线 - 拥塞控制和流量控制设置窗口大小&lt;/p&gt;
&lt;p&gt;全双工数据 - 双方可以同时发送和接收&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要求每一端都有两个窗口&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;流量控制&lt;/p&gt;
&lt;p&gt;面向连接&lt;/p&gt;
&lt;p&gt;拥塞控制&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;341tcp报文段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#341tcp报文段&#34;&gt;#&lt;/a&gt; 3.4.1TCP 报文段&lt;/h4&gt;
&lt;h5 id=&#34;结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#结构&#34;&gt;#&lt;/a&gt; 结构&lt;/h5&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zMi5sb2xpLm5ldC8yMDIxLzEyLzEwL0NTTUpkaGplSVByT0hMbS5wbmc=&#34;&gt;https://s2.loli.net/2021/12/10/CSMJdhjeIPrOHLm.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211210194733680&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;解释&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;源端口和目的端口 - 2 字节 /each,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;序号 - 每字节都有序号，序号字段存储发送字节的第一个的序号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;确认号 - 希望收到下一个保温段的数据的第一个字节的序号&lt;br /&gt;
 TCP 使用累积确认&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一些特殊位&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;URG - 紧急&lt;/p&gt;
&lt;p&gt;ACK-1 时确认号字段有效&lt;/p&gt;
&lt;p&gt;PSH - 尽快交付 (不等待缓存写满)&lt;/p&gt;
&lt;p&gt;RST-reset 复位，重新建立连接&lt;/p&gt;
&lt;p&gt;SYN - 如果为 1 表示这是个连接请求&lt;/p&gt;
&lt;p&gt;FIN-1 的话释放连接&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;校验和 - 检验首部和数据&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;342tcp可靠传输&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#342tcp可靠传输&#34;&gt;#&lt;/a&gt; 3.4.2TCP 可靠传输&lt;/h4&gt;
&lt;p&gt;用字节序号进行控制&lt;/p&gt;
&lt;p&gt;过程模拟&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;B 给出通告窗口值 20-&amp;gt;A 构造长为 20 的发送窗口 (31~50)&lt;/p&gt;
&lt;p&gt;A 发送 11 字节数据，此时还剩 9 字节可被发送&lt;/p&gt;
&lt;p&gt;B 接收窗口也为 20, 收到 3 字节，发送确认号 33-&amp;gt;A 窗口移动到 (34~53)&lt;/p&gt;
&lt;p&gt;B 窗口也滑动到 34&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;重传计时器 ***&lt;/p&gt;
&lt;p&gt;四个窗口 (两发两收) 动态变化&lt;/p&gt;
&lt;h4 id=&#34;343tcp流量控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#343tcp流量控制&#34;&gt;#&lt;/a&gt; 3.4.3TCP 流量控制&lt;/h4&gt;
&lt;p&gt;目的：让发送方速率不要太快，让接收方来得及接收&lt;/p&gt;
&lt;p&gt;利用滑动窗口机制实现&lt;/p&gt;
&lt;p&gt;如果接收端顶不住发送端了，缓冲区被全部占用，就只能发送一个零通告窗口&lt;/p&gt;
&lt;p&gt;发送端收到零通告窗口后停止发送，直到等到接收端发送一个非零的通告窗口&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;持续计时器&lt;br /&gt;
收到零通告窗口时启动，如果持续时间到期，就发送一个探测报文段，请求一个对方的通告窗口&lt;br /&gt;
如果还是零，就重设计时器&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;344tcp连接管理不考&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#344tcp连接管理不考&#34;&gt;#&lt;/a&gt; 3.4.4TCP 连接管理 [不考]&lt;/h4&gt;
&lt;h4 id=&#34;345tcp拥塞控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#345tcp拥塞控制&#34;&gt;#&lt;/a&gt; 3.4.5TCP 拥塞控制&lt;/h4&gt;
&lt;p&gt;太多的源太快地发送太多的数据，使网络来不及处理&lt;/p&gt;
&lt;p&gt;表现：丢包 (路由器缓冲区溢出)&lt;/p&gt;
&lt;p&gt;长时延 (缓冲区中排队)&lt;/p&gt;
&lt;p&gt;作用：提高吞吐量&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/10/UMDJeWx3bX9QsZR.png&#34; alt=&#34;image-20211210202844398&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;与流量控制的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#与流量控制的区别&#34;&gt;#&lt;/a&gt; 与流量控制的区别&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;拥塞控制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要确保通信子网能够承载用户提交的通信两，是一个全局性过程，涉及主机，路由器等很多因素&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;流量控制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;与点到点的通信量有关，主要解决快速发送方与慢速发送方的问题，是局部过程&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;拥塞控制方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拥塞控制方法&#34;&gt;#&lt;/a&gt; 拥塞控制方法&lt;/h5&gt;
&lt;p&gt;发送方维持一个拥塞窗口 cwnd, 其大小取决于网络拥塞程度，且动态变化&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;网络不堵塞，拥塞窗口增大一些&lt;/p&gt;
&lt;p&gt;堵塞就把它减少一些&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;发送方发送窗口的上限为接收方通告窗口 [rwnd] 和拥塞窗口 [cwnd] 中较小的一个&lt;/p&gt;
&lt;p&gt;四种办法&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;慢开始 / 启动&lt;br /&gt;
 cwnd 初始化为 1&lt;br /&gt;
 每收到一个对应确认，cwnd+=1&lt;br /&gt;
&lt;img data-src=&#34;https://s2.loli.net/2021/12/10/Z7juwLIF8U69mBy.png&#34; alt=&#34;image-20211210203322561&#34; /&gt;&lt;br /&gt;
 每经过一个传输轮次，cwnd*=2, 时间为 RTT&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拥塞避免&lt;br /&gt;
每经过一个 RTT, 拥塞窗口 + 1, 缓慢增长&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;慢开始门限 ssthresh&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;cwnd&amp;lt;ssthresh -&amp;gt; 慢开始 / 慢启动算法&lt;/p&gt;
&lt;p&gt;cwnd&amp;gt;ssthresh -&amp;gt; 拥塞避免&lt;/p&gt;
&lt;p&gt;cwnd=ssthresh -&amp;gt; 都行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实现举例&lt;br /&gt;
 &amp;lt; img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zMi5sb2xpLm5ldC8yMDIxLzEyLzEwL3JLYUNucVQzdFJieGQ0bS5wbmc=&#34;&gt;https://s2.loli.net/2021/12/10/rKaCnqT3tRbxd4m.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211210203723811&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;出现拥塞时&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;把 ssthresh 设置为当前值的一半&lt;/p&gt;
&lt;p&gt;把 cwnd 重设为 1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;快重传&lt;br /&gt;
要求接收方每收到一个失序的报文段后立即发出重复确认&lt;br /&gt;
发送方一连收到三个重复确认就立即重传未收到报文段&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;快恢复&lt;br /&gt;
当发送端收到连续三个重复确认时，把 ssthresh 设置为当前一半，但接下去不执行慢开始 / 慢启动算法，而是将 cwnd 设置为 ssthresh 减半后数值，然后开始执行拥塞避免算法&lt;br /&gt;
 &amp;lt; img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zMi5sb2xpLm5ldC8yMDIxLzEyLzEwLzNvVFhHQms0VmR2QVF1Zi5wbmc=&#34;&gt;https://s2.loli.net/2021/12/10/3oTXGBk4VdvAQuf.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211210204852460&amp;quot; style=&amp;quot;zoom:67%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;4网络层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4网络层&#34;&gt;#&lt;/a&gt; 4. 网络层&lt;/h2&gt;
&lt;h3 id=&#34;41网络层的功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#41网络层的功能&#34;&gt;#&lt;/a&gt; 4.1 网络层的功能&lt;/h3&gt;
&lt;p&gt;在发送端，将分组封装成数据报&lt;/p&gt;
&lt;p&gt;在接收端，把数据报上传到传输层&lt;/p&gt;
&lt;p&gt;路由器检查每个通过它的数据报&lt;/p&gt;
&lt;h5 id=&#34;两个关键功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#两个关键功能&#34;&gt;#&lt;/a&gt; 两个关键功能&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;转发 - 将分组从路由器的输入端口移动到输出端口&lt;/p&gt;
&lt;p&gt;路由 - 决定分组从源主机到目的主机所采用的设备&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;网络层服务模型我觉得没什么考的必要&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络层服务模型我觉得没什么考的必要&#34;&gt;#&lt;/a&gt; 网络层服务模型 (我觉得没什么考的必要)&lt;/h5&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zMi5sb2xpLm5ldC8yMDIxLzEyLzEwLzdTc3dDMnFGUWhnQjNvZC5wbmc=&#34;&gt;https://s2.loli.net/2021/12/10/7SswC2qFQhgB3od.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211210212419693&amp;quot; style=&amp;quot;zoom:67%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;42网络层设备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#42网络层设备&#34;&gt;#&lt;/a&gt; 4.2 网络层设备&lt;/h3&gt;
&lt;h4 id=&#34;路由器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#路由器&#34;&gt;#&lt;/a&gt; 路由器&lt;/h4&gt;
&lt;h5 id=&#34;输入端口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入端口&#34;&gt;#&lt;/a&gt; 输入端口&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;物理层 - 比特级接收&lt;/p&gt;
&lt;p&gt;链路层连接以太网&lt;/p&gt;
&lt;p&gt;最后一层进行分散式交换 - 给定数据报目的地址，在输入端口中使用转发表查找输出端口&lt;br /&gt;
 - 到达较快的话还会排队&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;三种类型交换结构&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zMi5sb2xpLm5ldC8yMDIxLzEyLzExL1JxMmp5WnBKYkg0aTlBTy5wbmc=&#34;&gt;https://s2.loli.net/2021/12/11/Rq2jyZpJbH4i9AO.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211211103137804&amp;quot; style=&amp;quot;zoom:67%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;输出端口&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当数据报来自比传输速率更快的交换结构时，需要 **&amp;lt;u&amp;gt; 缓存 &amp;lt;/u&amp;gt;**&lt;/p&gt;
&lt;p&gt;&amp;lt;u&amp;gt;&lt;strong&gt; 调度安排&lt;/strong&gt; &amp;lt;/u&amp;gt;- 在排队的数据报中选择要传输的数据报&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;43ip&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#43ip&#34;&gt;#&lt;/a&gt; 4.3IP&lt;/h3&gt;
&lt;p&gt;链路层之上，传输层之下&lt;/p&gt;
&lt;h4 id=&#34;431ipv4分组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#431ipv4分组&#34;&gt;#&lt;/a&gt; 4.3.1IPv4 分组&lt;/h4&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zMi5sb2xpLm5ldC8yMDIxLzEyLzExL1ZJeVFTZktvbUxUSmkxRS5wbmc=&#34;&gt;https://s2.loli.net/2021/12/11/VIyQSfKomLTJi1E.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211211103434802&amp;quot; style=&amp;quot;zoom: 50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;首部字段解释&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#首部字段解释&#34;&gt;#&lt;/a&gt; 首部字段解释&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;总长度 - 首部和数据之和的长度，最大为 65535&lt;/p&gt;
&lt;p&gt;标识 - 计数器，产生数据报标识&lt;/p&gt;
&lt;p&gt;标志 - 3bit, 最低位 (M (ore) F (ragment) 等于一代表还有分片，等于 0 代表没有分片，&lt;br /&gt;
 中间一位 = 0 才允许分片 (D (ont) F (ragment))&lt;/p&gt;
&lt;p&gt;片偏移 - 13bit, 指出分片后该片在原分组中的相对位置，以 8 个字节为偏移单位&lt;/p&gt;
&lt;h5 id=&#34;ip分片和重组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ip分片和重组&#34;&gt;#&lt;/a&gt; IP 分片和重组&lt;/h5&gt;
&lt;p&gt;为什么分片 - 链路有最大传输单元，不同链路 MTU 不同&lt;/p&gt;
&lt;p&gt;样例&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zMi5sb2xpLm5ldC8yMDIxLzEyLzExLzd6dUhLTUVBQlAxanBYOS5wbmc=&#34;&gt;https://s2.loli.net/2021/12/11/7zuHKMEABP1jpX9.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211211104103771&amp;quot; style=&amp;quot;zoom:67%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;生存时间 (TTL time to live) 限制数据报在网络中的生存时间，每经过一个路由器，TTL-1&lt;/p&gt;
&lt;p&gt;协议 - 数据部分协议 (TCP/UDP/IPV6 等等) 不一定是 &amp;lt; u &amp;gt; 上层，&amp;lt;/u&amp;gt;&lt;/p&gt;
&lt;p&gt;首部校验和 - 只检验首部&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/11/5hrMJg1ezbuwcG4.png&#34; alt=&#34;image-20211211104807155&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;432ipv4地址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#432ipv4地址&#34;&gt;#&lt;/a&gt; 4.3.2IPv4 地址&lt;/h4&gt;
&lt;p&gt;ip 地址 - 32 位的主机 / 交换机标识号&lt;/p&gt;
&lt;p&gt;接口 interface - 主机 / 路由器与物理链路之间的链接&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;交换机有很多个 interface&lt;/p&gt;
&lt;p&gt;主机一般就一两个&lt;/p&gt;
&lt;p&gt;Ip 地址与每个接口相关联&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;子网&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#子网&#34;&gt;#&lt;/a&gt; 子网&lt;/h5&gt;
&lt;p&gt;设备接口 Ip 地址的子网部分相同&lt;/p&gt;
&lt;p&gt;可以物理上直接联系，不用经过交换机&lt;/p&gt;
&lt;h5 id=&#34;计算可用的主机地址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算可用的主机地址&#34;&gt;#&lt;/a&gt; 计算可用的主机地址&lt;/h5&gt;
&lt;p&gt;主机部分全 0: 网络地址&lt;/p&gt;
&lt;p&gt;主机部分全 1: 广播地址&lt;/p&gt;
&lt;p&gt;上两个不能设置为主机地址&lt;/p&gt;
&lt;h5 id=&#34;子网掩码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#子网掩码&#34;&gt;#&lt;/a&gt; 子网掩码&lt;/h5&gt;
&lt;p&gt;/n 表示子网掩码位数为 n&lt;/p&gt;
&lt;p&gt;x.y.z.a, 点分十进制形式表示 32bit IP 地址中哪些事子网部分&lt;/p&gt;
&lt;h5 id=&#34;ip地址分配方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ip地址分配方案&#34;&gt;#&lt;/a&gt; IP 地址分配方案&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;子网位数固定 - 分类 IP 地址&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不固定 --CIDR (无类域间路由)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;子网部分被称为网络前缀，前缀部分任意长&lt;/p&gt;
&lt;p&gt;使用斜线记法&lt;/p&gt;
&lt;p&gt;路由表中每个项目由 &amp;quot;网络前缀&amp;quot; 和 &amp;quot;下一跳地址&amp;quot; 组成，查找路由表时可能会得到不止一个匹配结果，因此引出下面内容&lt;/p&gt;
&lt;h6 id=&#34;最长前缀匹配&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#最长前缀匹配&#34;&gt;#&lt;/a&gt; 最长前缀匹配&lt;/h6&gt;
&lt;p&gt;举例&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/11/l9C2phSQBAz4OHm.png&#34; alt=&#34;image-20211211134931698&#34; /&gt;&lt;/p&gt;
&lt;h6 id=&#34;cidr子网划分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cidr子网划分&#34;&gt;#&lt;/a&gt; CIDR 子网划分 ***&lt;/h6&gt;
&lt;p&gt;把一个大网络分成多个小网络，用路由器把这些小网络连接起来&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用子网掩码 255.255.255.192 (/26) 对网络&lt;br /&gt;
 192.168.10.0/24 进行子网划分，请回答如下问题 :&lt;br /&gt;
– (1) 子网数？&lt;/p&gt;
&lt;p&gt;192 为二进制 11000000，即 22 = 4 个子网；&lt;/p&gt;
&lt;p&gt;– (2) 每个子网中可以容纳的主机数？&lt;/p&gt;
&lt;p&gt;26 -2 =62 个主机；&lt;/p&gt;
&lt;p&gt;– (3) 哪些是合法的子网地址？&lt;/p&gt;
&lt;p&gt;每个子网的地址块大小为 26 =64，子&lt;br /&gt;
网地址的第 4 个字节从 0 开始以 64 递增，即：192.168.10.0、&lt;br /&gt;
192.168.10.64、192.168.10.128、192.168.10.192&lt;/p&gt;
&lt;p&gt;– (4) 每个子网的广播地址？&lt;/p&gt;
&lt;p&gt;– (5) 哪些是合法的主机地址？&lt;/p&gt;
&lt;p&gt;子网地址 (192.168.10.) 0 64 128 192&lt;br /&gt;
 第一个主机地址 (192.168.10.) 1 65 129 193&lt;br /&gt;
 最后一个主机地址 (192.168.10.) 62 126 190 254&lt;br /&gt;
 广播地址 (192.168.10.) 63 127 191 255&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;433ip分组转发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#433ip分组转发&#34;&gt;#&lt;/a&gt; 4.3.3IP 分组转发&lt;/h4&gt;
&lt;p&gt;网络层基于目的地址分组转发&lt;/p&gt;
&lt;p&gt;下图一了百了&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/11/vrUGaPkfJExzdCZ.png&#34; alt=&#34;image-20211211140706891&#34; /&gt;&lt;/p&gt;
&lt;p&gt;转发算法&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;从收到分组的首部获得目的 IP-&amp;gt;&lt;strong&gt;D&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;判断是否在同一网络上&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用子网掩码和&lt;strong&gt; D&lt;/strong&gt; 逐位相与，看看是不是和 **&amp;lt;u&amp;gt; 相应的网络地址 &amp;lt;/u&amp;gt;** 匹配，匹配就直接发过去&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若路由表中有目的为 D 的&lt;strong&gt;特定主机路由&lt;/strong&gt;，则将分组传送给指明的下一跳路由器，&lt;br /&gt;
 否则执行 4&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对路由表每行的子网掩码和 D 逐位相与，若结果与该行的目的网络地址匹配，就传送到下一跳&lt;br /&gt;
否则，执行 5&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若路由表有默认路由，则将其传送给它，&lt;br /&gt;
 否则执行 6&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;报告转发分组出错&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;434dhcp动态主机配置协议协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#434dhcp动态主机配置协议协议&#34;&gt;#&lt;/a&gt; 4.3.4DHCP (动态主机配置协议) 协议&lt;/h4&gt;
&lt;p&gt;Q.A&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;主机如何获得 IP 地址&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;管理员硬编码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;网络怎样得到 IP 地址的子网&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从其 ISP 的地址空间中得到分配的部分&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ISP 如何获得地址块&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ICANN (因特网名字与号码分配公司)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;dhcp目的-使主机能够动态获取服务器的ip地址当它加入网络时&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dhcp目的-使主机能够动态获取服务器的ip地址当它加入网络时&#34;&gt;#&lt;/a&gt; DHCP 目的：使主机能够动态获取服务器的 IP 地址 (当它加入网络时)&lt;/h6&gt;
&lt;p&gt;示意图&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/11/nlAa7d6vSw4V5qH.png&#34; alt=&#34;image-20211211142745600&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;435nat不考&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#435nat不考&#34;&gt;#&lt;/a&gt; 4.3.5NAT [不考]&lt;/h4&gt;
&lt;h4 id=&#34;436ipv6不考&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#436ipv6不考&#34;&gt;#&lt;/a&gt; 4.3.6IPv6 [不考]&lt;/h4&gt;
&lt;h3 id=&#34;44路由算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#44路由算法&#34;&gt;#&lt;/a&gt; 4.4 路由算法&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;路由算法用于选择从源主机到目的主机的最佳路径&lt;/p&gt;
&lt;p&gt;是产生路由表的算法 (找到开销最小的路径)&lt;/p&gt;
&lt;p&gt;分类&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;静态路由：路由随时间缓慢变化&lt;/p&gt;
&lt;p&gt;动态路由：更快地变化，周期性更新，适应链路开销变化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;441距离向量路由算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#441距离向量路由算法&#34;&gt;#&lt;/a&gt; 4.4.1 距离向量路由算法&lt;/h4&gt;
&lt;h5 id=&#34;bellman-ford方程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bellman-ford方程&#34;&gt;#&lt;/a&gt; Bellman-Ford 方程&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;定义&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;d_x(y)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;= 从 x 到 y 的最小开销路径的开销&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;c(x,v)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;= 从 x 到邻居节点 v 的链路的开销&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;{&lt;/mo&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;}&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;d_x(y)=min_v\{c(x,v)+d_v(y)\}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; ,min 针对 x 的所有邻居&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;取值最小的结点对应最短路径中的下一跳 -&amp;gt; 转发表&lt;/p&gt;
&lt;h5 id=&#34;过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程&#34;&gt;#&lt;/a&gt; 过程&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;结点 x 维护距离向量&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;[&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;:&lt;/mo&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mo&gt;∈&lt;/mo&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;]&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;D_x=[d_x(y):y\in N]&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.7335400000000001em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;∈&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 y 不是 x 的邻居，则&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;∞&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mtext&gt;否则&lt;/mtext&gt;&lt;msub&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;d_x(y)=\infin,否则d_x(y)=c(x,y)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;∞&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;否&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;则&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个节点周期性向邻居节点发送自己的距离向量，节点 x 保存其邻居节点的距离向量&lt;/p&gt;
&lt;p&gt;当结点 x 收到来自邻居的新距离向量，它使用 B-F 方程更新自己的 DV&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;←&lt;/mo&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;{&lt;/mo&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;}&lt;/mo&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mo&gt;∈&lt;/mo&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;D_x(y)\gets min_v\{c(x,v+D_v(y)\} for each node y\in N&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;←&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10764em;&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;∈&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;N&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/11/x75AVi8BThZJcHy.png&#34; alt=&#34;image-20211211144152548&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;444链路状态路由算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#444链路状态路由算法&#34;&gt;#&lt;/a&gt; 4.4.4 链路状态路由算法&lt;/h4&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;发现邻居，学习网络地址&lt;/li&gt;
&lt;li&gt;测量到每一个邻居的时延&lt;/li&gt;
&lt;li&gt;构造一个分组来通告学习到的信息&lt;/li&gt;
&lt;li&gt;向所有路由器发哦送分组&lt;/li&gt;
&lt;li&gt;计算到其他路由器的最短路径&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;使用dijkstra算法计算最短路径&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用dijkstra算法计算最短路径&#34;&gt;#&lt;/a&gt; 使用 Dijkstra 算法计算最短路径&lt;/h5&gt;
&lt;p&gt;循环:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从可达节点中找到最近的，加入当前节点组&lt;/p&gt;
&lt;p&gt;更新其他节点距离&lt;/p&gt;
&lt;p&gt;当当前节点组为全部节点时退出&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;45路由协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#45路由协议&#34;&gt;#&lt;/a&gt; 4.5 路由协议&lt;/h3&gt;
&lt;p&gt;目的：使路由选择是可计算的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有巨量的 router&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;构建自治系统&lt;br /&gt;
自治系统内 OSPF&lt;br /&gt;
 自治系统间 BGP&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;451ospfopen-shortest-path-first&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#451ospfopen-shortest-path-first&#34;&gt;#&lt;/a&gt; 4.5.1OSPF(Open Shortest Path First)&lt;/h4&gt;
&lt;p&gt;开放最短路径优先&lt;/p&gt;
&lt;p&gt;使用 &amp;lt;u&amp;gt; 链路状态算法 &amp;lt;/u&amp;gt;&lt;/p&gt;
&lt;p&gt;通告散布到整个自治系统&lt;/p&gt;
&lt;h5 id=&#34;特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特点&#34;&gt;#&lt;/a&gt; 特点&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;安全性 - 所有 OSPF 信息经过鉴别&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;允许使用多条开销相同的路径&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对每条链路，为不同的服务类型设置多种开销度量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;集成的单播和多播支持&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在大域中使用层次 OSPF&lt;/p&gt;
&lt;blockquote&gt;
&lt;h6 id=&#34;层次ospf&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#层次ospf&#34;&gt;#&lt;/a&gt; 层次 OSPF&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;两级层次 - 本地 + 主干&lt;br /&gt;
仅在本地通告链路状态&lt;br /&gt;
每个节点具有详细的区域拓扑&lt;br /&gt;
仅知道其他区域中网络的方向&lt;/li&gt;
&lt;li&gt;区域边界路由器&lt;br /&gt;
总结到自己区域中网络的距离，向其他区域的边界路由器通告&lt;/li&gt;
&lt;li&gt;主干路由器&lt;br /&gt;
在主干范围内运行 OSPF 路由&lt;/li&gt;
&lt;li&gt;边界路由器&lt;br /&gt;
连接到其他自治系统&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;报文格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#报文格式&#34;&gt;#&lt;/a&gt; 报文格式&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/11/amGulnPEFWbYLeS.png&#34; alt=&#34;image-20211211150427755&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;452bgp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#452bgp&#34;&gt;#&lt;/a&gt; 4.5.2BGP&lt;/h4&gt;
&lt;p&gt;Border Gateway Protocol 边界网关协议&lt;/p&gt;
&lt;p&gt;提供功能&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;eBGP: 从相邻 AS (自治系统) 获得子网可达性信息&lt;/li&gt;
&lt;li&gt;iBGP: 向 AS 内部的所有路由器传播可达性信息&lt;br /&gt;
如下图&lt;br /&gt;
 &amp;lt; img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zMi5sb2xpLm5ldC8yMDIxLzEyLzExL29Kd2c2S05VY3Z1cjhJWS5wbmc=&#34;&gt;https://s2.loli.net/2021/12/11/oJwg6KNUcvur8IY.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211211150833119&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/li&gt;
&lt;li&gt;根据可达性信息和策略，决定到子网的 &amp;quot;好&amp;quot; 路由&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;允许子网向因特网其余部分通告它的存在&lt;/p&gt;
&lt;p&gt;两个 BGP 路由器通过半永久 TCP 连接交换 BGP 报文&lt;/p&gt;
&lt;p&gt;两个重要的属性&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AS-PATH&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;46icmp协议不考&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#46icmp协议不考&#34;&gt;#&lt;/a&gt; 4.6ICMP 协议 [不考]&lt;/h3&gt;
&lt;h3 id=&#34;47snmp协议不考&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#47snmp协议不考&#34;&gt;#&lt;/a&gt; 4.7SNMP 协议 [不考]&lt;/h3&gt;
&lt;h2 id=&#34;5-数据链路层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-数据链路层&#34;&gt;#&lt;/a&gt; 5. 数据链路层&lt;/h2&gt;
&lt;h3 id=&#34;51数据链路层的功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#51数据链路层的功能&#34;&gt;#&lt;/a&gt; 5.1 数据链路层的功能&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;将数据报从一个节点经过一条链路传输到相邻节点&lt;/p&gt;
&lt;p&gt;组帧 - 将数据报封装进帧，加上首部和尾部&lt;/p&gt;
&lt;p&gt;链路接入 - 控制信道接入&lt;/p&gt;
&lt;p&gt;相邻节点间可靠交付&lt;/p&gt;
&lt;p&gt;检错&lt;/p&gt;
&lt;p&gt;纠错&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;52差错控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#52差错控制&#34;&gt;#&lt;/a&gt; 5.2 差错控制&lt;/h3&gt;
&lt;p&gt;通过通信信道接收的数据和发送的数据不一致的现象 - 传输差错，简称差错&lt;/p&gt;
&lt;h4 id=&#34;521检错编码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#521检错编码&#34;&gt;#&lt;/a&gt; 5.2.1 检错编码&lt;/h4&gt;
&lt;p&gt;检错&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;接收方能够推断发生了错误，要求重传&lt;/p&gt;
&lt;p&gt;用于高可靠信道 - 光纤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;单比特奇偶校验&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;增加冗余位使码字中 1 的个数恒为奇数 / 偶数&lt;/p&gt;
&lt;p&gt;能够检测 &amp;lt;u&amp;gt; 奇数个 &amp;lt;/u &amp;gt; 比特差错&lt;/p&gt;
&lt;p&gt;分为垂直奇偶校验和水平奇偶校验&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因特网校验和&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;循环冗余校验&lt;br /&gt;
直接看例子&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/11/zCrwOTbYQKoB2cq.png&#34; alt=&#34;image-20211211155209760&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/11/xNYocvzXsdl7ViL.png&#34; alt=&#34;image-20211211155153041&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;522纠错编码不考&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#522纠错编码不考&#34;&gt;#&lt;/a&gt; 5.2.2 纠错编码 [不考]&lt;/h4&gt;
&lt;p&gt;纠错&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;接收方能够推断发送过来的原始数据是什么&lt;/p&gt;
&lt;p&gt;用于易出错信道&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二维奇偶校验 - 能够检测并纠正单比特&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;53介质访问控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#53介质访问控制&#34;&gt;#&lt;/a&gt; 5.3 介质访问控制&lt;/h3&gt;
&lt;h4 id=&#34;531信道划分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#531信道划分&#34;&gt;#&lt;/a&gt; 5.3.1 信道划分&lt;/h4&gt;
&lt;p&gt;将信道划分为较小的片&lt;/p&gt;
&lt;h5 id=&#34;时分多路复用tdm&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#时分多路复用tdm&#34;&gt;#&lt;/a&gt; 时分多路复用 TDM&lt;/h5&gt;
&lt;p&gt;将时间划分为一段段等长的时分复用帧，每个用户在每个镇中占用固定序号的时隙&lt;/p&gt;
&lt;p&gt;一目了然&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/11/ft9ioG7zkQbJyeS.png&#34; alt=&#34;image-20211211182642055&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;频分多路复用fdm&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#频分多路复用fdm&#34;&gt;#&lt;/a&gt; 频分多路复用 FDM&lt;/h5&gt;
&lt;p&gt;用户分配到频带后，在通信过程中始终占用该频带&lt;/p&gt;
&lt;p&gt;不同用户同时间占用不同的 (频率) 带宽资源&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/11/xsLCh2dnT7yPcBR.png&#34; alt=&#34;image-20211211182751192&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;波分多路复用wdm&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#波分多路复用wdm&#34;&gt;#&lt;/a&gt; 波分多路复用 WDM&lt;/h5&gt;
&lt;p&gt;就是光纤上的频分多路复用&lt;/p&gt;
&lt;h5 id=&#34;码分多路复用cdma&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#码分多路复用cdma&#34;&gt;#&lt;/a&gt; 码分多路复用 CDMA&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用于无线广播信道中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为每个用户分配唯一的码型，所有用户共享相同的频率，但每个用户用自己的码片序列对数据进行编码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;抗干扰 / 抗发现性较好&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编码信号 =(原始数据) X (码片序列)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解码 = 编码信号和码片序列的内积&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;码片序列&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#码片序列&#34;&gt;#&lt;/a&gt; 码片序列&lt;/h6&gt;
&lt;p&gt;每一比特时间划分为一个唯一的 m bit 码片序列&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要发送 1, 则发送码片序列&lt;br /&gt;
发送 0, 则发送二进制反码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;码片序列的正交关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#码片序列的正交关系&#34;&gt;#&lt;/a&gt; 码片序列的正交关系&lt;/h6&gt;
&lt;p&gt;两个不同站的码片序列正交&lt;/p&gt;
&lt;p&gt;也就是说，二者规格化内积为 0 (每位相互乘累积后为 0)&lt;/p&gt;
&lt;h6 id=&#34;工作原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#工作原理&#34;&gt;#&lt;/a&gt; 工作原理&lt;/h6&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/11/CtEYRu6b4eZy9BV.png&#34; alt=&#34;image-20211211183405643&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;532随机访问&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#532随机访问&#34;&gt;#&lt;/a&gt; 5.3.2 随机访问&lt;/h4&gt;
&lt;p&gt;不划分信道，允许冲突，全速率传输&lt;/p&gt;
&lt;p&gt;从冲突中恢复&lt;/p&gt;
&lt;h6 id=&#34;时隙alohaslotted-aloha-极限37效率&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#时隙alohaslotted-aloha-极限37效率&#34;&gt;#&lt;/a&gt; 时隙 ALOHA (slotted ALOHA)- 极限 37% 效率&lt;/h6&gt;
&lt;p&gt;假设&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所有帧长度相同&lt;/p&gt;
&lt;p&gt;时间划分为等长间隙，能传输一个帧&lt;/p&gt;
&lt;p&gt;结点仅在时隙开始时开始传输帧&lt;/p&gt;
&lt;p&gt;如果 2 + 结点同时传输，所有结点检测到冲突&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;工作原理&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有新帧，在下一个时隙传输&lt;/p&gt;
&lt;p&gt;无冲突，直接发送&lt;/p&gt;
&lt;p&gt;有冲突，在之后的每个后继时隙中以概率 p 重新传送&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;纯alohapure-aloha-极限18效率&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#纯alohapure-aloha-极限18效率&#34;&gt;#&lt;/a&gt; 纯 ALOHA (pure ALOHA)- 极限 18% 效率&lt;/h6&gt;
&lt;p&gt;削弱版时隙 ALOHA&lt;/p&gt;
&lt;p&gt;帧到达立马传输，有冲突则等待一段随机时间开始传输&lt;/p&gt;
&lt;h6 id=&#34;csma-载波侦听多路访问&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#csma-载波侦听多路访问&#34;&gt;#&lt;/a&gt; CSMA 载波侦听多路访问&lt;/h6&gt;
&lt;p&gt;思想&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在传输前侦听&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;信道空闲：传输整个帧&lt;/li&gt;
&lt;li&gt;信道忙；推迟传输 (下列三种推迟策略)
&lt;ol&gt;
&lt;li&gt;等待信道空闲 (1 - 坚持)&lt;/li&gt;
&lt;li&gt;等待随机时间 (非坚持)&lt;/li&gt;
&lt;li&gt;等待空闲，然后概率 p 发送 (p - 坚持)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;传播时延的冲突&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;信道非真正空闲&lt;/p&gt;
&lt;p&gt;争用期 / 冲突窗口：端到端往返时延 2&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;τ&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\tau&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.43056em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.1132em;&#34;&gt;τ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;只有争用期没检测到冲突才能肯定此次发送不会产生冲突&lt;/p&gt;
&lt;p&gt;每个发送数据帧的结点，需要经过争用期才能确保这次发送不会产生冲突&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;csmacd-载波侦听多路访问冲突检测&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#csmacd-载波侦听多路访问冲突检测&#34;&gt;#&lt;/a&gt; CSMA/CD 载波侦听多路访问 + 冲突检测&lt;/h6&gt;
&lt;p&gt;CD:Collision Detection&lt;/p&gt;
&lt;p&gt;使用 CSMA 协议进行数据发送&lt;/p&gt;
&lt;p&gt;发送过程中一直侦听信道 &amp;lt;u&amp;gt;(冲突检测)&amp;lt;/u&amp;gt;&lt;/p&gt;
&lt;p&gt;检测到冲突则立即停止发送，并等待一段随机时间，再侦听&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/11/Kj8XsLIzrTwmJih.png&#34; alt=&#34;image-20211211193703174&#34; /&gt;&lt;/p&gt;
&lt;p&gt;为了在发送时能检测到可能存在的冲突，CSMA.CD 要求所有数据帧都必须大于最小帧长 (2&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;τ&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\tau&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.43056em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.1132em;&#34;&gt;τ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; * 数据传输速率)&lt;/p&gt;
&lt;h6 id=&#34;csmaca&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#csmaca&#34;&gt;#&lt;/a&gt; CSMA/CA&lt;/h6&gt;
&lt;p&gt;IEEE802 无线局域网所用的多路访问协议，参考后续&lt;/p&gt;
&lt;h4 id=&#34;533轮流访问不考&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#533轮流访问不考&#34;&gt;#&lt;/a&gt; 5.3.3 轮流访问 [不考]&lt;/h4&gt;
&lt;p&gt;节点轮流发送，但有更多信息要发送的节点能够占用更 长的时间&lt;/p&gt;
&lt;h3 id=&#34;54局域网lan&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#54局域网lan&#34;&gt;#&lt;/a&gt; 5.4 局域网 (LAN)&lt;/h3&gt;
&lt;h4 id=&#34;541局域网的基本概念与体系结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#541局域网的基本概念与体系结构&#34;&gt;#&lt;/a&gt; 5.4.1 局域网的基本概念与体系结构&lt;/h4&gt;
&lt;p&gt;集中在一个地理区域中的计算机网络&lt;/p&gt;
&lt;p&gt;属性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;范围限制&lt;/li&gt;
&lt;li&gt;传输技术&lt;/li&gt;
&lt;li&gt;拓扑结构&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;ieee802参考模型-只相当于链路层和物理层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ieee802参考模型-只相当于链路层和物理层&#34;&gt;#&lt;/a&gt; IEEE802 参考模型 - 只相当于链路层和物理层&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/11/WNJSFu2D7a9b5Y3.png&#34; alt=&#34;image-20211211194132210&#34; /&gt;&lt;/p&gt;
&lt;p&gt;LLC 保证传输正确性&lt;/p&gt;
&lt;p&gt;MAC 解决共享信道访问&lt;/p&gt;
&lt;h4 id=&#34;542链路层寻址与arp协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#542链路层寻址与arp协议&#34;&gt;#&lt;/a&gt; 5.4.2 链路层寻址与 ARP 协议&lt;/h4&gt;
&lt;p&gt;MAC 地址 / LAN 地址 / 物理地址&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将数据报从一个接口传送到物理上相互连接的另一个接口&lt;/li&gt;
&lt;li&gt;网络层及以上用 IP 地址，链路层及以下用硬件地址&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;arp地址解析协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#arp地址解析协议&#34;&gt;#&lt;/a&gt; ARP: 地址解析协议&lt;/h5&gt;
&lt;p&gt;每个主机上设有 ARP 高速缓存，里面有所在局域网上各主机和路由器的 IP 地址到硬件地址的 &amp;lt;u&amp;gt; 映射表 &amp;lt;/u&amp;gt;&lt;/p&gt;
&lt;p&gt;A 想向 B 发数据，先查看 ARP 中有无 B 的 IP, 如果有，就查出它的硬件地址，再将其发送&lt;/p&gt;
&lt;p&gt;没有，则运行 ARP 来找到 B 的硬件地址&lt;/p&gt;
&lt;p&gt;即主机 A 向所有主机广播请求，目的主机对主机 A 直接回应，同时将主机 A 的地址映射到自己的高速缓存中&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/11/OkLXE5xsCpnF7KN.png&#34; alt=&#34;image-20211211194645026&#34; /&gt;&lt;/p&gt;
&lt;p&gt;ARP 四种情况&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;主机 -&amp;gt; 本网络上另一个主机         ARP 找到目的硬件地址&lt;/p&gt;
&lt;p&gt;主机 -&amp;gt; 另一个网络上的主机        ARP 找到本网络一个路由器地址&lt;/p&gt;
&lt;p&gt;路由器 -&amp;gt; 本网络主机					ARP 找到目的主机的硬件地址&lt;/p&gt;
&lt;p&gt;路由器 -&amp;gt; 另一个网络主机            ARP 找到本网络上另一个路由器硬件地址&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;543以太网与ieee8023&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#543以太网与ieee8023&#34;&gt;#&lt;/a&gt; 5.4.3 以太网与 IEEE802.3&lt;/h4&gt;
&lt;p&gt;星型拓扑结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;中心是交换机&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;节点间不冲突&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;以太网帧结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#以太网帧结构&#34;&gt;#&lt;/a&gt; 以太网帧结构&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/11/7JqZxaLi4CO51MA.png&#34; alt=&#34;image-20211211200110878&#34; /&gt;&lt;/p&gt;
&lt;p&gt;目的地址:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第一位 0: 单节点接收&lt;/p&gt;
&lt;p&gt;1: 被一组节点接收&lt;/p&gt;
&lt;p&gt;全 1: 广播&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;校验字段&lt;/p&gt;
&lt;p&gt;32 位 CRC 校验 (范围：目的地址，源地址，类型，数据)&lt;/p&gt;
&lt;p&gt;数据字段：最小长度为 46B, 小于 46 则填充，但这些填充不计入长度字段值中&lt;br /&gt;
最大长度为 1500B&lt;/p&gt;
&lt;p&gt;因此 Ethernet 帧最小长度 64B, 最大 1518B&lt;/p&gt;
&lt;h5 id=&#34;以太网特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#以太网特点&#34;&gt;#&lt;/a&gt; 以太网特点&lt;/h5&gt;
&lt;p&gt;不可信 (接收方不发送 ACK 之类的)&lt;/p&gt;
&lt;p&gt;无连接 (无握手)&lt;/p&gt;
&lt;p&gt;MAC 控制:&lt;/p&gt;
&lt;h5 id=&#34;以太网的csmacd&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#以太网的csmacd&#34;&gt;#&lt;/a&gt; 以太网的 CSMA/CD&lt;/h5&gt;
&lt;p&gt;将之前的强化冲突方式，设置为使用 &amp;lt;u&amp;gt; 二进制指数退避 &amp;lt;/u&amp;gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在第 m 号冲突后 NIC 选择&lt;ruby&gt; 0,1,2,...$2&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;{m-1&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;$ 中的随机一个数 K&lt;/li&gt;
&lt;li&gt;然后等待 K*512 bit 时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;544无线局域网与ieee80211不考&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#544无线局域网与ieee80211不考&#34;&gt;#&lt;/a&gt; 5.4.4 无线局域网与 IEEE802.11 [不考]&lt;/h4&gt;
&lt;p&gt;无线网的介质访问控制&lt;/p&gt;
&lt;p&gt;特点：无法获得冲突信息&lt;/p&gt;
&lt;p&gt;目的：避免冲突&lt;/p&gt;
&lt;p&gt;方式&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;物理层执行信道载波侦听&lt;/p&gt;
&lt;p&gt;信道空闲 -- 源节点等待 DIFS 后，仍然空闲，则发送一帧，然后等待 ACK 帧&lt;/p&gt;
&lt;p&gt;目的节点在收到正确的数据帧的 SIFS 时间后，向源节点发送 ACK 帧&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;csmaca-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#csmaca-2&#34;&gt;#&lt;/a&gt; CSMA/CA&lt;/h6&gt;
&lt;p&gt;允许发送端预订信道&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发送端发送请求帧到 AP&lt;/li&gt;
&lt;li&gt;AP 广播允许发送 (CTS) 的回复&lt;/li&gt;
&lt;li&gt;所有结点收到 CTS, 发送端发送&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;55数据链路层设备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#55数据链路层设备&#34;&gt;#&lt;/a&gt; 5.5 数据链路层设备&lt;/h3&gt;
&lt;h5 id=&#34;局域网交换机&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#局域网交换机&#34;&gt;#&lt;/a&gt; 局域网交换机&lt;/h5&gt;
&lt;p&gt;存储并转发以太网帧&lt;/p&gt;
&lt;p&gt;特征：对主机透明 (即 ip 地址什么的和它无关)&lt;/p&gt;
&lt;p&gt;自学习 -&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;收到对应接口分组后记录对应接口 MAC 地址在自己对应接口上&lt;/p&gt;
&lt;p&gt;如果发现目的接口没有，会洪泛 (将分组分发到所有接口上，等待回复)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;冲突域vs广播域&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#冲突域vs广播域&#34;&gt;#&lt;/a&gt; 冲突域 VS 广播域&lt;/h6&gt;
&lt;p&gt;冲突域；网络的一部分，在其中会发生帧冲突 (当两个设备同时发送数据报)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/09/PYFwpzouJ9VhBre.png&#34; alt=&#34;image-20211209105458295&#34; /&gt;&lt;/p&gt;
&lt;p&gt;广播域：包含了通过链路层广播能直接相互了解的所有设备&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/09/l7OfskCEuRYMqb6.png&#34; alt=&#34;image-20211209105941059&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;虚拟局域网-为了防止过多的广播信息引起不便&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#虚拟局域网-为了防止过多的广播信息引起不便&#34;&gt;#&lt;/a&gt; 虚拟局域网 -- 为了防止过多的广播信息引起不便&lt;/h5&gt;
&lt;p&gt;虚拟局域网 VLAN 是由一些局域网网段构成的与物理位置无关的逻辑组&lt;/p&gt;
&lt;p&gt;每一个 VLAN 的帧都有一个明确的标识符，指明发送这个帧的工作站是属于哪一个 VLAN。(在以太网帧中插入一个 4 字节的标识符，称为 VLAN 标记)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/09/ier7sUByQbkouxL.png&#34; alt=&#34;image-20211209110309425&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;6-物理层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-物理层&#34;&gt;#&lt;/a&gt; 6. 物理层&lt;/h2&gt;
&lt;h3 id=&#34;61通信基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#61通信基础&#34;&gt;#&lt;/a&gt; 6.1 通信基础&lt;/h3&gt;
&lt;h4 id=&#34;611数据通信系统的基本概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#611数据通信系统的基本概念&#34;&gt;#&lt;/a&gt; 6.1.1 数据通信系统的基本概念&lt;/h4&gt;
&lt;p&gt;物理层目标：在通信信道上传输原始比特&lt;/p&gt;
&lt;p&gt;确定与传输介质的接口的一些特性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;机械特性&lt;/li&gt;
&lt;li&gt;电气特性&lt;/li&gt;
&lt;li&gt;功能特性&lt;/li&gt;
&lt;li&gt;过程特性&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;612编码与调制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#612编码与调制&#34;&gt;#&lt;/a&gt; 6.1.2 编码与调制&lt;/h4&gt;
&lt;h4 id=&#34;613奈奎斯特定理和香农定理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#613奈奎斯特定理和香农定理&#34;&gt;#&lt;/a&gt; 6.1.3 奈奎斯特定理和香农定理&lt;/h4&gt;
&lt;h3 id=&#34;62物理层设备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#62物理层设备&#34;&gt;#&lt;/a&gt; 6.2 物理层设备&lt;/h3&gt;
&lt;h3 id=&#34;集线器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集线器&#34;&gt;#&lt;/a&gt; 集线器&lt;/h3&gt;
&lt;h2 id=&#34;7-综合&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7-综合&#34;&gt;#&lt;/a&gt; 7. 综合&lt;/h2&gt;
&lt;h3 id=&#34;71各层设备的广播域-冲突域及总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#71各层设备的广播域-冲突域及总结&#34;&gt;#&lt;/a&gt; 7.1 各层设备的广播域、冲突域及总结&lt;/h3&gt;
&lt;h3 id=&#34;72web访问全过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#72web访问全过程&#34;&gt;#&lt;/a&gt; 7.2Web 访问全过程&lt;/h3&gt;
</content>
        <category term="大三" scheme="http://example.com/categories/junior/" />
        <category term="计算机网络" scheme="http://example.com/categories/junior/computernetwork/" />
        <category term="计算机网络" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/" />
        <updated>2021-12-11T12:22:23.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/12/09/%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2/</id>
        <title>网络地址转换</title>
        <link rel="alternate" href="http://example.com/2021/12/09/%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2/"/>
        <content type="html">&lt;h3 id=&#34;网络地址转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络地址转换&#34;&gt;#&lt;/a&gt; 网络地址转换&lt;/h3&gt;
&lt;p&gt;目的：解决 ip 稀缺&lt;/p&gt;
&lt;p&gt;三个专用地址块&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/09/15aVHB4QMLxdjTC.png&#34; alt=&#34;image-20211118100015197&#34; /&gt;&lt;/p&gt;
&lt;p&gt;原理：本地网络中的所有计算机在访问 Internet 时使用同一个 IP 地址&lt;br /&gt;
，within the local network, computers use private addresses for&lt;br /&gt;
routing intramural traffic 在本地网络中，计算机使用专用地址&lt;br /&gt;
进行路由。对于目的地址是专用地址的数据报，路由器一律&lt;br /&gt;
不予转发。&lt;/p&gt;
&lt;p&gt;本质：通过端口号区分主机&lt;/p&gt;
&lt;h3 id=&#34;ipv6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ipv6&#34;&gt;#&lt;/a&gt; IPV6&lt;/h3&gt;
&lt;p&gt;同样是为了改变缺少 ip 地址的问题&lt;/p&gt;
&lt;p&gt;源 ip:128 位&lt;/p&gt;
&lt;p&gt;目的 ip:128 位&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/09/CaiYJWqQs4EG1UB.png&#34; alt=&#34;image-20211118111114068&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;隧道技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#隧道技术&#34;&gt;#&lt;/a&gt; 隧道技术&lt;/h3&gt;
&lt;p&gt;解决 ipv4 和 ipv6 共存&lt;/p&gt;
&lt;p&gt;ipv6 作为 ipv4 的 payload (数据) 发送&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/09/PxaInA3sEKMHGpF.png&#34; alt=&#34;image-20211118111549533&#34; /&gt;&lt;/p&gt;
</content>
        <category term="大三" scheme="http://example.com/categories/junior/" />
        <category term="计算机网络" scheme="http://example.com/categories/junior/computernetwork/" />
        <category term="网络地址" scheme="http://example.com/tags/%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80/" />
        <updated>2021-12-09T02:48:35.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/12/09/%E7%BD%91%E7%BB%9C%E5%B1%82/</id>
        <title>网络层</title>
        <link rel="alternate" href="http://example.com/2021/12/09/%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
        <content type="html">&lt;h1 id=&#34;网络层-控制平面&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络层-控制平面&#34;&gt;#&lt;/a&gt; 网络层 - 控制平面&lt;/h1&gt;
&lt;h2 id=&#34;路由算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#路由算法&#34;&gt;#&lt;/a&gt; 路由算法&lt;/h2&gt;
&lt;h6 id=&#34;产生路由表的算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#产生路由表的算法&#34;&gt;#&lt;/a&gt; 产生路由表的算法&lt;/h6&gt;
&lt;h3 id=&#34;图论抽象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#图论抽象&#34;&gt;#&lt;/a&gt; 图论抽象&lt;/h3&gt;
&lt;p&gt;Graph: G = &lt;strong&gt;(N,E)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;N&lt;/strong&gt; = set of routers = {u, v, w, x, y, z} 节点是&lt;strong&gt;路由器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;E&lt;/strong&gt; = set of links ={(u,v), (u,x), (v,x), (v,w), (x,w), (x,y), (w,y), (w,z), (y,z) }  边是&lt;strong&gt;物理链路&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;链路开销 Cost of link：时延、费用或拥塞等级 路径开销 Cost of path：c (x1 , x2 , x3 ,…, xp) = c (x1 ,x2 ) + c (x2 ,x3 ) + … +  c (xp-1 ,xp )&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;路由算法&lt;/strong&gt;：找到开销最小的路径 (路由器序列)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分散式&lt;/strong&gt;算法 -- 只知道和部分路径，通过和邻居交换信息&lt;/p&gt;
&lt;p&gt;典型就是下面这个算法&lt;/p&gt;
&lt;h3 id=&#34;距离向量路由算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#距离向量路由算法&#34;&gt;#&lt;/a&gt; 距离向量路由算法&lt;/h3&gt;
&lt;h4 id=&#34;描述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#描述&#34;&gt;#&lt;/a&gt; 描述&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;节点 x 维护距离向量&lt;/p&gt;
&lt;p&gt;Dx=[dx (y): yєN ]&lt;br /&gt;
(如果 y 不是 x 的邻居节点，则 dx (y)=∞, 否则 dx (y)= c (x,y))&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每个节点周期性向其邻居节点发送它自己的 距离向量，节点 x 保存其邻居节点的距离向量&lt;br /&gt;
 Dv = [dv (y): y є N ]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;n 当节点 x 接收到来自邻居的 新距离向量，它使用 B-F 方程更新自己的 DV :&lt;br /&gt;
Dx (y) ← minv {c(x,v) + Dv (y)} for each node y ∊ N&lt;br /&gt;
Bellman-Ford 方程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义&lt;br /&gt;
&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;d_x&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.84444em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; (y) = 从 x 到 y 的最小开销路径的开销，&lt;br /&gt;
c (x,v) = 从 x 到邻居节点 v 的链路的开销&lt;/li&gt;
&lt;li c(x,v)=&#34;&#34; +=&#34;&#34; dv=&#34;&#34; (y)=&#34;&#34;&gt;则 dx (y) = minv&lt;/li&gt;
&lt;li&gt;取值最小的节点对应最短路径中的&lt;strong&gt;下一跳&lt;/strong&gt; (只有一个地址)➜ 转发表&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​	示例&lt;br /&gt;
 &amp;lt; img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zMi5sb2xpLm5ldC8yMDIxLzEyLzA5L0hoSUNHVWFrcWZ0MnptMS5wbmc=&#34;&gt;https://s2.loli.net/2021/12/09/HhICGUakqft2zm1.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211122134953146&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;链路状态路由算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#链路状态路由算法&#34;&gt;#&lt;/a&gt; 链路状态路由算法・&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Discover its neighbors, learn their network address. &lt;strong&gt;发现邻居，学习它们的网络地址&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Measure the delay or cost to each of its neighbors. &lt;strong&gt;测量到每一个邻居的时延或开销&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Construct a packet (link state packet)telling all it has  just learned. &lt;strong&gt;构造一个分组 (链路状态分组) 来通 告其学习到的所有信息&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Send this packet to all other routers.  &lt;strong&gt;向所有路由器发送该分组&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compute the shortest path to every other router.  &lt;strong&gt;计算到其他路由器的最短路径&lt;/strong&gt;&lt;br /&gt;
使用 Dijkstra 算法计算最短路径&lt;br /&gt;
 &amp;lt; img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zMi5sb2xpLm5ldC8yMDIxLzEyLzA5L21DZEY0RzJ3Tzd2eHBVVy5wbmc=&#34;&gt;https://s2.loli.net/2021/12/09/mCdF4G2wO7vxpUW.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211122143134224&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;路由协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#路由协议&#34;&gt;#&lt;/a&gt; 路由协议&lt;/h2&gt;
&lt;p&gt;受到分组压力，单位需求的影响，产生了 as (自治系统)&lt;/p&gt;
&lt;p&gt;系统内可以用之前的算法，系统外 --? 自治系统间专门的路由协议&lt;/p&gt;
&lt;h3 id=&#34;openshortestpathfirst路由协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#openshortestpathfirst路由协议&#34;&gt;#&lt;/a&gt; O (pen) S (hortest) P (ath) F (irst) 路由协议&lt;/h3&gt;
&lt;h5 id=&#34;自治系统内路由-开放最短路径优先&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自治系统内路由-开放最短路径优先&#34;&gt;#&lt;/a&gt; 自治系统内路由 - 开放最短路径优先&lt;/h5&gt;
&lt;h6 id=&#34;使用的算法是链路状态算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用的算法是链路状态算法&#34;&gt;#&lt;/a&gt; 使用的算法是&lt;strong&gt;链路状态算法&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;OSPF 的特点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安全性 -- 报文经过签名鉴别&lt;/li&gt;
&lt;li&gt;使用多条开销相同的路径&lt;/li&gt;
&lt;li&gt;对每条链路，为不同的服务类型设置多种开销度量&lt;/li&gt;
&lt;li&gt;集成的单播和多播支持&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;层次ospf&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#层次ospf&#34;&gt;#&lt;/a&gt; 层次 ospf&lt;/h5&gt;
&lt;p&gt;自治系统内进一步再分&lt;/p&gt;
&lt;h3 id=&#34;bgp路由协议border-gateway-protocol&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bgp路由协议border-gateway-protocol&#34;&gt;#&lt;/a&gt; BGP 路由协议 (border gateway protocol)&lt;/h3&gt;
&lt;h5 id=&#34;-自治系统间路由&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#-自治系统间路由&#34;&gt;#&lt;/a&gt; - 自治系统间路由&lt;/h5&gt;
&lt;p&gt;算法 - 距离向量算法 (改名 --- 路径向量算法)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;eBGP: Obtain subnet reachability information from&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;neighboring ASes. 从相邻 AS 获得子网可达性信息&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;iBGP: Propagate reachability information to all AS-internal&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;routers. 向 AS 内部的所有路由器传播可达性信息&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Determine “good” routes to subnets based on reachability&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;information and policy. 根据可达性信息和策略，决定到子网&lt;/p&gt;
&lt;p&gt;的 “好” 路由&lt;/p&gt;
&lt;h2 id=&#34;icmp-the-internet-control&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#icmp-the-internet-control&#34;&gt;#&lt;/a&gt; •ICMP-The Internet Control&lt;/h2&gt;
&lt;p&gt;差错报告 -- 不可达网络 \ 主机 \ 端口 \ 协议&lt;/p&gt;
&lt;p&gt;回声请求&lt;/p&gt;
&lt;p&gt;trace route&lt;/p&gt;
&lt;p&gt;源主机从 ttl=1, 一点点开始发送更大的 ttl, 目的端口号设置为一个不可能到达的端口，&lt;/p&gt;
&lt;p&gt;当 ttl 超时时，该路由器发送一个 ICMP 报文到源主机，这样会获取路径上路由器的信息&lt;/p&gt;
&lt;p&gt;到达目的主机后，会返回一个端口不可达报文，探测结束&lt;/p&gt;
&lt;h2 id=&#34;message-protocol&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#message-protocol&#34;&gt;#&lt;/a&gt; Message Protocol&lt;/h2&gt;
&lt;h2 id=&#34;网络管理snmp协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络管理snmp协议&#34;&gt;#&lt;/a&gt; 网络管理 ——SNMP 协议&lt;/h2&gt;
</content>
        <category term="大三" scheme="http://example.com/categories/junior/" />
        <category term="计算机网络" scheme="http://example.com/categories/junior/computernetwork/" />
        <category term="网络层" scheme="http://example.com/tags/%E7%BD%91%E7%BB%9C%E5%B1%82/" />
        <updated>2021-12-09T02:48:15.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/12/09/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</id>
        <title>数据链路层</title>
        <link rel="alternate" href="http://example.com/2021/12/09/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
        <content type="html">&lt;h1 id=&#34;12_2_数据链路层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12_2_数据链路层&#34;&gt;#&lt;/a&gt; 12_2_数据链路层&lt;/h1&gt;
&lt;h2 id=&#34;1-数据链路层的基本功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-数据链路层的基本功能&#34;&gt;#&lt;/a&gt; 1. 数据链路层的基本功能&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;u&amp;gt; 将数据报从一个节点经过一条链路传输到相邻节点 &amp;lt;/u&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;组帧：将数据报封装进帧，加上首部和尾部&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;链路接入：如果共享媒体，控制信道接入，使用帧首部中的 “MAC” 地址标识源和目的地&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;相邻节点间的可靠交付，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;检错&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;纠错：接收方识别并纠正比特差错，而不需要重传&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;它放在哪？适配器 (网卡), 和主机系统总线相连&lt;/p&gt;
&lt;h2 id=&#34;2差错控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2差错控制&#34;&gt;#&lt;/a&gt; 2. 差错控制&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;通过通信信道接收的数据与发送的数据不一致的现象称为传输差错 (简称差错)。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;21检错编码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21检错编码&#34;&gt;#&lt;/a&gt; 2.1 检错编码&lt;/h3&gt;
&lt;h4 id=&#34;211单比特奇偶校验&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#211单比特奇偶校验&#34;&gt;#&lt;/a&gt; 2.1.1 单比特奇偶校验&lt;/h4&gt;
&lt;p&gt;奇偶校验码是一种通过增加冗余位使得码字中 “1” 的个数恒为奇数或偶数的编码方法&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/09/JEV1Ht24Sz6iWuk.png&#34; alt=&#34;image-20211202102617007&#34; /&gt;&lt;/p&gt;
&lt;p&gt;能力：能够检测单 (奇数) 个比特差错&lt;/p&gt;
&lt;h4 id=&#34;212internetchecksum-udp里讲过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#212internetchecksum-udp里讲过&#34;&gt;#&lt;/a&gt; 2.1.2InternetChecksum--UDP 里讲过&lt;/h4&gt;
&lt;h4 id=&#34;213循环冗余校验&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#213循环冗余校验&#34;&gt;#&lt;/a&gt; 2.1.3 循环冗余校验&lt;/h4&gt;
&lt;p&gt;原始数据：D&lt;/p&gt;
&lt;p&gt;校验位：长度 r,&lt;/p&gt;
&lt;p&gt;原始数据后补上 r 位 0,&lt;/p&gt;
&lt;p&gt;Generator: G:r+1 的长度&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/09/ofx3QTMktbhvgzR.png&#34; alt=&#34;image-20211202103409058&#34; /&gt;&lt;/p&gt;
&lt;p&gt;D 不断异或 G (其实是求余数), 最后剩下的为校验位&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zMi5sb2xpLm5ldC8yMDIxLzEyLzA5L0VzSUgxOVlLaGJTWFpxNy5wbmc=&#34;&gt;https://s2.loli.net/2021/12/09/EsIH19YKhbSXZq7.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211202103258900&amp;quot; style=&amp;quot;zoom:33%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;检测能力&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/09/QD8Eu6FTqJRkfwx.png&#34; alt=&#34;image-20211202103444659&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;214二维奇偶校验&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#214二维奇偶校验&#34;&gt;#&lt;/a&gt; 2.1.4 二维奇偶校验&lt;/h4&gt;
&lt;p&gt;二维奇偶校验能够检测并纠正单比特差错&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/09/dsNAQDYEWB54bO6.png&#34; alt=&#34;image-20211202103521291&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;22纠错编码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22纠错编码&#34;&gt;#&lt;/a&gt; 2.2 纠错编码&lt;/h3&gt;
&lt;h2 id=&#34;3介质访问控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3介质访问控制&#34;&gt;#&lt;/a&gt; 3. 介质访问控制&lt;/h2&gt;
&lt;p&gt;点对点 / 广播&lt;/p&gt;
&lt;h3 id=&#34;31信道划分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#31信道划分&#34;&gt;#&lt;/a&gt; 3.1 信道划分&lt;/h3&gt;
&lt;p&gt;将信道划分为较小的 “片” (时隙，频率，编码)&lt;/p&gt;
&lt;p&gt;为节点分配专用的片&lt;/p&gt;
&lt;h4 id=&#34;311频分多路复用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#311频分多路复用&#34;&gt;#&lt;/a&gt; 3.1.1 频分多路复用&lt;/h4&gt;
&lt;h4 id=&#34;322时分多路复用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#322时分多路复用&#34;&gt;#&lt;/a&gt; 3.2.2 时分多路复用、&lt;/h4&gt;
&lt;h4 id=&#34;313波分多路复用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#313波分多路复用&#34;&gt;#&lt;/a&gt; 3.1.3 波分多路复用&lt;/h4&gt;
&lt;h4 id=&#34;314码分多路访问&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#314码分多路访问&#34;&gt;#&lt;/a&gt; 3.1.4 码分多路访问&lt;/h4&gt;
&lt;h3 id=&#34;32随机访问&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#32随机访问&#34;&gt;#&lt;/a&gt; 3.2 随机访问&lt;/h3&gt;
&lt;p&gt;不划分信道，允许冲突&lt;/p&gt;
&lt;p&gt;从 “冲突” 中恢复&lt;/p&gt;
&lt;h4 id=&#34;321aloha协议-csma协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#321aloha协议-csma协议&#34;&gt;#&lt;/a&gt; 3.2.1ALOHA 协议、CSMA 协议、&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211202111307619.png&#34; alt=&#34;image-20211202111307619&#34; /&gt;&lt;/p&gt;
&lt;p&gt;传播时延的冲突:&lt;/p&gt;
&lt;p&gt;传播时延：传输距离 / 光速&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/09/oRzjkmdAZTFytSf.png&#34; alt=&#34;image-20211202111802943&#34; /&gt;&lt;/p&gt;
&lt;p&gt;端到端往返时延 2t 称为争用期，或冲突窗口&lt;/p&gt;
&lt;h4 id=&#34;322csmacd协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#322csmacd协议&#34;&gt;#&lt;/a&gt; 3.2.2CSMA/CD 协议&lt;/h4&gt;
&lt;p&gt;需要在发送完帧之前就能收到自己发送出去的数据，即帧的传输时延至少是数据在总线中的传播时延的 2 倍&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;em&gt;最小帧长 = 传播时延&lt;/em&gt; 2 &lt;em&gt;数据传输速率&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;例如，以太网的冲突窗口长度为 51.2µs，数据传输速&lt;/p&gt;
&lt;p&gt;率为 10Mbps，51.2µs 可以发送 512bit（64B）数据，因&lt;/p&gt;
&lt;p&gt;此，64B 是以太网的最短帧长度；&lt;/p&gt;
&lt;h4 id=&#34;csmaca协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#csmaca协议&#34;&gt;#&lt;/a&gt; 、CSMA/CA 协议&lt;/h4&gt;
&lt;h3 id=&#34;33轮流协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#33轮流协议&#34;&gt;#&lt;/a&gt; 3.3 轮流协议&lt;/h3&gt;
&lt;h4 id=&#34;331令牌传递协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#331令牌传递协议&#34;&gt;#&lt;/a&gt; 3.3.1 令牌传递协议&lt;/h4&gt;
&lt;h4 id=&#34;332轮询协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#332轮询协议&#34;&gt;#&lt;/a&gt; 3.3.2 轮询协议&lt;/h4&gt;
&lt;h2 id=&#34;4局域网&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4局域网&#34;&gt;#&lt;/a&gt; 4. 局域网&lt;/h2&gt;
&lt;h3 id=&#34;41局域网的基本概念与体系结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#41局域网的基本概念与体系结构&#34;&gt;#&lt;/a&gt; 4.1 局域网的基本概念与体系结构&lt;/h3&gt;
&lt;h3 id=&#34;42局域网寻址与arp协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#42局域网寻址与arp协议&#34;&gt;#&lt;/a&gt; 4.2 局域网寻址与 ARP 协议&lt;/h3&gt;
&lt;h3 id=&#34;43以太网与ieee-8023&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#43以太网与ieee-8023&#34;&gt;#&lt;/a&gt; 4.3 以太网与 IEEE 802.3&lt;/h3&gt;
&lt;h5 id=&#34;431以太网拓扑结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#431以太网拓扑结构&#34;&gt;#&lt;/a&gt; 4.3.1 以太网拓扑结构&lt;/h5&gt;
&lt;p&gt;90 年代前：总线型拓扑 (单冲突域)&lt;/p&gt;
&lt;p&gt;现在星形 (中心是交换机，节点之间不冲突，不需要 CSMA)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/09/MDJZpHrGhb3BewT.png&#34; alt=&#34;image-20211209100351905&#34; /&gt;&lt;/p&gt;
&lt;p&gt;4.3.2 以太网帧结构&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;4.3.3 以太网属性&lt;/p&gt;
&lt;p&gt;•connectionless: no handshaking between sending and receiving NICs&lt;/p&gt;
&lt;p&gt;连接之间没有握手&lt;/p&gt;
&lt;p&gt;•unreliable: receiving NIC doesn&#39;t send ACKs or NAKs to sending NIC&lt;/p&gt;
&lt;p&gt;就是说，如果没收到就直接扔了，不发消息&lt;/p&gt;
&lt;p&gt;以太网的 MAC Control&lt;/p&gt;
&lt;p&gt;CMSA/CD + 指数回避 (用来防止连续冲突)&lt;/p&gt;
&lt;h3 id=&#34;44无线局域网ieee-80211&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#44无线局域网ieee-80211&#34;&gt;#&lt;/a&gt; 4.4 无线局域网 (IEEE 802.11)&lt;/h3&gt;
&lt;p&gt;4.4.1 典型结构&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zMi5sb2xpLm5ldC8yMDIxLzEyLzA5LzZTRTkxbU1OQlZwcmdBaC5wbmc=&#34;&gt;https://s2.loli.net/2021/12/09/6SE91mMNBVprgAh.png&lt;/span&gt;&amp;quot; alt=&amp;quot;image-20211209102241124&amp;quot; style=&amp;quot;zoom:33%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;4.4.2 冲突控制&lt;/p&gt;
&lt;p&gt;CSMA/C(ollision)A(voidance)&lt;/p&gt;
&lt;p&gt;允许发送端预订信道&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发送端发送请求帧到 AP&lt;/li&gt;
&lt;li&gt;AP 广播允许发送 (CTS) 的回复&lt;/li&gt;
&lt;li&gt;所有结点收到 CTS, 发送端发送&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5数据链路层设备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5数据链路层设备&#34;&gt;#&lt;/a&gt; 5. 数据链路层设备&lt;/h2&gt;
&lt;h3 id=&#34;51局域网交换机&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#51局域网交换机&#34;&gt;#&lt;/a&gt; 5.1 局域网交换机&lt;/h3&gt;
&lt;p&gt;查看进入的 MAC 地址，然后转发给出链路&lt;/p&gt;
&lt;p&gt;**&amp;lt;u&amp;gt; 透明 &amp;lt;/u&amp;gt;&lt;strong&gt; 因此在转发的时候分组里&lt;/strong&gt; &amp;lt;u&amp;gt; 不会 &amp;lt;/u&amp;gt;** 有交换机的物理地址&lt;/p&gt;
&lt;p&gt;&amp;lt;u&amp;gt;&lt;strong&gt; 自学习&lt;/strong&gt; &amp;lt;/u&amp;gt;:&lt;/p&gt;
&lt;p&gt;收到对应接口分组后记录对应接口 MAC 地址在自己对应接口上&lt;/p&gt;
&lt;p&gt;如果发现目的接口没有，会洪泛 (将分组分发到所有接口上，等待回复)&lt;/p&gt;
&lt;p&gt;5.2 冲突域 vs 广播域&lt;/p&gt;
&lt;p&gt;冲突域&lt;/p&gt;
&lt;p&gt;当两个设备在同时发送分组的时候会冲突&lt;/p&gt;
&lt;p&gt;下面每个圈都是冲突域&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/09/PYFwpzouJ9VhBre.png&#34; alt=&#34;image-20211209105458295&#34; /&gt;&lt;/p&gt;
&lt;p&gt;广播&lt;/p&gt;
&lt;p&gt;通过广播能发到的一堆设备&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/09/l7OfskCEuRYMqb6.png&#34; alt=&#34;image-20211209105941059&#34; /&gt;&lt;/p&gt;
&lt;p&gt;虚拟局域网 (为了防止过多的广播信息引起不便)&lt;/p&gt;
&lt;p&gt;虚拟局域网 VLAN 是由一些局域网网段构成的与物理位置无关的逻辑组&lt;/p&gt;
&lt;p&gt;每一个 VLAN 的帧都有一个明确的标识符，指明发送这个帧的工作站是属于哪一个 VLAN。(在以太网帧中插入一个 4 字节的标识符，称为 VLAN 标记)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/09/ier7sUByQbkouxL.png&#34; alt=&#34;image-20211209110309425&#34; /&gt;&lt;/p&gt;
</content>
        <category term="大三" scheme="http://example.com/categories/junior/" />
        <category term="计算机网络" scheme="http://example.com/categories/junior/computernetwork/" />
        <category term="计网" scheme="http://example.com/tags/%E8%AE%A1%E7%BD%91/" />
        <updated>2021-12-09T02:48:01.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/12/07/%E5%A4%8D%E4%B9%A0/</id>
        <title>21/12/6 软件体系结构复习</title>
        <link rel="alternate" href="http://example.com/2021/12/07/%E5%A4%8D%E4%B9%A0/"/>
        <content type="html">&lt;h1 id=&#34;复习&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#复习&#34;&gt;#&lt;/a&gt; 复习&lt;/h1&gt;
&lt;h2 id=&#34;1基本概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1基本概念&#34;&gt;#&lt;/a&gt; 1. 基本概念&lt;/h2&gt;
&lt;h3 id=&#34;软件体系结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件体系结构&#34;&gt;#&lt;/a&gt; 软件体系结构&lt;/h3&gt;
&lt;p&gt;系统的基本组织结构，包括系统构成要素，这些构成要素之间以及与环境之间的关系，系统设计及演化时所应遵循的原则&lt;/p&gt;
&lt;h3 id=&#34;什么设计模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么设计模式&#34;&gt;#&lt;/a&gt; 什么设计模式？&lt;/h3&gt;
&lt;h6 id=&#34;是一套被反复使用多数人知晓的经过分类编目的代码设计经验的总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#是一套被反复使用多数人知晓的经过分类编目的代码设计经验的总结&#34;&gt;#&lt;/a&gt; 是一套被反复使用，多数人知晓的，经过分类编目的，代码设计经验的总结.&lt;/h6&gt;
&lt;h3 id=&#34;为什么要用设计模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么要用设计模式&#34;&gt;#&lt;/a&gt; 为什么要用设计模式？&lt;/h3&gt;
&lt;p&gt;为了 &amp;lt;u&amp;gt; 可重用代码 &amp;lt;/u&amp;gt;, 让代码更容易 &amp;lt; u &amp;gt; 被他人理解 &amp;lt;/u&amp;gt;, 保证 &amp;lt; u &amp;gt; 代码可靠性 &amp;lt;/u&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;非功能需求有哪些含义是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#非功能需求有哪些含义是什么&#34;&gt;#&lt;/a&gt; 非功能需求有哪些？，含义是什么？&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;性能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可扩展性 / 伸缩性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可维护性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可用性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安全性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;业务质量&lt;br /&gt;
成本，周期，投入的人力，需要的资源&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;性能需求：用户在软件响应速度，结果精度，运行时资源消耗量等方面的要求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可靠性需求：用户在软件失效的频率，严重程度，易恢复性，以及故障可预测性等方面的要求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;易用性要求：用户要求在界面的易用性，美观性，以及对面向用户的文档和培训资料等方面的要求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安全性需求：用户在身份认证，授权控制，私密性等方面的要求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行环境约束：用户对软件系统运行环境的要求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;外部接口：用户对待开发的软件系统与其他软件系统或硬件设备之间的接口的要求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可保障性要求：用户在软件可配置性，可扩展性，可维护性，可移植性方面的要求&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;编程的三个层次&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编程的三个层次&#34;&gt;#&lt;/a&gt; 编程的三个层次？&lt;/h3&gt;
&lt;p&gt;针对实现编程&lt;/p&gt;
&lt;p&gt;Dog d = new Dog();&lt;/p&gt;
&lt;p&gt;d.bark();&lt;/p&gt;
&lt;p&gt;针对接口 / 超类型编程&lt;/p&gt;
&lt;p&gt;Animal animal = new Dog();&lt;/p&gt;
&lt;p&gt;animal.makeSound();&lt;/p&gt;
&lt;p&gt;运行时才指定具体实现的对象&lt;/p&gt;
&lt;p&gt;a=getAnimal();&lt;/p&gt;
&lt;p&gt;a.makeSound();&lt;/p&gt;
&lt;h3 id=&#34;设计模式的三大原则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设计模式的三大原则&#34;&gt;#&lt;/a&gt; 设计模式的三大原则&lt;/h3&gt;
&lt;h6 id=&#34;单一职责&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#单一职责&#34;&gt;#&lt;/a&gt; 单一职责&lt;/h6&gt;
&lt;p&gt;一个类只负责一个功能领域中相应的职责，&lt;/p&gt;
&lt;h6 id=&#34;依赖倒置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#依赖倒置&#34;&gt;#&lt;/a&gt; 依赖倒置&lt;/h6&gt;
&lt;p&gt;针对接口编程，而非针对实现编程&lt;/p&gt;
&lt;p&gt;即程序中所有的依赖关系都是终止与抽象类或者直接接口.&lt;/p&gt;
&lt;h6 id=&#34;开闭原则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#开闭原则&#34;&gt;#&lt;/a&gt; 开闭原则&lt;/h6&gt;
&lt;p&gt;对拓展开放，对修改关闭&lt;/p&gt;
&lt;h6 id=&#34;面向对象的三大原则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面向对象的三大原则&#34;&gt;#&lt;/a&gt; 面向对象的三大原则&lt;/h6&gt;
&lt;h2 id=&#34;软件体系结构-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件体系结构-2&#34;&gt;#&lt;/a&gt; 软件体系结构&lt;/h2&gt;
&lt;h3 id=&#34;分层风格&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分层风格&#34;&gt;#&lt;/a&gt; 分层风格&lt;/h3&gt;
&lt;p&gt;指将软件设计成层次结构，每个层为其上层服务，同时又是其下层的客户，不允许隔层调用&lt;/p&gt;
&lt;p&gt;优点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;层次结构 支持基于随着层次不断增加而不断抽象的设计。能将一个复杂的问题分一系列从初等的与硬件相关的功能到可以被用户使用的高级功能.&lt;/li&gt;
&lt;li&gt;支持更新。每层只和两个层交互，因此，在接口不变的前提下，可以单独修改或更换某一层的某些组件而不影响其他层.&lt;/li&gt;
&lt;li&gt;支持复用.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;缺点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不是什么系统都容易被组织成层次结构&lt;/li&gt;
&lt;li&gt;有时层次结构的逻辑上的较高层级和较低层级会有比较紧密的耦合&lt;/li&gt;
&lt;li&gt;正确的层次抽象往往可能很困难.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;管道-过滤器风格&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#管道-过滤器风格&#34;&gt;#&lt;/a&gt; 管道 - 过滤器风格&lt;/h3&gt;
&lt;p&gt;每个过滤器都有一组输入和输出，组件读入输入数据流，经过数据处理，然后产生输出数据流.&lt;/p&gt;
&lt;p&gt;系统由负责运送数据的管道和负责对数据进行处理的过滤器组成&lt;/p&gt;
&lt;p&gt;优点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;高内聚低耦合&lt;/li&gt;
&lt;li&gt;允许设计者将整个系统的输入 / 输出行为看做是多个过滤器行为的简单合成&lt;/li&gt;
&lt;li&gt;支持软件重用&lt;/li&gt;
&lt;li&gt;系统维护和增强系统性能简单&lt;/li&gt;
&lt;li&gt;允许对一些如吞吐量，死锁等属性的分析&lt;/li&gt;
&lt;li&gt;支持并发&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;缺点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;导致进程称为批处理结构&lt;/li&gt;
&lt;li&gt;不适合处理交互应用&lt;/li&gt;
&lt;li&gt;因为每个过滤器上都增加了解析和合成数据的工作，因此系统性能下滑，&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;主程序-子程序风格&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主程序-子程序风格&#34;&gt;#&lt;/a&gt; 主程序 - 子程序风格&lt;/h3&gt;
&lt;p&gt;采取分而治之策略，将一个复杂的问题分解为多个独立的字问题&lt;/p&gt;
&lt;h5 id=&#34;自顶向下功能化设计思想结构化设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自顶向下功能化设计思想结构化设计&#34;&gt;#&lt;/a&gt; 自顶向下功能化设计思想 (结构化设计)&lt;/h5&gt;
&lt;p&gt;从功能需求出发，将一个整体问题分解为多个子问题，然后将子问题划分为几个更小的子问题，直到不可划分为止&lt;/p&gt;
&lt;h6 id=&#34;优点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#优点&#34;&gt;#&lt;/a&gt; 优点&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;逻辑设计与物理设计分开&lt;/li&gt;
&lt;li&gt;开发过程中形成一套规范化的文档，以便后期修改和维护&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;适用于组织相对稳定，业务处理过程规范，需求明确且在一定时期内不会发生大的变化的大型复杂系统的开发.&lt;/p&gt;
&lt;p&gt;缺点：开发周期长，系统难以适应环境的变化及开发过程复杂繁琐&lt;/p&gt;
&lt;p&gt;功能演化困难，显示中的系统功能不容易描述，功能化设计丢掉了数据与数据结构，产生的可复用代码少.&lt;/p&gt;
&lt;h3 id=&#34;面向对象软件体系结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面向对象软件体系结构&#34;&gt;#&lt;/a&gt; 面向对象软件体系结构&lt;/h3&gt;
&lt;p&gt;系统看做由一些对象的集合构成，消息从一个对象发送到另外一个对象。每个对象都有其相关的功能&lt;/p&gt;
&lt;p&gt;对象是一个具有状态和行为的实体。一个对象存储它的状态在域中，面向对象设计隐藏对象的内部状态，并且要求所有对象之间的交互都通过该对象的方法，这叫做数据封装，是面向对象编程的基本原则.&lt;/p&gt;
&lt;p&gt;面向对象设计的特点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;封装性，限制对特定信息的访问&lt;/li&gt;
&lt;li&gt;继承性，共享同一个功能定义&lt;/li&gt;
&lt;li&gt;动态绑定性：在程序运行前，不知道创建哪个类的对象，运行时才动态生成&lt;/li&gt;
&lt;li&gt;复用和可维护性：因为封装与局部化&lt;/li&gt;
&lt;li&gt;系统功能通过对象服务表示：对象的接口提供了一系列的方法.&lt;/li&gt;
&lt;li&gt;共享数据区域被取消&lt;/li&gt;
&lt;li&gt;对象可以是分布的。通过函数或者方法调用互相交互.&lt;/li&gt;
&lt;li&gt;对象是对现实世界的抽象并且可以自己管理自己.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;优缺点&lt;/p&gt;
&lt;p&gt;优点:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;容易维护&lt;/li&gt;
&lt;li&gt;可复用性好&lt;/li&gt;
&lt;li&gt;映射现实世界&lt;/li&gt;
&lt;li&gt;容易对一个系统进行剖分&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;缺点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;占用欧冠内存较大。因为每个新被创建的对象都必须占用一块内存，而面向对象程序中，往往有大量对象被创建&lt;/li&gt;
&lt;li&gt;一个对象要和另外一个对象交互，该对象必须知道另外一个对象的身份，包括对象名，方法名和参数类型等.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;基于共享数据的事件风格&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基于共享数据的事件风格&#34;&gt;#&lt;/a&gt; 基于共享数据的事件风格&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;系统中的每个组件可以注册一种事件&lt;/li&gt;
&lt;li&gt;当一个组件要发布事件时，该组件可以广播一个或多个事件到事件空间&lt;/li&gt;
&lt;li&gt;每当一个事件被广播了，系统将负责自动调用那些已经注册了该事件的组件或者过程，被调用的组件将运行.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2设计模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2设计模式&#34;&gt;#&lt;/a&gt; 2. 设计模式&lt;/h2&gt;
&lt;h3 id=&#34;mvc模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mvc模式&#34;&gt;#&lt;/a&gt; mvc 模式&lt;/h3&gt;
&lt;p&gt;model 包含核心数据和功能，独立于输入行为和输出表示&lt;/p&gt;
&lt;p&gt;View 将模型中的数据显示给用户&lt;/p&gt;
&lt;p&gt;Controller 处理用户输入，如果用户通过一个 view 的 controller 改变了 model, 其他 controller 必须反映出该改变，即当数据发生变化的时候，model 负责同志所有的 view, 告诉他们数据已经改变了.(观察者模式，model 对象是被观察者，controller 是观察者)&lt;/p&gt;
&lt;h4 id=&#34;优缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#优缺点&#34;&gt;#&lt;/a&gt; 优缺点&lt;/h4&gt;
&lt;p&gt;优点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对于同一个模型，可以有不同的视图和控制器，一遍提供给用户不同类型的用户图形界面&lt;/li&gt;
&lt;li&gt;改变 - 传播机制保证了模型在改变的同时自动刷新所有的视图&lt;/li&gt;
&lt;li&gt;mvc 体系结构的设计使的改变图形界面非常容易，适合业务逻辑较少改变，而图形界面需要经常改变的应用&lt;/li&gt;
&lt;li&gt;全部的核心数据和核心功能都包含在模型中，很容易对核心的应用进行测试&lt;/li&gt;
&lt;li&gt;可拓展性比较好&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;命令模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命令模式&#34;&gt;#&lt;/a&gt; 命令模式&lt;/h3&gt;
&lt;p&gt;三个部件&lt;/p&gt;
&lt;p&gt;客户程序&lt;/p&gt;
&lt;p&gt;调用者程序&lt;/p&gt;
&lt;p&gt;被调用者程序&lt;/p&gt;
&lt;p&gt;解除调用者类与被调用者类的耦合 -- 为响应客户新请求的行动创建一个抽象&lt;/p&gt;
&lt;p&gt;client 对象负责初始化 Command 对象，并且提供将来要调用的方法的全部信息&lt;/p&gt;
&lt;p&gt;Invoker 决定什么时候调用所要调用的方法&lt;/p&gt;
&lt;p&gt;receiver 是含有索要调用方法的代码的实例&lt;/p&gt;
&lt;h3 id=&#34;3期末复习&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3期末复习&#34;&gt;#&lt;/a&gt; 3. 期末复习&lt;/h3&gt;
</content>
        <category term="大三" scheme="http://example.com/categories/junior/" />
        <category term="软件" scheme="http://example.com/categories/junior/software/" />
        <category term="软件体系结构" scheme="http://example.com/tags/%E8%BD%AF%E4%BB%B6%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/" />
        <updated>2021-12-07T14:09:47.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/12/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
        <title>21/12/6 软件体系结构复习-设计模式</title>
        <link rel="alternate" href="http://example.com/2021/12/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
        <content type="html">&lt;h3 id=&#34;策略模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#策略模式&#34;&gt;#&lt;/a&gt; 策略模式&lt;/h3&gt;
&lt;h6 id=&#34;基本原则责任分离高内聚低耦合&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本原则责任分离高内聚低耦合&#34;&gt;#&lt;/a&gt; 基本原则：责任分离 + 高内聚低耦合&lt;/h6&gt;
&lt;h4 id=&#34;各部分组成及说明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#各部分组成及说明&#34;&gt;#&lt;/a&gt; 各部分组成及说明&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;strategy: 定义了一个共同的接口，所有的具体算法类实现这个接口。换进该类 context 调用这个接口调用具体的算法类&lt;/li&gt;
&lt;li&gt;ConcreteStragety 封装了具体的算法，实现统一个几口&lt;/li&gt;
&lt;li&gt;Context 环境类。用于配置一个具体的算法策略对象，维持一个策略接口类型的参考，并且可以定义一个让接口 Strategy 的具体对象访问的接口 (可省略)&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;使用策略模式的情况&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用策略模式的情况&#34;&gt;#&lt;/a&gt; 使用策略模式的情况&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;当有多个行为上不同但是相关的类存在.&lt;/li&gt;
&lt;li&gt;当某个算法使用用户不该知道的数据时，使用策略模式可以将算法实现细节隐藏起来.&lt;/li&gt;
&lt;li&gt;当一个类有多种行为，这些行为以大块的条件语句实现时，可以将这些条件块移入他们自己的 Strategy 类中&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;使用策略模式的出发点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用策略模式的出发点&#34;&gt;#&lt;/a&gt; 使用策略模式的出发点&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;将一组相关的算法封装为各个策略分支，从而将策略分支相关的代码隐藏起来&lt;/li&gt;
&lt;li&gt;提升程序的可拓展性&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;优点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#优点&#34;&gt;#&lt;/a&gt; 优点&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;得到一系列可服用的算法，这些算法继承一个共同的抽象类，因此公有的功能可以放到超类中&lt;/li&gt;
&lt;li&gt;将不同算法封装在不同的策略子类中，使逻辑更加清晰，各个算法可以独立地变化&lt;/li&gt;
&lt;li&gt;是功能改变或拓展变得更容易&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;创建型模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建型模式&#34;&gt;#&lt;/a&gt; 创建型模式&lt;/h2&gt;
&lt;h3 id=&#34;工厂模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#工厂模式&#34;&gt;#&lt;/a&gt; 工厂模式&lt;/h3&gt;
&lt;h4 id=&#34;简单工厂&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简单工厂&#34;&gt;#&lt;/a&gt; 简单工厂&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdn.net/20180609213904662&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;各组成部分的功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#各组成部分的功能&#34;&gt;#&lt;/a&gt; 各组成部分的功能&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;Creater 核心，包含应用程序锁需要的业务逻辑。同时负责委托工厂生产对象&lt;/li&gt;
&lt;li&gt;Product 接口 / 抽象类 是具体子类的超类 / 接口&lt;/li&gt;
&lt;li&gt;ConcreteProduct 实现 Product 接口 / 继承 Product 抽象类&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;优点-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#优点-2&#34;&gt;#&lt;/a&gt; 优点&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;工厂方法包含从一个类的结构中选择初始类的业务逻辑&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;客户类不直接创建产品类的对象，值作为对象的消费者&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实现了责任分离&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果有新产品子类加入，不必修改客户类 (前提是客户类不用新产品)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因为 1, 所以客户类不需要繁杂的逻辑判断&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缺点&#34;&gt;#&lt;/a&gt; 缺点&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;增加产品类时，要修改工厂类&lt;/li&gt;
&lt;li&gt;因为工厂类的工厂方法是静态的，所以工厂类中的方法不能被继承，因此只能承载一个单独的类群，而不是一个有多层结构的类&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;为了解决简单工厂的缺点-工厂方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为了解决简单工厂的缺点-工厂方法&#34;&gt;#&lt;/a&gt; 为了解决简单工厂的缺点 --- 工厂方法&lt;/h6&gt;
&lt;h4 id=&#34;工厂方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#工厂方法&#34;&gt;#&lt;/a&gt; 工厂方法&lt;/h4&gt;
&lt;h6 id=&#34;核心思想将简单工厂中单一的工厂类改写成一个层次类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#核心思想将简单工厂中单一的工厂类改写成一个层次类&#34;&gt;#&lt;/a&gt; 核心思想：将简单工厂中单一的工厂类改写成一个层次类&lt;/h6&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211114142203065.png&amp;quot; alt=&amp;quot;image-20211114142203065&amp;quot; style=&amp;quot;zoom: 50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;类图解释&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类图解释&#34;&gt;#&lt;/a&gt; 类图解释&lt;/h5&gt;
&lt;p&gt;Creater: 接口，含有一个 factory 方法，然后可以用和产品类相同的结构产生创建者类结构，其中包含 CreaterA 和 CreaterB&lt;/p&gt;
&lt;p&gt;CreaterA/B: 负责创建对应的 ProductA 和 ProductB 的对象&lt;/p&gt;
&lt;h5 id=&#34;和简单工厂的相同之处&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#和简单工厂的相同之处&#34;&gt;#&lt;/a&gt; 和简单工厂的相同之处&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;方法模式一样，工厂方法也返回一个属于父类 Product 类型的对象，客户不必知道返回对象的具体类型&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;和简单工厂的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#和简单工厂的区别&#34;&gt;#&lt;/a&gt; 和简单工厂的区别&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;中心不同。工厂方法的中心是抽象工厂类 / 接口，而简单工厂方法的中心是一个实的工厂类&lt;br /&gt;
在简单工厂的工厂方法是静态的，而工厂方法是动态的&lt;/li&gt;
&lt;li&gt;简单工厂方法不支持开闭原则。而工厂方法支持.&lt;br /&gt;
 简单工厂增加产品类：在工厂类中也应增加条件语句&lt;br /&gt;
工厂方法增加产品类：在 Product 类的结构体重增加一个实体，在工厂类层次结构体中增加一个相应的能产生该新产品对象的实类&lt;/li&gt;
&lt;li&gt;工厂方法工厂类不必包含创建对象的逻辑判断&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;使用工厂方法的情况&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用工厂方法的情况&#34;&gt;#&lt;/a&gt; 使用工厂方法的情况&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;创建某些类的对象的逻辑比较复杂，并且有很多条件分支&lt;/li&gt;
&lt;li&gt;一个类不能准确预知它要创建一个层次类中哪个子类的对象&lt;/li&gt;
&lt;li&gt;一个类使用子类决定要创建的对象&lt;/li&gt;
&lt;li&gt;需要封装创建类的对象的逻辑，使这些逻辑局部化&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;抽象工厂模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#抽象工厂模式&#34;&gt;#&lt;/a&gt; 抽象工厂模式&lt;/h4&gt;
&lt;h5 id=&#34;类图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类图&#34;&gt;#&lt;/a&gt; 类图&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;G:%5CApp%5CQQ%5CQQ_Chat_File%5C1335894629%5CFileRecv%5CMobileFile%5CIMG_20211114_144057_edit_205109997971306.jpg&#34; alt=&#34;IMG_20211114_144057_edit_205109997971306&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;抽象工厂模式中包含&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#抽象工厂模式中包含&#34;&gt;#&lt;/a&gt; 抽象工厂模式中包含&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;一系列互相有关联的产品类，(有相同的结构)&lt;/li&gt;
&lt;li&gt;一系列实的工厂类，实现由抽象工厂提供的接口。他们各自生产一组相关的产品类对象&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;当客户对象要从一个相关的产品组中创建一个对象而没有必要知道到底创建哪个对象时使用抽象工厂&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#当客户对象要从一个相关的产品组中创建一个对象而没有必要知道到底创建哪个对象时使用抽象工厂&#34;&gt;#&lt;/a&gt; 当客户对象要从一个相关的产品组中创建一个对象，而没有必要知道到底创建哪个对象时使用抽象工厂&lt;/h6&gt;
&lt;h6 id=&#34;抽象工厂方法不符合开闭原则-增加一个新产品层次类则必须在每个工厂实类中增加方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#抽象工厂方法不符合开闭原则-增加一个新产品层次类则必须在每个工厂实类中增加方法&#34;&gt;#&lt;/a&gt; 抽象工厂方法不符合开闭原则 -- 增加一个新产品层次类，则必须在每个工厂实类中增加方法&lt;/h6&gt;
&lt;h3 id=&#34;装饰者模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#装饰者模式&#34;&gt;#&lt;/a&gt; 装饰者模式&lt;/h3&gt;
&lt;p&gt;提供一个比继承更加灵活的方案&lt;/p&gt;
&lt;p&gt;类图&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211114145247937.png&#34; alt=&#34;image-20211114145247937&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;访问者模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#访问者模式&#34;&gt;#&lt;/a&gt; 访问者模式&lt;/h3&gt;
&lt;h6 id=&#34;解决问题-对一个已经完成设计与diamante编写的类的层次结构进行功能修改或增加新功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决问题-对一个已经完成设计与diamante编写的类的层次结构进行功能修改或增加新功能&#34;&gt;#&lt;/a&gt; 解决问题 -- 对一个已经完成设计与 diamante 编写的类的层次结构进行功能修改或增加新功能&lt;/h6&gt;
&lt;p&gt;&lt;img data-src=&#34;G:%5CApp%5CQQ%5CQQ_Chat_File%5C1335894629%5CFileRecv%5CMobileFile%5CIMG_20211114_150707.jpg&#34; alt=&#34;IMG_20211114_150707&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;类图解释-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类图解释-2&#34;&gt;#&lt;/a&gt; 类图解释&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;VIsitor: 为每个 element 的类声明了一个访问操作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;concreteVisitor: 实现 Visitor 声明的运算&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Element: 定义了一些基本的方法，包含提供基本数据的方法.&lt;br /&gt;
 重要的是，它的子类必须定义一个接收者方法，为被访问者对象和访问者对象之间提供接口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ConcreteElement : 具体的 Element 的子类&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ObjectStructure 提供一个高层接口，允许访问者访问 Element 的子类., 提供一个访问列表&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;使用访问者模式的情况&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用访问者模式的情况&#34;&gt;#&lt;/a&gt; 使用访问者模式的情况&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;当一个对象的结构中，包含有多种类型的具有不同接口的对象，且用户要在这些对象上进行依赖于具体的类的运算&lt;/li&gt;
&lt;li&gt;当有多个不同的并且互不相关的运算将作用域这些对象上，且用户不希望这些运算混淆这些类时&lt;/li&gt;
&lt;li&gt;当对象的数据类型很少改变，但需要经常改变操作或增加新操作的情况下.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;状态模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#状态模式&#34;&gt;#&lt;/a&gt; 状态模式&lt;/h2&gt;
&lt;p&gt;将不同状态下的行为封装在不同的类中，每个类代表一个状态&lt;/p&gt;
&lt;p&gt;使用场景:&lt;/p&gt;
&lt;p&gt;当一个类依赖于状态，那么程序员在描述该对象的类中通常会使用很多条件语句，&lt;br /&gt;
 这时，使用状态模式可以有效消除条件语句并使得状态转换非常清楚&lt;/p&gt;
&lt;h6 id=&#34;gang-of-four的定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gang-of-four的定义&#34;&gt;#&lt;/a&gt; GANG OF FOUR 的定义:&lt;/h6&gt;
&lt;h6 id=&#34;允许一个对象在其内部状态改变时改变其行为这个对象看起来似乎修改了它的类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#允许一个对象在其内部状态改变时改变其行为这个对象看起来似乎修改了它的类&#34;&gt;#&lt;/a&gt; 允许一个对象在其内部状态改变时，改变其行为。这个对象看起来似乎修改了它的类&lt;/h6&gt;
&lt;h6 id=&#34;类图-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类图-2&#34;&gt;#&lt;/a&gt; 类图&lt;/h6&gt;
&lt;p&gt;&lt;img data-src=&#34;G:%5CApp%5CQQ%5CQQ_Chat_File%5C1335894629%5CFileRecv%5CMobileFile%5CIMG_20211121_185300.jpg&#34; alt=&#34;IMG_20211121_185300&#34; /&gt;&lt;/p&gt;
&lt;p&gt;各组件描述:&lt;/p&gt;
&lt;p&gt;Context: 定义了和客户程序的接口，它保持了一个 ConcreteState 的代表现在状态的&lt;strong&gt;实例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;State: 状态接口，子类封装各个状态下行为&lt;br /&gt;
 ConcreteState:State 的子类&lt;/p&gt;
&lt;p&gt;使用状态模式的情况&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对象的行为依赖于状态，对象再运行时改变状态&lt;/li&gt;
&lt;li&gt;操作有大量依赖于状态的条件语句&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;优点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;容易添加新的状态 (因为封装在子类),&lt;/li&gt;
&lt;li&gt;状态迁移很明确&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;桥接模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#桥接模式&#34;&gt;#&lt;/a&gt; 桥接模式&lt;/h2&gt;
&lt;h6 id=&#34;将对象的继承转为对象的组合&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#将对象的继承转为对象的组合&#34;&gt;#&lt;/a&gt; 将对象的继承转为对象的组合&lt;/h6&gt;
&lt;h5 id=&#34;将一个软件设计的抽象部分和实现部分分离使它们都可以独立地变化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#将一个软件设计的抽象部分和实现部分分离使它们都可以独立地变化&#34;&gt;#&lt;/a&gt; 将一个软件设计的抽象部分和实现部分分离，使它们都可以独立地变化.&lt;/h5&gt;
&lt;p&gt;类图&lt;img data-src=&#34;G:%5CApp%5CQQ%5CQQ_Chat_File%5C1335894629%5CFileRecv%5CMobileFile%5CIMG_20211121_192040.jpg&#34; alt=&#34;IMG_20211121_192040&#34; /&gt;&lt;/p&gt;
&lt;p&gt;各部分解释&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Abstraction 接口，定义抽象部分的接口，为吃 Implementor 对象的一个参考&lt;/li&gt;
&lt;li&gt;RefinedAbstraction, 继承或者实现 Abstraction&lt;/li&gt;
&lt;li&gt;Implementor: 定义 Implementation 类的接口，接口形式可以不和 Abstraction 界面严格对应&lt;/li&gt;
&lt;li&gt;ConcreteImplementor: 实现 Implementor 接口&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;优点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;分离接口和实现部分，&lt;/li&gt;
&lt;li&gt;提高了可扩展性&lt;/li&gt;
&lt;li&gt;实现了细节对客户的透明&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;适配器模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#适配器模式&#34;&gt;#&lt;/a&gt; 适配器模式&lt;/h2&gt;
&lt;p&gt;目的：解决接口不一致&lt;/p&gt;
&lt;p&gt;分为类适配器模式和对象适配器模式&lt;/p&gt;
&lt;p&gt;类图&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;G:%5CApp%5CQQ%5CQQ_Chat_File%5C1335894629%5CFileRecv%5CMobileFile%5CIMG_20211121_193024_edit_222571278535829.jpg&#34; alt=&#34;IMG_20211121_193024_edit_222571278535829&#34; /&gt;&lt;/p&gt;
&lt;p&gt;类适配器：写一个 target 接口声明所有需要的方法，写一个 adaptor 类继承 adapee 类，并且实现接口 target&lt;/p&gt;
&lt;p&gt;对象适配器：写一个 target 接口声明所有需要的方法，采用聚合的方法来实现 adaptee 类中的方法&lt;/p&gt;
&lt;p&gt;使用适配器模式的情况&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;想要使用现有的类，但现有类的接口不符合需求&lt;/li&gt;
&lt;li&gt;当需要通过创建一个可服用的类，是的本来接口不相容且无关的类结合在一起工作时&lt;/li&gt;
&lt;li&gt;在设计中需要改变多个子类接口，在作用相同但名称不同的类或方法之间进行适配时.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;mvc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mvc&#34;&gt;#&lt;/a&gt; MVC&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;视图：管理作为位图展示到屏幕上的图形和文字输出；&lt;/li&gt;
&lt;li&gt;控制器：翻译用户的输入并依照用户的输入操作模型和视图；&lt;/li&gt;
&lt;li&gt;模型：管理应用的行为和数据，响应数据请求（经常来自视图）和更新状态的指令（经常来自控制器）；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果用户通过一个 View 的 Controller 改变了 Model, 所有其他的 View 都必须反映出该改变.&lt;/p&gt;
&lt;p&gt;当数据发生变化的时候，Model 负责通知所有的 View, 告诉他们数据已经改变了&lt;/p&gt;
</content>
        <category term="大三" scheme="http://example.com/categories/junior/" />
        <category term="软件" scheme="http://example.com/categories/junior/software/" />
        <category term="软件体系结构" scheme="http://example.com/tags/%E8%BD%AF%E4%BB%B6%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/" />
        <updated>2021-12-07T14:09:47.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/12/07/android%E4%B8%8E%E8%85%BE%E8%AE%AF%E4%BA%91mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5-windows/</id>
        <title>未继续_android与腾讯云mysql数据库连接_windows</title>
        <link rel="alternate" href="http://example.com/2021/12/07/android%E4%B8%8E%E8%85%BE%E8%AE%AF%E4%BA%91mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5-windows/"/>
        <content type="html">&lt;p&gt;第一步&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;购买一个腾讯云服务&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/07/u7yYjh39kGZfp8X.png&#34; alt=&#34;image-20211207215535055&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后初始化 (请记住密码)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/07/UlmbJ9cSR8NHkAe.png&#34; alt=&#34;image-20211207221439709&#34; /&gt;&lt;/p&gt;
&lt;p&gt;开启外网地址 (不然怎么连&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/07/Tijutps6K3ZB1wg.png&#34; alt=&#34;image-20211207222027892&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第二步，下载 androidstudio&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/07/aAXyWbjZR6c2uht.png&#34; alt=&#34;image-20211207215837466&#34; /&gt;&lt;/p&gt;
&lt;p&gt;第三步，下载对应数据库版本的 jdbc, 我的腾讯云是 mysql8&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;jdbc 位置是&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubXlzcWwuY29tL3Byb2R1Y3RzL2Nvbm5lY3Rvci8=&#34;&gt;MySQL :: MySQL Connectors&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;打开之后长这样，下载 JDBC&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/07/UnWrX4BHD5PFTpR.png&#34; alt=&#34;image-20211207215936667&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这儿选 platform independent, 然后点第二个下载&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211207220401699.png&#34; alt=&#34;image-20211207220401699&#34; /&gt;&lt;/p&gt;
&lt;p&gt;解压之后能看到这个东西&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211207220521395.png&#34; alt=&#34;image-20211207220521395&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;把上面那玩意引入 android&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;首先在 project 底下的 app 文件夹的子目录找到 libs 文件夹，把那个 jdbc 的 jar 包拖进去&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/07/Qupag1AD3JFYfB6.png&#34; alt=&#34;image-20211207221048176&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如果没有，把左上角的这个调成 ProjectFiles 看看，还没有就自己新建一个&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/07/kJ6CrM37XSUsbQI.png&#34; alt=&#34;image-20211207221113280&#34; /&gt;&lt;/p&gt;
&lt;p&gt;右键它，选择 add as library&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211207221300723.png&#34; alt=&#34;image-20211207221300723&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="大三" scheme="http://example.com/categories/junior/" />
        <category term="失败" scheme="http://example.com/categories/junior/failed/" />
        <category term="android" scheme="http://example.com/tags/android/" />
        <updated>2021-12-07T13:54:50.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/12/07/%E5%A4%96%E8%AE%BE/</id>
        <title>21/12/7 设备管理</title>
        <link rel="alternate" href="http://example.com/2021/12/07/%E5%A4%96%E8%AE%BE/"/>
        <content type="html">&lt;h1 id=&#34;设备管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设备管理&#34;&gt;#&lt;/a&gt; 设备管理&lt;/h1&gt;
&lt;h2 id=&#34;1-控制器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-控制器&#34;&gt;#&lt;/a&gt; 1. 控制器&lt;/h2&gt;
&lt;h6 id=&#34;控制器的任务是在外设与内存之间完成比特流与字节块之间的转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#控制器的任务是在外设与内存之间完成比特流与字节块之间的转换&#34;&gt;#&lt;/a&gt; 控制器的任务是在外设与内存之间完成比特流与字节块之间的转换&lt;/h6&gt;
&lt;h3 id=&#34;11寄存器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11寄存器&#34;&gt;#&lt;/a&gt; 1.1 寄存器&lt;/h3&gt;
&lt;p&gt;每个控制器有几个寄存器，操作系统可以往里写东西&lt;/p&gt;
&lt;h3 id=&#34;12数据缓冲区&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12数据缓冲区&#34;&gt;#&lt;/a&gt; 1.2 数据缓冲区&lt;/h3&gt;
&lt;p&gt;有些控制器上有，用于大数据传输&lt;/p&gt;
&lt;h4 id=&#34;121磁盘控制器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#121磁盘控制器&#34;&gt;#&lt;/a&gt; 1.2.1 磁盘控制器&lt;/h4&gt;
&lt;p&gt;将位流组装为字节存入缓冲区中，形成字节为单位的块&lt;/p&gt;
&lt;h2 id=&#34;2控制方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2控制方式&#34;&gt;#&lt;/a&gt; 2. 控制方式&lt;/h2&gt;
&lt;h4 id=&#34;21-程序直接控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21-程序直接控制&#34;&gt;#&lt;/a&gt; 2.1 程序直接控制&lt;/h4&gt;
&lt;p&gt;cpu 控制全过程&lt;/p&gt;
&lt;p&gt;效率低下 (CPU 一直在等)&lt;/p&gt;
&lt;h4 id=&#34;22中断控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22中断控制&#34;&gt;#&lt;/a&gt; 2.2 中断控制&lt;/h4&gt;
&lt;p&gt;cpu 发送指令，去干别的，等 io 设备准备好，利用中断通知 cpu&lt;/p&gt;
&lt;h4 id=&#34;23-dma方式适合高速大量的外设&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#23-dma方式适合高速大量的外设&#34;&gt;#&lt;/a&gt; 2.3 DMA 方式 (适合高速大量的外设)&lt;/h4&gt;
&lt;p&gt;cpu 启动指令 -&amp;gt;DMA 控制器 -&amp;gt;(data)-&amp;gt; 启动外设&lt;/p&gt;
&lt;p&gt;整个数据的传输都是在 DMA 控制下进行的&lt;/p&gt;
&lt;h4 id=&#34;24通道控制方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#24通道控制方式&#34;&gt;#&lt;/a&gt; 2.4 通道控制方式&lt;/h4&gt;
&lt;p&gt;cpu 连接多个通道，通道连接多个控制器，再连接外部设备&lt;/p&gt;
&lt;p&gt;imgtest&lt;/p&gt;
&lt;h2 id=&#34;3设备io子系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3设备io子系统&#34;&gt;#&lt;/a&gt; 3. 设备 I/o 子系统&lt;/h2&gt;
&lt;p&gt;申请设备&lt;/p&gt;
&lt;p&gt;将数据写入设备&lt;/p&gt;
&lt;p&gt;从设备读取数据&lt;/p&gt;
&lt;p&gt;释放设备&lt;/p&gt;
&lt;h4 id=&#34;分时式共享使用设备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分时式共享使用设备&#34;&gt;#&lt;/a&gt; 分时式共享使用设备&lt;/h4&gt;
&lt;p&gt;以一次 IO 为单位分时使用设备&lt;/p&gt;
&lt;h4 id=&#34;spooling方式使用外设&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spooling方式使用外设&#34;&gt;#&lt;/a&gt; SPOOLING 方式使用外设&lt;/h4&gt;
&lt;p&gt;利用磁盘上的输入输出并模拟高速外设&lt;/p&gt;
&lt;h3 id=&#34;io的组成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#io的组成&#34;&gt;#&lt;/a&gt; IO 的组成&lt;/h3&gt;
&lt;p&gt;I.O 交通管制程序&lt;/p&gt;
&lt;p&gt;调度程序&lt;/p&gt;
&lt;p&gt;设备处理程序&lt;/p&gt;
&lt;h6 id=&#34;基本思想分层构建较低层为较高层服务使较高层独立于硬件为用户提供统一接口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本思想分层构建较低层为较高层服务使较高层独立于硬件为用户提供统一接口&#34;&gt;#&lt;/a&gt; 基本思想：分层构建，较低层为较高层服务，使较高层独立于硬件，为用户提供统一接口&lt;/h6&gt;
&lt;h4 id=&#34;io设计目标&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#io设计目标&#34;&gt;#&lt;/a&gt; I/O 设计目标&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;设备独立性&lt;/strong&gt; -- 使软硬件相对独立，给上层软件更好的可移植性&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;设备统一命名&lt;/strong&gt; - 每种设备都是有名称的，如何命名以方便系统管理和用户使用是一个重要的问题&lt;/p&gt;
&lt;p&gt;采取预先设计的，统一的逻辑名称&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;出错处理&lt;/strong&gt;：数据尽可能在接近硬件层处理，仅当低层无能为力时，才将错误上交&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缓冲技术&lt;/strong&gt;：设法使数据的到达率和离去率匹配，提高系统的吞吐量&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;设备的分配&lt;/strong&gt;：共享设备和独占设备的分配问题&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="大三" scheme="http://example.com/categories/junior/" />
        <category term="操作系统" scheme="http://example.com/categories/junior/computerSystem/" />
        <category term="操作系统" scheme="http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/" />
        <updated>2021-12-07T00:43:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/12/07/%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/</id>
        <title>21/12/7 存储管理-操作系统</title>
        <link rel="alternate" href="http://example.com/2021/12/07/%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/"/>
        <content type="html">&lt;h1 id=&#34;存储管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#存储管理&#34;&gt;#&lt;/a&gt; 存储管理&lt;/h1&gt;
&lt;h4 id=&#34;地址访问保护机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#地址访问保护机制&#34;&gt;#&lt;/a&gt; 地址访问保护机制&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h5 id=&#34;上下界寄存器和地址检查机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#上下界寄存器和地址检查机制&#34;&gt;#&lt;/a&gt; 上下界寄存器和地址检查机制&lt;/h5&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​		作业拥有上下界，执行访存指令时，判断是否越界&lt;/p&gt;
&lt;p&gt;​		要求：作业程序是&lt;strong&gt;绝对地址&lt;/strong&gt;或&lt;strong&gt;静态可浮动&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;2-基址寄存器-长度寄存器和动态地址转换机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-基址寄存器-长度寄存器和动态地址转换机制&#34;&gt;#&lt;/a&gt; 2. 基址寄存器、长度寄存器和动态地址转换机制&lt;/h5&gt;
&lt;p&gt;​		&lt;strong&gt;当作业被调度运行时，将作业所占内存基址及长度送基址、长度寄存器，在用户态每次执行访存指令时，先看访问地址是否小于长度，然后 + 基址进行访存。用户程序代码是&lt;/strong&gt;动态浮动的&lt;/p&gt;
&lt;h2 id=&#34;可变分区&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可变分区&#34;&gt;#&lt;/a&gt; 可变分区&lt;/h2&gt;
&lt;h6 id=&#34;思想预先不划分内存当作业需要时向系统申请系统从其中挖出一块给该作业&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#思想预先不划分内存当作业需要时向系统申请系统从其中挖出一块给该作业&#34;&gt;#&lt;/a&gt; 思想:&lt;strong&gt; 预先不划分内存，当作业需要时向系统申请，系统从其中挖出一块给该作业&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;Q:&amp;lt;u&amp;gt; 空闲区域如何管理 &amp;lt;/u&amp;gt;?&lt;/p&gt;
&lt;h3 id=&#34;多道连续可变分区法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多道连续可变分区法&#34;&gt;#&lt;/a&gt; &lt;strong&gt;多道连续可变分区法&lt;/strong&gt;&lt;/h3&gt;
&lt;h5 id=&#34;特点多道连续不固定划分内存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特点多道连续不固定划分内存&#34;&gt;#&lt;/a&gt; 特点：多道，连续，不固定划分内存&lt;/h5&gt;
&lt;h5 id=&#34;管理方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#管理方法&#34;&gt;#&lt;/a&gt; 管理方法&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;系统设置一个空闲块队列，初始状态时队列中只有一个连续的空闲块。作业到达后，以&lt;/strong&gt;某种策略分配空间。作业撤离时，将释放的空间加入空闲队列。&lt;/p&gt;
&lt;h5 id=&#34;释放方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#释放方法&#34;&gt;#&lt;/a&gt; 释放方法&lt;/h5&gt;
&lt;p&gt;相邻合并，否则插入&lt;/p&gt;
&lt;h5 id=&#34;例一&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#例一&#34;&gt;#&lt;/a&gt; 例一&lt;/h5&gt;
&lt;p&gt;进入执行顺序：(1,2,3)-&amp;gt;(4)-&amp;gt;(5)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211112134311512.png&#34; alt=&#34;image-20211112134311512&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;分配方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分配方法&#34;&gt;#&lt;/a&gt; 分配方法&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;首次满足法 从头到尾找，找到的第一个满足它的空间就给它&lt;/li&gt;
&lt;li&gt;最佳满足法 从队列中找一个最接近的空闲队列给它&lt;/li&gt;
&lt;li&gt;最大满足法 每次找最大的空间给最新创建的进程&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;可用空间管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可用空间管理&#34;&gt;#&lt;/a&gt; 可用空间管理&lt;/h4&gt;
&lt;h5 id=&#34;紧致机制-将已有的进程挪到一起腾出大块的连续空间&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#紧致机制-将已有的进程挪到一起腾出大块的连续空间&#34;&gt;#&lt;/a&gt; 紧致机制 -- 将已有的进程挪到一起，腾出大块的连续空间&lt;/h5&gt;
&lt;h5 id=&#34;可再定位式分区-浮动分区分配&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可再定位式分区-浮动分区分配&#34;&gt;#&lt;/a&gt; 可再定位式分区 -- 浮动分区分配&lt;/h5&gt;
&lt;h2 id=&#34;页式存储管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#页式存储管理&#34;&gt;#&lt;/a&gt; 页式存储管理&lt;/h2&gt;
&lt;h6 id=&#34;解决作业不连续存放的问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决作业不连续存放的问题&#34;&gt;#&lt;/a&gt; 解决作业不连续存放的问题&lt;/h6&gt;
&lt;p&gt;&lt;strong&gt;特点：&lt;/strong&gt; &lt;strong&gt;作业&lt;/strong&gt; &lt;strong&gt;(进程)&lt;/strong&gt; &lt;strong&gt;分成页面，内存也划分成页面，将作业&lt;/strong&gt; **(进程 **) &lt;strong&gt;页面不连续地分布到内存页面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211112140406228.png&#34; alt=&#34;image-20211112140406228&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;基本原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本原理&#34;&gt;#&lt;/a&gt; 基本原理&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211112140441074.png&#34; alt=&#34;image-20211112140441074&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211112141149243.png&#34; alt=&#34;image-20211112141149243&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分页逻辑地址&lt;/strong&gt; &lt;strong&gt;= P (页号).d (&lt;/strong&gt;  &lt;strong&gt;页内位移&lt;/strong&gt; ** ) **&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分页物理地址&lt;/strong&gt; &lt;strong&gt;= f(&lt;strong&gt;&lt;strong&gt;页帧号&lt;/strong&gt;&lt;/strong&gt;).d (&lt;strong&gt;&lt;strong&gt;同上&lt;/strong&gt;&lt;/strong&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P =&lt;/strong&gt; &lt;strong&gt;线性逻辑地址&lt;/strong&gt; &lt;strong&gt;/&lt;/strong&gt; &lt;strong&gt;页面大小；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;d =&lt;/strong&gt; &lt;strong&gt;线性逻辑地址&lt;/strong&gt; **- P***&lt;strong&gt; 页面大小。&lt;/strong&gt;&lt;/p&gt;
&lt;h6 id=&#34;为什么是2的k次幂&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么是2的k次幂&#34;&gt;#&lt;/a&gt; 为什么是 2 的 k 次幂？&lt;/h6&gt;
&lt;p&gt;将乘除法转成移位运算&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为了取出一个数据，系统需要访问内存几次？&lt;/strong&gt;-- 两次：1. 取页表，2. 取数据&lt;/p&gt;
&lt;h3 id=&#34;快表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#快表&#34;&gt;#&lt;/a&gt; 快表&lt;/h3&gt;
&lt;p&gt;由一组联想寄存器 (TLB, Translation Lookaside Buffer) 组成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;联想寄存器：一种按内容进行并行查找的快速寄存器，访问速度比主存快得多&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211112142834494.png&#34; alt=&#34;image-20211112142834494&#34; /&gt;&lt;/p&gt;
&lt;h6 id=&#34;使用bitmap数组空闲页帧链管理可用页帧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用bitmap数组空闲页帧链管理可用页帧&#34;&gt;#&lt;/a&gt; 使用 bitmap 数组 / 空闲页帧链管理可用页帧&lt;/h6&gt;
&lt;h5 id=&#34;共享&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#共享&#34;&gt;#&lt;/a&gt; 共享&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;通过页表可以使几个逻辑空间指向同一个物理空间，实现程序共享。&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;越界保护&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#越界保护&#34;&gt;#&lt;/a&gt; 越界保护&lt;/h5&gt;
&lt;p&gt;设置页表长度寄存器，查页表前，检查页号是否越界&lt;/p&gt;
&lt;h5 id=&#34;访问保护&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#访问保护&#34;&gt;#&lt;/a&gt; 访问保护&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;在每个页表项中增设一存储保护域，用于说明对该页的访问权限，每一个对该页存储的访问都首先要比照是否满足该页访问权限的说明，满足则访问，否则报异常。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;ø优点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ø优点&#34;&gt;#&lt;/a&gt; Ø&lt;strong&gt; 优点&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;ü&lt;strong&gt; 没有外碎片，每个内碎片不超过页大小。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ü&lt;strong&gt; 程序不必连续存放。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;ø主要缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ø主要缺点&#34;&gt;#&lt;/a&gt; Ø&lt;strong&gt; 主要缺点：&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;ü&lt;strong&gt; 程序要一次全部装入内存才能执行。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ü&lt;strong&gt; 采用动态地址变换机构会增加计算机的成本和降低处理机的速度。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ü&lt;strong&gt; 各种数据结构&lt;/strong&gt; (页表，空闲页表) 要占用一定的内存空间，而且系统要花费一定的时间来建立和管理这些表格。&lt;/p&gt;
&lt;p&gt;ü&lt;strong&gt; 依然存在内碎片。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;段式存储管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#段式存储管理&#34;&gt;#&lt;/a&gt; 段式存储管理&lt;/h2&gt;
&lt;h4 id=&#34;特点按作业的自然段将其逻辑空间分成若干段作业以段为单位分配内存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特点按作业的自然段将其逻辑空间分成若干段作业以段为单位分配内存&#34;&gt;#&lt;/a&gt; 特点:&lt;strong&gt; 按作业的自然段将其逻辑空间分成若干段，作业以段为单位分配内存。&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Ø&lt;strong&gt; 用户作业逻辑空间为二维空间，由若干自然段组成。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ø 逻辑地址：段号段内偏移，记作 S,d。编译及装配时把所有地址记成 (S,d) 的形式。&lt;/p&gt;
&lt;p&gt;Ø &lt;strong&gt;物理内存空间管理：与多道可变划分法一样，系统以段为单位分配物理内存。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211112144254340.png&#34; alt=&#34;image-20211112144254340&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211112144844677.png&#34; alt=&#34;image-20211112144844677&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;段页式管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#段页式管理&#34;&gt;#&lt;/a&gt; 段页式管理&lt;/h3&gt;
&lt;p&gt;特点：&lt;strong&gt;将作业分成若干段，每段用页式管理实现内存分配&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为了获得一条指令或者数据，需要访问内存几次？&lt;/strong&gt;--3 次，段表，页表，数据&lt;/p&gt;
&lt;h2 id=&#34;内存扩充技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内存扩充技术&#34;&gt;#&lt;/a&gt; 内存扩充技术&lt;/h2&gt;
&lt;h6 id=&#34;借助大容量的辅存实现内存的扩充&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#借助大容量的辅存实现内存的扩充&#34;&gt;#&lt;/a&gt; 借助大容量的辅存实现内存的扩充&lt;/h6&gt;
&lt;h3 id=&#34;覆盖技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#覆盖技术&#34;&gt;#&lt;/a&gt; 覆盖技术&lt;/h3&gt;
&lt;p&gt;** 将用户空间划分成一个固定区和多个覆盖区。主程序放固定区，依次调用的子程序则放在同一个覆盖区。**&lt;strong&gt; 操作系统提供覆盖系统调用函数，由用户编程序显式调用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;相当于时间换空间&lt;/p&gt;
&lt;h3 id=&#34;交换技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#交换技术&#34;&gt;#&lt;/a&gt; 交换技术&lt;/h3&gt;
&lt;p&gt;将处于等待状态 (等 I/O 结束) 或就绪 (等 CPU) 状态的作业从主存换出到辅存，把将要执行的进程移入主存。&lt;/p&gt;
&lt;p&gt;优点:&lt;/p&gt;
&lt;p&gt;提高并发性&lt;/p&gt;
&lt;p&gt;缺点:&lt;/p&gt;
&lt;p&gt;换入换出增加处理机开销&lt;/p&gt;
&lt;p&gt;程序换入时存在重定位问题&lt;/p&gt;
&lt;h6 id=&#34;和覆盖技术对比&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#和覆盖技术对比&#34;&gt;#&lt;/a&gt; 和覆盖技术对比&lt;/h6&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211116081410386.png&#34; alt=&#34;image-20211116081410386&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;虚拟存储技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#虚拟存储技术&#34;&gt;#&lt;/a&gt; 虚拟存储技术&lt;/h3&gt;
&lt;h4 id=&#34;基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基础&#34;&gt;#&lt;/a&gt; 基础&lt;/h4&gt;
&lt;p&gt;程序中不是每一条指令都会在程序的一次运行过程中执行到。&lt;br /&gt;
错误处理子程序&lt;br /&gt;
条件语句 (if...else...)&lt;br /&gt;
 程序中有的指令可能只执行一次&lt;br /&gt;
程序的初始化部分&lt;br /&gt;
程序执行的局部性原理：在一段时间内，作业一般不会执行到所有程序的指令，也不会存取绝大部分数据，执行的代码和要存取的数据往往集中在某些区域中 (例如一个循环、一个数组)。&lt;/p&gt;
&lt;h5 id=&#34;目的提供用户进程一个巨大的虚拟存储空间&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#目的提供用户进程一个巨大的虚拟存储空间&#34;&gt;#&lt;/a&gt; 目的：提供用户进程一个巨大的虚拟存储空间&lt;/h5&gt;
&lt;h5 id=&#34;手段利用外存磁盘实现此虚空间&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#手段利用外存磁盘实现此虚空间&#34;&gt;#&lt;/a&gt; 手段：利用外存 (磁盘) 实现此虚空间。&lt;/h5&gt;
&lt;h4 id=&#34;基本思想&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本思想&#34;&gt;#&lt;/a&gt; &lt;strong&gt;基本思想&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;系统为进程提供一个比物理内存大得多的虚拟存储空间，虚拟空间大小不受物理内存大小的限制。&lt;/p&gt;
&lt;p&gt;虚拟空间的容量由系统的有效地址长度决定。假设地址长度为 32，按字节寻址，则虚拟存储空间大小为&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mn&gt;32&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;2^{32}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8141079999999999em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 个字节。&lt;/p&gt;
&lt;h4 id=&#34;原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原理&#34;&gt;#&lt;/a&gt; &lt;strong&gt;原理&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;在程序装入时，不必一次将其全部读入到内存，而只需将&lt;strong&gt;当前需要执行的某些区域&lt;/strong&gt;读入到内存，然后程序开始执行。在程序执行过程中，如果&lt;strong&gt;需执行的指令或访问的数据尚未在内存&lt;/strong&gt;，则由处理器&lt;strong&gt;通知操作系统将相应的区域调入内存&lt;/strong&gt;，然后继续执行。&lt;/p&gt;
&lt;h4 id=&#34;分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分类&#34;&gt;#&lt;/a&gt; 分类&lt;/h4&gt;
&lt;h5 id=&#34;虚拟页式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#虚拟页式&#34;&gt;#&lt;/a&gt; 虚拟页式&lt;/h5&gt;
&lt;h6 id=&#34;页表增加外存标识位和外存地址项&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#页表增加外存标识位和外存地址项&#34;&gt;#&lt;/a&gt; 页表增加外存标识位和外存地址项&lt;/h6&gt;
&lt;p&gt;&lt;strong&gt;当内存中没有空闲页面时，如果还要调入一个新页，如何处理？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	淘汰掉一个内存中的页 (淘汰策略)&lt;/p&gt;
&lt;h6 id=&#34;交换区&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#交换区&#34;&gt;#&lt;/a&gt; 交换区&lt;/h6&gt;
&lt;p&gt;用来回写&lt;strong&gt;数据初始值和初值为 0 的工作区&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;页表项结构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211116083233571.png&#34; alt=&#34;image-20211116083233571&#34; /&gt;&lt;/p&gt;
&lt;p&gt;合法位：置上表示该页在内存。&lt;br /&gt;
修改位：置上表示该页被修改过，在释放或淘汰时应写&lt;br /&gt;
回外存。&lt;br /&gt;
页类型：零页时：表示该页在分配物理页帧时应清 0 页帧&lt;br /&gt;
空间；回写 swap 区页时：表示回写 swap 区。&lt;br /&gt;
保护码：R、W、E 保护说明。&lt;br /&gt;
外存块号：该页所在外存的块号。&lt;br /&gt;
页 帧 号：当合法位置上时代表该页所在内存的页帧号。&lt;/p&gt;
&lt;h6 id=&#34;缺页处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缺页处理&#34;&gt;#&lt;/a&gt; 缺页处理&lt;/h6&gt;
&lt;p&gt;根据发生页故障的虚地址得到页表项；&lt;br /&gt;
申请一个可用的页帧 (根据所采用的替换策略可能需要引起淘汰某一页);&lt;br /&gt;
 检查页类型，若为零页，则将页帧清 0，将页帧号填入页表项的页帧号一栏，置合法位为 1。若非零页，则调用 I/O 子系统将外存块号所指的数据读到可用页帧，将页帧号填入页表项中，合法位置 1，结束。&lt;/p&gt;
&lt;h6 id=&#34;页淘汰&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#页淘汰&#34;&gt;#&lt;/a&gt; 页淘汰&lt;/h6&gt;
&lt;p&gt;查 P 页表项的修改位，若未修改，则清 0 合法位，将页帧送回空闲页帧队列。&lt;br /&gt;
若已修改，则检查类型栏。&lt;br /&gt;
若是零页或回写 swap 区页（代表还没有分配交换区空间），则申请一块 swap 区空间，将 P 的外存块号置上并清除页类型。&lt;br /&gt;
调用 I/0 子系统将页帧上的数据写到外存块号所指的外存空间。清 0 合法位，将页帧送回空闲页帧队列。&lt;/p&gt;
&lt;h3 id=&#34;页面置换策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#页面置换策略&#34;&gt;#&lt;/a&gt; 页面置换策略&lt;/h3&gt;
&lt;h6 id=&#34;出发点-把未来不再使用的或者短时期内较少使用的页面调出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#出发点-把未来不再使用的或者短时期内较少使用的页面调出&#34;&gt;#&lt;/a&gt; 出发点： 把未来不再使用的或者短时期内较少使用的页面调出&lt;/h6&gt;
&lt;p&gt;基本概念&lt;/p&gt;
&lt;h6 id=&#34;驻留集进程的合法页集合&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#驻留集进程的合法页集合&#34;&gt;#&lt;/a&gt; 驻留集：进程的合法页集合&lt;/h6&gt;
&lt;h6 id=&#34;访问串进程访问虚拟空间的地址踪迹&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#访问串进程访问虚拟空间的地址踪迹&#34;&gt;#&lt;/a&gt; 访问串：进程访问虚拟空间的地址踪迹&lt;/h6&gt;
&lt;p&gt;举例：某进程依次访问如下地址，0100，0432，0101，0612，0102，0103，…&lt;br /&gt;
 页式虚存管理以页为基本单位，只需页号即可。设页面大小为 100，上述访问串可简化为 1，4，1，6，1，1，…&lt;/p&gt;
&lt;h4 id=&#34;驻留集大小固定的局部置换策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#驻留集大小固定的局部置换策略&#34;&gt;#&lt;/a&gt; 驻留集大小固定的局部置换策略&lt;/h4&gt;
&lt;h5 id=&#34;fifo先进先出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fifo先进先出&#34;&gt;#&lt;/a&gt; FIFO（先进先出）&lt;/h5&gt;
&lt;p&gt;替换最早进入的页&lt;/p&gt;
&lt;p&gt;效果奇差&lt;/p&gt;
&lt;p&gt;有&lt;strong&gt; Belady 奇异&lt;/strong&gt; &lt;strong&gt;指置换策略不满足随着驻留集的增大，页故障数一定减少的规律。&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;opt最佳算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#opt最佳算法&#34;&gt;#&lt;/a&gt; OPT（最佳算法）&lt;/h5&gt;
&lt;p&gt;需要预先知道整个访问串的序列（因此不可实现）&lt;/p&gt;
&lt;p&gt;理论最优&lt;/p&gt;
&lt;h5 id=&#34;lru最近最少使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lru最近最少使用&#34;&gt;#&lt;/a&gt; LRU（最近最少使用）&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;淘汰上次使用距当前最远的页&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;栈算法&lt;/p&gt;
&lt;p&gt;LRU 策略中，当驻留集大小为 m 时，S（m，t）中保持着最近使用过的 m 个页帧；当驻留集大小为 m+1 时，S（m+1，t）中保持着最近使用过的 m+1 个页帧。故 S（m，t）属于 S（m+1，t），LRU 策略是栈算法。&lt;/p&gt;
&lt;h5 id=&#34;clock&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#clock&#34;&gt;#&lt;/a&gt; CLOCK&lt;/h5&gt;
&lt;p&gt;基于 LRU 的思想&lt;br /&gt;
硬件在页面被访问时设置页表项中的访问位&lt;br /&gt;
随着表针的移动，淘汰访问位是 0 的页面，或清除页面的访问位。&lt;br /&gt;
实用的页面置换算法&lt;/p&gt;
&lt;h5 id=&#34;nru最近未使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nru最近未使用&#34;&gt;#&lt;/a&gt; NRU (最近未使用)&lt;/h5&gt;
&lt;p&gt;为页帧在页表项中增加一位使用位，硬件每访存一次即将对应页的使用位置 1，操作系统页面管理程序定时将所有使用位清 0。淘汰时任选一个使用位为 0 (表示 OS 清 0 周期内没被使用过）的页。&lt;br /&gt;
操作系统选择淘汰页时，尽量避免选被修改过的页。因此，选择淘汰页次序：&lt;/p&gt;
&lt;h4 id=&#34;驻留集大小可变的全局置换策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#驻留集大小可变的全局置换策略&#34;&gt;#&lt;/a&gt; 驻留集大小可变的全局置换策略&lt;/h4&gt;
&lt;h5 id=&#34;ws&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ws&#34;&gt;#&lt;/a&gt; WS&lt;/h5&gt;
&lt;p&gt;若驻留集中某页有&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;△&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\triangle&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8888799999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;△&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 个访问间隔没被访问则将其淘汰 (正是因为这个特性，才是动态的)&lt;/p&gt;
&lt;h6 id=&#34;实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现&#34;&gt;#&lt;/a&gt; 实现:&lt;/h6&gt;
&lt;p&gt;每一页面设一计数器，每访存一次，将所有其他页计数器 + 1, 所访存的计数器清零，淘汰计数器等于&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;△&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\triangle&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8888799999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;△&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 的页面&lt;/p&gt;
&lt;h5 id=&#34;实际上开销太大没有用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实际上开销太大没有用&#34;&gt;#&lt;/a&gt; 实际上：开销太大，没有用&lt;/h5&gt;
&lt;h5 id=&#34;sws&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sws&#34;&gt;#&lt;/a&gt; SWS&lt;/h5&gt;
&lt;p&gt;定时检查计时器，淘汰计时器值大于等于&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;△&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\triangle&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8888799999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;△&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 的页面 (当前时钟值 - 页表时钟值)&amp;gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;△&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\triangle&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8888799999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;△&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 的页面)&lt;/p&gt;
&lt;h5 id=&#34;硬件消耗还是很大&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#硬件消耗还是很大&#34;&gt;#&lt;/a&gt; 硬件消耗还是很大&lt;/h5&gt;
&lt;h3 id=&#34;置换策略选择&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#置换策略选择&#34;&gt;#&lt;/a&gt; 置换策略选择&lt;/h3&gt;
&lt;p&gt;动态驻留集 sws + 淘汰页数据延迟清除&lt;/p&gt;
&lt;p&gt;设立两个队列：自由链表和修改链表。&lt;br /&gt;
定时做页淘汰（SWS）：淘汰时不立即抹去页中数据，根据页面修改否挂入自由链 / 修改链，修改链过长或自由链过短时，回写页面后改挂到自由链中。&lt;br /&gt;
若 paging in 要用空页时，选自由链的第一页帧，这时页中数据被覆盖。&lt;br /&gt;
若在自由链 / 修改链中的页面再次被访问时，则将该页从链中摘除，使该页又能通过页表项访问到。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-chinese&#34;&gt; 某计算机采用二级页表的分页存储管理方式，按字节编址，页大小为2^10 字节，页表项大小为2字节，逻辑地址结构为：

逻辑地址空间大小为2^16页，则表示整个逻辑地址空间的页目录表中包含表项的个数至少是： ?
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211119140231647.png&#34; alt=&#34;image-20211119140231647&#34; /&gt;&lt;/p&gt;
&lt;p&gt;逻辑空间: 2^16 *2^10 =2^26&lt;/p&gt;
&lt;p&gt;页大小为 2^10 页表项大小为 2, 则一页能写 2^9 个页表项&lt;/p&gt;
&lt;p&gt;共 2^16 逻辑页，故需要 2^7 页&lt;/p&gt;
</content>
        <category term="大三" scheme="http://example.com/categories/junior/" />
        <category term="操作系统" scheme="http://example.com/categories/junior/computerSystem/" />
        <category term="操作系统,计算机" scheme="http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%AE%A1%E7%AE%97%E6%9C%BA/" />
        <updated>2021-12-07T00:43:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/12/07/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</id>
        <title>21/12/7 文件系统-操作系统</title>
        <link rel="alternate" href="http://example.com/2021/12/07/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
        <content type="html">&lt;h1 id=&#34;文件系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件系统&#34;&gt;#&lt;/a&gt; 文件系统&lt;/h1&gt;
&lt;h2 id=&#34;文件管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件管理&#34;&gt;#&lt;/a&gt; 文件管理&lt;/h2&gt;
&lt;h3 id=&#34;文件系统的功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件系统的功能&#34;&gt;#&lt;/a&gt; 文件系统的功能&lt;/h3&gt;
&lt;p&gt;支持文件所占存储介质空间的分配 / 回收&lt;br /&gt;
支持文件相对起始数据的逻辑块定位到外存上的物理块&lt;br /&gt;
支持对文件访问的安全检查&lt;br /&gt;
支持对文件的读写访问&lt;/p&gt;
&lt;h3 id=&#34;文件的结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件的结构&#34;&gt;#&lt;/a&gt; 文件的结构&lt;/h3&gt;
&lt;h5 id=&#34;逻辑结构文件组织&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#逻辑结构文件组织&#34;&gt;#&lt;/a&gt; 逻辑结构 (&lt;strong&gt;文件组织&lt;/strong&gt;):&lt;/h5&gt;
&lt;p&gt;用户看到的文件组织形式，和存储：设备无关&lt;/p&gt;
&lt;p&gt;有结构的记录式文件：由一个以上的记录构成&lt;/p&gt;
&lt;p&gt;无结构的流式文件：文件没有结构，由一串字符流构成&lt;/p&gt;
&lt;h5 id=&#34;物理结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#物理结构&#34;&gt;#&lt;/a&gt; 物理结构:&lt;/h5&gt;
&lt;p&gt;外存上存放形式，和存储设备特性有很大关系&lt;/p&gt;
&lt;h5 id=&#34;文件存储器物理特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件存储器物理特性&#34;&gt;#&lt;/a&gt; 文件存储器物理特性:&lt;/h5&gt;
&lt;p&gt;•&lt;strong&gt;磁带&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;顺序访问设备→要求文件顺序存放于带上。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;•&lt;strong&gt;磁盘&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;直接（随机）访问设备→文件可顺序、链接式或随机（通过类似页表的索引结构访问）存放于设备上&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;文件系统重要作用之一&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件系统重要作用之一&#34;&gt;#&lt;/a&gt; 文件系统重要作用 (之一)&lt;/h5&gt;
&lt;p&gt;在用户逻辑文件和物理文件之间建立映射&lt;/p&gt;
&lt;h4 id=&#34;文件存取方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件存取方式&#34;&gt;#&lt;/a&gt; 文件存取方式&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;读写文件存储器上的一个物理块的方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;顺序存取：指对文件中的信息按顺序依次读写&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;随机存取法:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;直接存取法：允许用户随意存取文件中任意一个物理记录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;按键存取法：根据文件中各记录的某个数据项内容来存取记录的，这种数据项称之为键&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;几种常见的物理存储方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#几种常见的物理存储方式&#34;&gt;#&lt;/a&gt; 几种常见的物理存储方式&lt;/h4&gt;
&lt;h5 id=&#34;1-连续存储顺序结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-连续存储顺序结构&#34;&gt;#&lt;/a&gt; 1.  连续存储 (顺序结构)&lt;/h5&gt;
&lt;p&gt;它将逻辑上连续的文件信息依次存放在编号连续的物理块上。&lt;/p&gt;
&lt;p&gt;l&lt;strong&gt; 优点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;–&lt;strong&gt;存储方式简单。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;–&lt;strong&gt;对文件记录进行批量存取时，其存取效率较高。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;–&lt;strong&gt;支持定长记录的直接存取，可以通过计算获得存储位置。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;l&lt;strong&gt; 缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;–&lt;strong&gt;不支持随机查找。如果要随机地查找或修改单个记录，此时系统需要逐个地查找诸记录，性能较差，尤其是当文件较大时情况将更为严重。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;–&lt;strong&gt;存在外部碎片。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;–&lt;strong&gt;不便于记录的增加或删除操作。&lt;/strong&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;–&lt;strong&gt;链接结构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;•&lt;strong&gt;将逻辑上连续的文件信息存放在不连续的物理块上，每个物理块设有一个指针指向下一个物理块。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;l&lt;strong&gt; 优点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;–&lt;strong&gt;提高了磁盘空间利用率，不存在外部碎片问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;–&lt;strong&gt;有利于文件插入和删除，及其动态扩充。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;l&lt;strong&gt; 缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;–&lt;strong&gt;仍然不支持随机查找。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;–&lt;strong&gt;由于存储空间可能不连续，带来更多的寻道次数和寻道时间。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;–&lt;strong&gt;需要牺牲一些空间存放链接指针，同时需要维护这些指针，增加了系统开销。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;–&lt;strong&gt;可靠性问题，如指针出错。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;索引结构&lt;/strong&gt;&lt;br /&gt;
将逻辑上连续的文件信息 (记录) 存放在不连续的物理块中，系统为每个文件建立一个专用数据结构 —— 索引表，索引表中存放文件的逻辑块号和物理块号的对应关系&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;优点：&lt;br /&gt;
既能顺序存取，又能直接存取。&lt;br /&gt;
满足了文件动态增长、插入删除的要求。&lt;br /&gt;
没有外碎片，外存空间利用率较高。&lt;br /&gt;
缺点&lt;br /&gt;
较多的寻道次数和寻道时间。&lt;br /&gt;
索引表本身需要存储空间，同时对索引表的维护会增加系统开销。&lt;/li&gt;
&lt;li&gt;索引表组织方式
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;链接文件方式：将多个索引表块按链接文件的方式串联起来&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;多重索引方式：将一个大文件的所有索引表（二级索引) 的地址放在另一个索引表（一级索引) 中。
&lt;ol&gt;
&lt;li&gt;多重索引优势
&lt;ol&gt;
&lt;li&gt;寻址空间较大，相比于链接文件，会大大减少读取对应物理块所需要的读盘次数 (因为要从文件中读取索引项)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;文件的目录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件的目录&#34;&gt;#&lt;/a&gt; 文件的目录&lt;/h3&gt;
&lt;p&gt;OS 观点：文件包含文件控制块和文件体&lt;/p&gt;
&lt;p&gt;文件控制块（FCB）的主要内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;文件名&lt;br /&gt;
创建者&lt;br /&gt;
文件物理位置信息：如索引表&lt;br /&gt;
创建、修改时间、保存时间&lt;br /&gt;
口令：用于对文件访问进行验证&lt;br /&gt;
操作限制：如读、写、执行权限说明&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文件目录提供的功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;实现 “按名存取”&lt;/strong&gt;。用户只须提供文件名，即可对文件进行存取。这是文件系统向用户提供的最基本的服务。&lt;br /&gt;
&lt;strong&gt;提高对目录的检索速度&lt;/strong&gt;。合理地组织目录结构，加快对目录的检索速度，从而加快对文件的存取速度。这是在设计一个大、中型文件系统时，所追求的主要目标。&lt;br /&gt;
&lt;strong&gt;实现文件共享&lt;/strong&gt;。在多用户系统中，应允许多个用户共享一个文件，以节省大量的存储空间并方便用户。&lt;br /&gt;
&lt;strong&gt;解决文件重名问题&lt;/strong&gt;。系统应允许不同用户对不同文件采用相同的名字，以便于用户按照自己的习惯命名和使用文件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;文件目录结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件目录结构&#34;&gt;#&lt;/a&gt; 文件目录结构&lt;/h4&gt;
&lt;h5 id=&#34;l一级目录结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#l一级目录结构&#34;&gt;#&lt;/a&gt; l&lt;strong&gt; 一级目录结构&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;为外存上的全部文件设立一张平面（flat）的目录表，包含所有文件的 FCB。每建立一个新文件即在目录中增加一个 FCB，每当删除一个文件即抹去对应的 FCB，当要访问一个文件时，先按文件名在目录中找到对应的文件 FCB。&lt;br /&gt;
为了快速查找到文件 FCB，可按文件名进行 Hash，或其它快速查找方式&lt;/li&gt;
&lt;li&gt;优点：简单&lt;br /&gt;
缺点：&lt;br /&gt;
1、查找速度慢&lt;br /&gt;
 2、&lt;strong&gt;不允许重名&lt;/strong&gt;&lt;br /&gt;
 3、不便于实现文件共享&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;l二级目录结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#l二级目录结构&#34;&gt;#&lt;/a&gt; l&lt;strong&gt; 二级目录结构&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;设一个主目录 MFD，为系统的每个用户设用户目录 UFD，用户目录是用户所有文件 FCB 的集合，主目录中存放每个用户目录的用户目录名和 UFD 的索引表等（当我们把 UFD 看作是一个文件时，这个文件的内容是用户所有文件 FCB 集合，MFD 中则包含每个 UFD 文件的 FCB&lt;/li&gt;
&lt;li&gt;路径名&lt;br /&gt;
将用户名与文件名连到一起组成路径名。例如：/songhong/test.c&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;多级目录树形目录结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多级目录树形目录结构&#34;&gt;#&lt;/a&gt; 多级目录 —— 树形目录结构&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;树状的多级目录结构&lt;br /&gt;
任何一级目录中的 FCB 既可以描述次一级的子目录，又可以描述一个文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;特点:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;利于文件分类，从文件路径名可看出文件类别。&lt;br /&gt;
查找文件 FCB 耗费时间，要得到文件 FCB，必须从根查起。&lt;br /&gt;
唯一确定文件的路径名太长，故引入当前目录 概念，提供相对于当前目录的相对路径名可加速文件 FCB 的查找，进程控制块存有当前目录信息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;访问&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;必须指出文件所在路径名：从根目录到该文件的路径上各级目录名的组合。也称为文件全名。&lt;br /&gt;
例如：/usr/lib/man&lt;br /&gt;
 相对路径：设置一个 “当前目录”(也叫 “工作目录”)，此时对于文件的查找是从当前目录中进行的。可以带来两点好处：&lt;br /&gt;
用户使用更加方便&lt;br /&gt;
检索效率更高&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优缺点&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;l&lt;strong&gt; 树形多级目录结构的优点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;•&lt;strong&gt;提高了检索目录的速度。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;•&lt;strong&gt;较好地解决了重名问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;l&lt;strong&gt; 缺点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不便于用户共享文件&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;无环图目录结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#无环图目录结构&#34;&gt;#&lt;/a&gt; 无环图目录结构&lt;/h5&gt;
&lt;h6 id=&#34;当一个文件副本可以同时属于两个不同目录类别时即同一个文件有二条路径名或多条路径名时出现无环图目录结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#当一个文件副本可以同时属于两个不同目录类别时即同一个文件有二条路径名或多条路径名时出现无环图目录结构&#34;&gt;#&lt;/a&gt; 当一个文件副本可以同时属于两个不同目录（类别）时，即同一个文件有二条路径名，或多条路径名时出现无环图目录结构。&lt;/h6&gt;
&lt;h6 id=&#34;特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特点&#34;&gt;#&lt;/a&gt; 特点：&lt;/h6&gt;
&lt;p&gt;方便文件共享，分类。&lt;br /&gt;
两个或多个 FCB 的一致性难保证，因此将 FCB 独立存放，引入带文件 / 目录名和 FCB 指针的目录项&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/07/ADfc3PNnYOdbeiH.png&#34; alt=&#34;image-20211130092527762&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;文件共享&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件共享&#34;&gt;#&lt;/a&gt; 文件共享&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h5 id=&#34;硬链接hard-link&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#硬链接hard-link&#34;&gt;#&lt;/a&gt; 硬链接 (hard link)&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;指向同一个索引结点&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;符号链接&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;建立符号链文件，该文件内容为要访问文件的路径名&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;文件存储器空间布局与管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件存储器空间布局与管理&#34;&gt;#&lt;/a&gt; 文件存储器空间布局与管理&lt;/h2&gt;
&lt;h4 id=&#34;空闲区表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#空闲区表&#34;&gt;#&lt;/a&gt; 空闲区表&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/07/H2of5R3Lx7AGNwm.png&#34; alt=&#34;image-20211203133204515&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;位示图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#位示图&#34;&gt;#&lt;/a&gt; 位示图&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/07/knsUycY9irLAS1G.png&#34; alt=&#34;image-20211203133252860&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Cwww13%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211203133418295.png&#34; alt=&#34;image-20211203133418295&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;空闲块链&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#空闲块链&#34;&gt;#&lt;/a&gt; 空闲块链&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/07/LH76uxTbrA3FSno.png&#34; alt=&#34;image-20211203134255752&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/07/FQnjZpyWuqCd6El.png&#34; alt=&#34;image-20211203135715385&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2021/12/07/irJzfKHgLs96TBE.png&#34; alt=&#34;image-20211203140034820&#34; /&gt;&lt;/p&gt;
</content>
        <category term="大三" scheme="http://example.com/categories/junior/" />
        <category term="操作系统" scheme="http://example.com/categories/junior/computerSystem/" />
        <category term="操作系统" scheme="http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/" />
        <updated>2021-12-07T00:43:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/12/06/9.1%20%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%8C%E6%95%B4%E6%80%A7%E6%A6%82%E8%BF%B0/</id>
        <title>21/12/6 Database 数据库完整性概述</title>
        <link rel="alternate" href="http://example.com/2021/12/06/9.1%20%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%8C%E6%95%B4%E6%80%A7%E6%A6%82%E8%BF%B0/"/>
        <content type="html">&lt;p&gt;9.1 数据库完整性概述&lt;/p&gt;
&lt;p&gt;数据库完整性 -- 数据的正确性，有效性，西安共性&lt;/p&gt;
&lt;p&gt;列级约束&lt;/p&gt;
&lt;p&gt;对属性的数据类型，等的定义&lt;/p&gt;
&lt;p&gt;元祖约束&lt;/p&gt;
&lt;p&gt;元组中各个属性之间的约束关系&lt;/p&gt;
&lt;h4 id=&#34;实现完整性约束的方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现完整性约束的方法&#34;&gt;#&lt;/a&gt; 实现完整性约束的方法&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;提供定义机制&lt;/li&gt;
&lt;li&gt;提供检查方法&lt;/li&gt;
&lt;li&gt;违约处理&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;94用户定义的完整性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#94用户定义的完整性&#34;&gt;#&lt;/a&gt; 9.4 用户定义的完整性&lt;/h2&gt;
&lt;h2 id=&#34;95触发器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#95触发器&#34;&gt;#&lt;/a&gt; 9.5 触发器&lt;/h2&gt;
&lt;p&gt;一类用户定义在关系数据表上的一类由事件驱动的特殊过程，用编程的方法实现复杂的业务规则&lt;/p&gt;
&lt;p&gt;是一种特殊类型的存储过程&lt;/p&gt;
&lt;p&gt;可用触发器完成很多数据库完整性保护的过程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;复杂的业务规则&lt;/li&gt;
&lt;li&gt;比较数据修改前后状态&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;SQL:CREATE TRIGER 命令&lt;/p&gt;
&lt;h1 id=&#34;事务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事务&#34;&gt;#&lt;/a&gt; 事务&lt;/h1&gt;
&lt;p&gt;原子性：不可分割&lt;/p&gt;
&lt;p&gt;一致性：事务执行结果必须从一个状态转换到另一个状态时保持一致，即若中间出现错误，则将所有操作撤销&lt;/p&gt;
&lt;p&gt;事务应当具有 ACID 性质，&lt;br /&gt;
A 是&lt;strong&gt;原子&lt;/strong&gt;性 (atomic)：事务中包含的各项操作必须全部成功执行或者全部不执行。任何一项操作失败，将导致整个事务失败，其他已经执行的任务所作的数据操作都将被撤销，只有所有的操作全部成功，整个事务才算是成功完成。&lt;br /&gt;
C 是&lt;strong&gt;一致性&lt;/strong&gt; (consistent)：保证了当事务结束后，系统状态是一致的。那么什么是一致的系统状态？例如，如果银行始终遵循着 &amp;quot;银行账号必须保持正态平衡&amp;quot; 的原则，那么银行系统的状态就是一致的。上面的转账例子中，在取钱的过程中，账户会出现负态平衡，在事务结束之后，系统又回到一致的状态。这样，系统的状态对于客户来说，始终是一致的。&lt;br /&gt;
I 是&lt;strong&gt;隔离&lt;/strong&gt;性 (isolated)：使得并发执行的事务，彼此无法看到对方的中间状态。保证了并发执行的事务顺序执行，而不会导致系统状态不一致。&lt;br /&gt;
D 是&lt;strong&gt;持久性&lt;/strong&gt; (durable)：保证了事务完成后所作的改动都会被持久化，即使是发生灾难性的失败。可恢复性资源保存了一份事务日志，如果资源发生故障，可以通过日志来将数据重建起来。&lt;/p&gt;
&lt;p&gt;事务应处在下列状态之一&lt;/p&gt;
&lt;p&gt;活动状态&lt;/p&gt;
&lt;p&gt;失败状态：意味着要回滚&lt;/p&gt;
&lt;p&gt;中止状态：数据库已经回滚完毕，恢复到提交前状态&lt;/p&gt;
&lt;p&gt;提交状态：当数据更改完全写入磁盘时，进入提交状态&lt;/p&gt;
&lt;p&gt;10.3.1 事务故障的恢复&lt;/p&gt;
&lt;p&gt;1. 反向扫描日文件日志，查找该事务的更新操作&lt;/p&gt;
&lt;p&gt;2. 对该事务的更新操作执行你操作&lt;/p&gt;
&lt;p&gt;3. 继续反向扫描，直到读到此事务的开始操作&lt;/p&gt;
&lt;p&gt;10.3.2 系统故障恢复&lt;/p&gt;
&lt;p&gt;1.&lt;strong&gt; 正向&lt;/strong&gt;扫描日志文件，列出 Redo 队列，Undo 队列&lt;/p&gt;
&lt;h3 id=&#34;日志&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#日志&#34;&gt;#&lt;/a&gt; 日志&lt;/h3&gt;
&lt;p&gt;&amp;lt;u&amp;gt;&lt;strong&gt; 登记两条原则&lt;/strong&gt; &amp;lt;/u&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;u&amp;gt;&lt;strong&gt;1. 登记次序严格按并行事物执行顺序&lt;/strong&gt; &amp;lt;/u&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;u&amp;gt;&lt;strong&gt;2. 先写日志文件，后写数据库&lt;/strong&gt; &amp;lt;/u&amp;gt;&lt;/p&gt;
</content>
        <category term="大三" scheme="http://example.com/categories/junior/" />
        <category term="数据库" scheme="http://example.com/categories/junior/database/" />
        <category term="数据库,完整性" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93-%E5%AE%8C%E6%95%B4%E6%80%A7/" />
        <updated>2021-12-06T14:53:47.000Z</updated>
    </entry>
</feed>
